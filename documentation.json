{
    "pipes": [
        {
            "name": "AddressHiddenPipe",
            "id": "pipe-AddressHiddenPipe-c85368392760848a08eae3b753a62411",
            "file": "src/app/shared/pipes/address-hidden.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "12"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "12",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "addressHidden",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'addressHidden',\r\n})\r\nexport class AddressHiddenPipe implements PipeTransform {\r\n  transform(value: string, length: number = 12): string {\r\n    if (length > value.length) {\r\n      return value;\r\n    } else {\r\n      const index = Math.floor(length / 2);\r\n      return value.substring(0, index) + '...' + value.slice(-index);\r\n    }\r\n  }\r\n}\r\n"
        },
        {
            "name": "DayjsPipe",
            "id": "pipe-DayjsPipe-eea913a3323686a64aa8756076f4af92",
            "file": "src/app/shared/pipes/dayjs.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "day",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as dayjs from 'dayjs';\r\nimport { DateService } from '../services/date.service';\r\n\r\n@Pipe({\r\n  name: 'day',\r\n})\r\nexport class DayjsPipe implements PipeTransform {\r\n  constructor(private dateService: DateService) {}\r\n\r\n  transform(value: string | number): string {\r\n    return this.dateService.fromNow(value);\r\n  }\r\n}\r\n"
        },
        {
            "name": "ImageUrlPipe",
            "id": "pipe-ImageUrlPipe-63cea012f48e0dd0dff62b696c38e02e",
            "file": "src/app/shared/pipes/image-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "imageHash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageHash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "imageUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Pipe({\r\n  name: 'imageUrl',\r\n})\r\nexport class ImageUrlPipe implements PipeTransform {\r\n  transform(imageHash: string): string {\r\n    return environment.ipfsUrl + imageHash;\r\n  }\r\n}\r\n"
        },
        {
            "name": "LinkToIconPipe",
            "id": "pipe-LinkToIconPipe-5107ff5cb4d619df6734ab3f77fa4478",
            "file": "src/app/shared/pipes/link-to-icon.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "linkPrefix",
                    "defaultValue": "'^(https?://)?([a-z0-9-]+.)?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "newSocialLinkRegExp",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "socialLinksRegExp",
                    "defaultValue": "{\r\n    facebook: [\r\n      this.newSocialLinkRegExp('facebook.com'),\r\n      this.newSocialLinkRegExp('fb.me'),\r\n      this.newSocialLinkRegExp('fb.com'),\r\n      this.newSocialLinkRegExp('facebook.me'),\r\n    ],\r\n    twitter: [this.newSocialLinkRegExp('twitter.com')],\r\n    medium: [this.newSocialLinkRegExp('medium.com')],\r\n    linkedin: [\r\n      this.newSocialLinkRegExp('linkedin.com'),\r\n      this.newSocialLinkRegExp('linked.in'),\r\n    ],\r\n    github: [this.newSocialLinkRegExp('github.com')],\r\n    reddit: [this.newSocialLinkRegExp('reddit.com')],\r\n    youtube: [\r\n      this.newSocialLinkRegExp('youtube.com'),\r\n      this.newSocialLinkRegExp('youtu.be'),\r\n    ],\r\n    telegram: [\r\n      this.newSocialLinkRegExp('t.me'),\r\n      this.newSocialLinkRegExp('telegram.me'),\r\n    ],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<RegExp[]>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "getLinkBrand",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSocialBrandLink",
                    "args": [
                        {
                            "name": "brand",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "brand",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "linkToIcon",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { KeyValuePair } from '../../core/models/key-value-pair.model';\r\n\r\n@Pipe({\r\n  name: 'linkToIcon',\r\n})\r\nexport class LinkToIconPipe implements PipeTransform {\r\n  transform(link: string): string {\r\n    return this.getLinkBrand(link);\r\n  }\r\n\r\n  isSocialBrandLink(brand: string, link: string): boolean {\r\n    if (!link) {\r\n      return false;\r\n    }\r\n\r\n    link = link.trim().toLowerCase();\r\n    return !!this.socialLinksRegExp[brand].find((r) => r.test(link));\r\n  }\r\n\r\n  getLinkBrand(link: string): string {\r\n    for (const key in this.socialLinksRegExp) {\r\n      if (this.isSocialBrandLink(key, link)) {\r\n        return key;\r\n      }\r\n    }\r\n    return 'web';\r\n  }\r\n\r\n  newSocialLinkRegExp = (brandDomain: string): RegExp => {\r\n    return new RegExp(this.linkPrefix + brandDomain);\r\n  };\r\n\r\n  linkPrefix = '^(https?://)?([a-z0-9-]+.)?';\r\n\r\n  socialLinksRegExp: KeyValuePair<RegExp[]> = {\r\n    facebook: [\r\n      this.newSocialLinkRegExp('facebook.com'),\r\n      this.newSocialLinkRegExp('fb.me'),\r\n      this.newSocialLinkRegExp('fb.com'),\r\n      this.newSocialLinkRegExp('facebook.me'),\r\n    ],\r\n    twitter: [this.newSocialLinkRegExp('twitter.com')],\r\n    medium: [this.newSocialLinkRegExp('medium.com')],\r\n    linkedin: [\r\n      this.newSocialLinkRegExp('linkedin.com'),\r\n      this.newSocialLinkRegExp('linked.in'),\r\n    ],\r\n    github: [this.newSocialLinkRegExp('github.com')],\r\n    reddit: [this.newSocialLinkRegExp('reddit.com')],\r\n    youtube: [\r\n      this.newSocialLinkRegExp('youtube.com'),\r\n      this.newSocialLinkRegExp('youtu.be'),\r\n    ],\r\n    telegram: [\r\n      this.newSocialLinkRegExp('t.me'),\r\n      this.newSocialLinkRegExp('telegram.me'),\r\n    ],\r\n  };\r\n}\r\n"
        },
        {
            "name": "NumeralPipe",
            "id": "pipe-NumeralPipe-fe0aaedbce9d4f0d23419bd7fadab581",
            "file": "src/app/shared/pipes/numeral.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "numeral",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as numeral from 'numeral';\r\n\r\n@Pipe({\r\n  name: 'numeral',\r\n})\r\nexport class NumeralPipe implements PipeTransform {\r\n  transform(value: number): string {\r\n    return numeral(value).format('0,0a');\r\n  }\r\n}\r\n"
        },
        {
            "name": "PluralizePipe",
            "id": "pipe-PluralizePipe-4086d9b2a2b50f05b53202c678193888",
            "file": "src/app/shared/pipes/pluralize.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "word",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "word",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pluralize",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport * as pluralize from 'pluralize';\n\n@Pipe({\n  name: 'pluralize',\n})\nexport class PluralizePipe implements PipeTransform {\n  transform(value: number | null, word: string): string {\n    return value !== null ? pluralize(word, value) : '';\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-e92c12a58cd1dce0ab303e05e02d26c9",
            "file": "src/app/state/state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store';\r\nimport { spaceReducer } from './space/space.reducer';\r\nimport { contentReducer } from './content/content.reducer';\r\nimport { SpaceState } from './space/space.state';\r\nimport { ContentState } from './content/content.state';\r\nimport { postReducer } from './post/post.reducer';\r\nimport { PostState } from './post/post.state';\r\nimport { profileReducer } from './profile/profile.reducer';\r\nimport { ProfileState } from './profile/profile.state';\r\nimport { ReplyIdState } from './reply-id/reply-id.state';\r\nimport { replyIdReducer } from './reply-id/reply-id.reducer';\r\nimport { LoaderState } from './notification/loader.state';\r\nimport { loaderReducer } from './notification/loader.reducer';\r\nimport { MyAccountState } from './my-account/my-account.state';\r\nimport { myAccountReducer } from './my-account/my-account.reducer';\r\nimport { MyPostReactionsState } from './my-post-reactions/my-post-reactions.state';\r\nimport { myPostReactionsReducer } from './my-post-reactions/my-post-reactions.reducer';\r\nimport { FollowedSpaceIdsState } from './followed-space-ids/followed-space-ids.state';\r\nimport { followedSpaceIdsReducer } from './followed-space-ids/followed-space-ids.reducer';\r\nimport { FollowedAccountIdsState } from './followed-account-ids/followed-account-ids.state';\r\nimport { followedAccountIdsReducer } from './followed-account-ids/followed-account-ids.reducer';\r\n\r\nexport interface AppState {\r\n  spaces: SpaceState;\r\n  contents: ContentState;\r\n  posts: PostState;\r\n  profiles: ProfileState;\r\n  replyIds: ReplyIdState;\r\n  loader: LoaderState;\r\n  myAccount: MyAccountState;\r\n  myPostReactions: MyPostReactionsState;\r\n  followedSpaceIds: FollowedSpaceIdsState;\r\n  followedAccountIds: FollowedAccountIdsState;\r\n}\r\n\r\nexport const appReducers: ActionReducerMap<AppState> = {\r\n  spaces: spaceReducer,\r\n  contents: contentReducer,\r\n  posts: postReducer,\r\n  profiles: profileReducer,\r\n  replyIds: replyIdReducer,\r\n  loader: loaderReducer,\r\n  myAccount: myAccountReducer,\r\n  myPostReactions: myPostReactionsReducer,\r\n  followedSpaceIds: followedSpaceIdsReducer,\r\n  followedAccountIds: followedAccountIdsReducer,\r\n};\r\n",
            "properties": [
                {
                    "name": "contents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "followedAccountIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowedAccountIdsState",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "followedSpaceIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowedSpaceIdsState",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderState",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "myAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyAccountState",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "myPostReactions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyPostReactionsState",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "posts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostState",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileState",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "replyIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplyIdState",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "spaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceState",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ContentEntity",
            "id": "interface-ContentEntity-71f4d0b15beb73683385e04cc414f9f7",
            "file": "src/app/core/entities/content-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ContentEntity {\r\n  id: string;\r\n  body: string;\r\n  canonical: string;\r\n  image: string;\r\n  tags: Array<string>;\r\n  title: string;\r\n  summary: string;\r\n  isShowMore: boolean;\r\n  name: string;\r\n  avatar: string;\r\n  link?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "canonical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isShowMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ContentState",
            "id": "interface-ContentState-c3b81a5adda2383f7cc8d5f68b50c27a",
            "file": "src/app/state/content/content.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { Content } from '../../core/types/content.type';\r\n\r\nexport interface ContentState extends EntityState<Content> {}\r\n\r\nexport const contentAdapter: EntityAdapter<Content> =\r\n  createEntityAdapter<Content>();\r\n\r\nexport const initialContentState: ContentState =\r\n  contentAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "Entity",
            "id": "interface-Entity-121d048e7f9082d783b0f9344e6718fe",
            "file": "src/app/core/entities/entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Entity<T> {\r\n  [id: string]: T;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-121d048e7f9082d783b0f9344e6718fe",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "FollowedAccountIdsState",
            "id": "interface-FollowedAccountIdsState-6481bce0233bc4cdad77b08753a9031f",
            "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface FollowedAccountIdsState extends EntityState<FollowedAccountIdsStruct> {}\r\n\r\nexport type FollowedAccountIdsStruct = {\r\n  id: string;\r\n  followingAccountIds: Array<string>;\r\n}\r\n\r\nexport const followedAccountIdsAdapter: EntityAdapter<FollowedAccountIdsStruct> =\r\n  createEntityAdapter<FollowedAccountIdsStruct>();\r\n\r\nexport const initialFollowedAccountIdsState: FollowedAccountIdsState =\r\n  followedAccountIdsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "FollowedSpaceIdsState",
            "id": "interface-FollowedSpaceIdsState-a7875eb9dde9832eb05525c4221533f9",
            "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport interface FollowedSpaceIdsState\r\n  extends EntityState<FollowedSpaceIdsStruct> {}\r\n\r\nexport type FollowedSpaceIdsStruct = {\r\n  id: string;\r\n  followingSpaceIds: Array<string>;\r\n};\r\n\r\nexport const followedSpaceIdsAdapter: EntityAdapter<FollowedSpaceIdsStruct> =\r\n  createEntityAdapter<FollowedSpaceIdsStruct>();\r\n\r\nexport const initialFollowedSpaceIdsState: FollowedSpaceIdsState =\r\n  followedSpaceIdsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "KeyValuePair",
            "id": "interface-KeyValuePair-e5cfdeed3f1d30dc229284c1ae3287c3",
            "file": "src/app/core/models/key-value-pair.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyValuePair<T> {\r\n  [key: string]: T;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-e5cfdeed3f1d30dc229284c1ae3287c3",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 174,
            "methods": []
        },
        {
            "name": "LoaderState",
            "id": "interface-LoaderState-f31f67dc10e0a935e01b12529a03222f",
            "file": "src/app/state/notification/loader.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const initialLoaderState: LoaderState = {\r\n  isLoading: false,\r\n};\r\n\r\nexport interface LoaderState {\r\n  isLoading: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MockupData",
            "id": "interface-MockupData-017500f9636a4b2487d27dc564336ec8",
            "file": "src/app/core/models/mockup-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ContentEntity} from \"../entities/content-entity.model\";\r\nimport {KeyValuePair} from \"./key-value-pair.model\";\r\nimport {ProfileEntity} from \"../entities/profile-entity.model\";\r\nimport {SpaceEntity} from \"../entities/space-entity.model\";\r\nimport {PostEntity} from \"../entities/post-entity.model\";\r\n\r\nexport interface MockupData {\r\n  contents: KeyValuePair<ContentEntity>;\r\n  profiles: KeyValuePair<ProfileEntity>;\r\n  spaces: KeyValuePair<SpaceEntity>;\r\n  posts: KeyValuePair<PostEntity>;\r\n}\r\n",
            "properties": [
                {
                    "name": "contents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<ContentEntity>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "posts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<PostEntity>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<ProfileEntity>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "spaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<SpaceEntity>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MyAccountState",
            "id": "interface-MyAccountState-c976bb5a5eeaeaa0772285ed9f87f03b",
            "file": "src/app/state/my-account/my-account.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MyAccountState {\r\n  address: string;\r\n  blocked: boolean;\r\n  nonce: number;\r\n}\r\n\r\nexport const initialMyAccountState: MyAccountState = {\r\n  address: '',\r\n  blocked: false,\r\n  nonce: 0,\r\n};\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "blocked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nonce",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MyPostReactionsState",
            "id": "interface-MyPostReactionsState-46703884e2a504da957b1d2a526e2634",
            "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport type MyPostReactions = {\r\n  id: string;\r\n  reactionId?: string;\r\n  kind?: 'Upvote' | 'Downvote';\r\n};\r\n\r\nexport interface MyPostReactionsState extends EntityState<MyPostReactions> {}\r\n\r\nexport const myPostReactionsAdapter: EntityAdapter<MyPostReactions> =\r\n  createEntityAdapter<MyPostReactions>();\r\n\r\nexport const initialMyPostReactionsState: MyPostReactionsState =\r\n  myPostReactionsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "OnViewReaction",
            "id": "interface-OnViewReaction-b432379c6c5002cf9d17181e0d423b00",
            "file": "src/app/core/interfaces/on-view-reaction.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface OnViewReaction {\r\n  onViewReaction(): void;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "onViewReaction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "OwnSpaceIdsState",
            "id": "interface-OwnSpaceIdsState-59170cb51b75467a5388617227f6c8a1",
            "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nexport type OwnSpaceIdsStruct = {\r\n  id: string;\r\n  ownSpaceIds: Array<string>;\r\n};\r\n\r\nexport interface OwnSpaceIdsState extends EntityState<OwnSpaceIdsStruct> {}\r\n\r\nexport const ownSpaceIdsAdapter: EntityAdapter<OwnSpaceIdsStruct> =\r\n  createEntityAdapter<OwnSpaceIdsStruct>();\r\n\r\nexport const initialOwnSpaceIdsState: OwnSpaceIdsState =\r\n  ownSpaceIdsAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "Post",
            "id": "interface-Post-bb99e389b01f8d551ccdeb120c8ef93e",
            "file": "src/app/core/models/post/post-list-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\r\n  id: string;\r\n  ownerId: string;\r\n  ownerImageUrl: string;\r\n  spaceName: string;\r\n  title: string;\r\n  summary: string;\r\n  imageUrl: string;\r\n  createdAtTime: number;\r\n  repliesCount: number;\r\n  hiddenRepliesCount: number;\r\n  visibleRepliesCount: number;\r\n  sharesCount: number;\r\n  upvotesCount: number;\r\n  downvotesCount: number;\r\n  isSharedPost: boolean;\r\n  isComment: boolean;\r\n  isShowMore: boolean;\r\n  ownerName: string;\r\n  postLink: string;\r\n  hidden: boolean;\r\n  spaceHidden: boolean;\r\n  body: string;\r\n  tags: string[];\r\n  spaceId: string;\r\n  link?: string;\r\n  sharedPostId?: string;\r\n  rootPostId?: string;\r\n  spaceLink?: string;\r\n  parentId?: string;\r\n  isChildrenCommentShow?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "downvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "hiddenRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isChildrenCommentShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isComment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isSharedPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isShowMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "ownerImageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ownerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "postLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "repliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rootPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sharedPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "sharesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "spaceHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "spaceLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "spaceName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "upvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "visibleRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "PostEntity",
            "id": "interface-PostEntity-e2f6ed3834ddaa999e1e19fba12a6c5d",
            "file": "src/app/core/entities/post-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PostEntity {\r\n  createdByAccount: string;\r\n  createdAtBlock: number;\r\n  createdAtTime: number;\r\n  isUpdated: boolean;\r\n  contentId: string;\r\n  id: string;\r\n  ownerId: string;\r\n  hidden: boolean;\r\n  spaceId: string;\r\n  repliesCount: number;\r\n  hiddenRepliesCount: number;\r\n  visibleRepliesCount: number;\r\n  sharesCount: number;\r\n  upvotesCount: number;\r\n  downvotesCount: number;\r\n  score: number;\r\n  isRegularPost: boolean;\r\n  isSharedPost: boolean;\r\n  isComment: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "contentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createdByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "downvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "hiddenRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isComment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isRegularPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isSharedPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "repliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sharesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "upvotesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "visibleRepliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "PostState",
            "id": "interface-PostState-c343724ee6eb0bdcb3b3debfc0713502",
            "file": "src/app/state/post/post.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { Post } from '../../core/models/post/post-list-item.model';\r\n\r\nexport interface PostState extends EntityState<Post> {}\r\n\r\nexport const postAdapter: EntityAdapter<Post> = createEntityAdapter<Post>();\r\n\r\nexport const initialPostState: PostState = postAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ProfileEntity",
            "id": "interface-ProfileEntity-3998d75cfc3d47c21641cc5a2e64776b",
            "file": "src/app/core/entities/profile-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ProfileEntity {\r\n  id: string;\r\n  followersCount: number;\r\n  followingAccountsCount: number;\r\n  followingSpacesCount: number;\r\n  reputation: number;\r\n  hasProfile: boolean;\r\n  createdByAccount: string;\r\n  createdAtBlock: number;\r\n  createdAtTime: number;\r\n  isUpdated: boolean;\r\n  updatedByAccount: string;\r\n  updatedAtBlock: number;\r\n  updatedAtTime: number;\r\n  contentId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "contentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createdAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "createdByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "followersCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "followingAccountsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "followingSpacesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hasProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "reputation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updatedAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "updatedAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "updatedByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ProfileState",
            "id": "interface-ProfileState-cb2d69412ffab3d6ea15c2f2bac18cdc",
            "file": "src/app/state/profile/profile.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport type Profile = {\r\n  id: string;\r\n  followersCount: number;\r\n  followingAccountsCount: number;\r\n  followingSpacesCount: number;\r\n  about: string;\r\n  avatar: string;\r\n  name: string;\r\n  summary: string;\r\n  isShowMore: boolean;\r\n};\r\n\r\nexport interface ProfileState extends EntityState<Profile> {}\r\n\r\nexport const profileAdapter: EntityAdapter<Profile> =\r\n  createEntityAdapter<Profile>();\r\n\r\nexport const initialProfileState: ProfileState =\r\n  profileAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "ReplyIdState",
            "id": "interface-ReplyIdState-e9baaa43e822633f7da4cc2b5e95a466",
            "file": "src/app/state/reply-id/reply-id.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { ReplyIds } from '../../core/types/reply-id.type';\r\n\r\nexport interface ReplyIdState extends EntityState<ReplyIds> {}\r\n\r\nexport const replyIdAdapter: EntityAdapter<ReplyIds> =\r\n  createEntityAdapter<ReplyIds>();\r\n\r\nexport const initialReplyIdState: ReplyIdState =\r\n  replyIdAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "SpaceEntity",
            "id": "interface-SpaceEntity-688beb9a176b7886ce5f16f858e3b30e",
            "file": "src/app/core/entities/space-entity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { WithId } from '../base-entity/with-id';\r\n\r\nexport interface SpaceEntity extends WithId {\r\n  createdByAccount: string;\r\n  createdAtBlock: number;\r\n  createdAtTime: number;\r\n  isUpdated: boolean;\r\n  updatedByAccount: string;\r\n  updatedAtBlock: number;\r\n  updatedAtTime: number;\r\n  contentId: string;\r\n  ownerId: string;\r\n  hidden: boolean;\r\n  handle: string;\r\n  canFollowerCreatePosts: boolean;\r\n  canEveryoneCreatePosts: boolean;\r\n  postsCount: number;\r\n  hiddenPostsCount: number;\r\n  visiblePostsCount: number;\r\n  followersCount: number;\r\n  score: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "canEveryoneCreatePosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "canFollowerCreatePosts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "contentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "createdAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "followersCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "handle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hiddenPostsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isUpdated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "postsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "updatedAtBlock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "updatedAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "updatedByAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "visiblePostsCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "extends": "WithId"
        },
        {
            "name": "SpaceState",
            "id": "interface-SpaceState-07d6c3c004714a2fc385b1006644c587",
            "file": "src/app/state/space/space.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\n\r\nexport type Space = {\r\n  id: string;\r\n  ownerId: string;\r\n  isHidden: boolean;\r\n  name: string;\r\n  image: string;\r\n  followersCount: number;\r\n  postsCount: number;\r\n  spaceLink: string;\r\n  summary: string;\r\n  about: string;\r\n  isShowMore: boolean;\r\n  tags: string[];\r\n  links: string[];\r\n};\r\n\r\nexport interface SpaceState extends EntityState<Space> {}\r\n\r\nexport const spaceAdapter: EntityAdapter<Space> = createEntityAdapter<Space>();\r\n\r\nexport const initialSpaceState: SpaceState = spaceAdapter.getInitialState();\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "StateEntity",
            "id": "interface-StateEntity-0ca15ddb8648ff362cb54cac19b523ec",
            "file": "src/app/core/entities/state-entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Entity } from './entity.model';\r\n\r\nexport interface StateEntity<T> {\r\n  ids: Array<string>;\r\n  entities: Entity<T>;\r\n}\r\n",
            "properties": [
                {
                    "name": "entities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entity<T>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "TabLinkData",
            "id": "interface-TabLinkData-70d9dc53e0a2731dca029aee250d4564",
            "file": "src/app/core/models/tab-link-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabLinkData {\r\n  tabName: string;\r\n  additionalInfo?: string | number;\r\n}\r\n",
            "properties": [
                {
                    "name": "additionalInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tabName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "WithId",
            "id": "interface-WithId-14bb9ebf3e91524b983cd469842c22d4",
            "file": "src/app/core/base-entity/with-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface WithId {\r\n  id: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-a4591d4403a35a8ce704f60f0aca50cb",
            "file": "src/app/shared/services/account.service.ts",
            "properties": [
                {
                    "name": "accounts$",
                    "defaultValue": "this.accountsSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountsSource",
                    "defaultValue": "new BehaviorSubject<PolkadotAccount[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "balance$",
                    "defaultValue": "this.balanceSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "balanceSource",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "balanceUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentAccount$",
                    "defaultValue": "this.currentAccountsSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentAccountsSource",
                    "defaultValue": "new BehaviorSubject<AccountData | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "signer$",
                    "defaultValue": "this.signerSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "signerSource",
                    "defaultValue": "new BehaviorSubject<any | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "status$",
                    "defaultValue": "this.statusSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusSource",
                    "defaultValue": "new BehaviorSubject<ACCOUNT_STATUS>(\n    ACCOUNT_STATUS.INIT\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkIfAlreadySignIn",
                    "args": [
                        {
                            "name": "accountData",
                            "type": "AccountData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "accountData",
                            "type": "AccountData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractAccountData",
                    "args": [
                        {
                            "name": "accountRawData",
                            "type": "AccountRawData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "accountRawData",
                            "type": "AccountRawData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccountsData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AccountData[]>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getBalance",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBalances",
                    "args": [
                        {
                            "name": "accounts",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "accounts",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentAccountId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getFormattedBalance",
                    "args": [
                        {
                            "name": "balance",
                            "type": "Balance | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "balance",
                            "type": "Balance | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMyAccountData",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MyAccountState",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSignInData",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ]
                },
                {
                    "name": "initAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ]
                },
                {
                    "name": "loadFormattedBalance",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProfilesByPolkadotAccount",
                    "args": [
                        {
                            "name": "polkadotAccount",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "polkadotAccount",
                            "type": "PolkadotAccount[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBalance",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "ACCOUNT_STATUS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ACCOUNT_STATUS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscribeOnBalance",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { web3Enable, web3Accounts } from '@polkadot/extension-dapp';\nimport { BehaviorSubject, forkJoin, from, Observable } from 'rxjs';\nimport { SubsocialApiService } from './subsocial-api.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../state/state';\nimport { MyAccountState } from '../../state/my-account/my-account.state';\nimport { loadMyProfile } from '../../state/profile/profile.actions';\nimport { asAccountId } from '@subsocial/api';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  AccountData,\n  AccountRawData,\n  Balance,\n  PolkadotAccount,\n} from '../../core/types/account.types';\nimport { formatBalance } from '@polkadot/util';\nimport { environment } from '../../../environments/environment';\nimport { StorageService } from './storage.service';\nimport { SignInModalService } from '../../ui-lib/modal-dialogs/services/sign-in-modal.service';\n\nexport enum ACCOUNT_STATUS {\n  INIT,\n  EXTENSION_NOT_FOUND,\n  ACCOUNTS_NOT_FOUND,\n  UNAUTHORIZED,\n  AUTHORIZED,\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n  private accountsSource = new BehaviorSubject<PolkadotAccount[]>([]);\n  private currentAccountsSource = new BehaviorSubject<AccountData | null>(null);\n  private signerSource = new BehaviorSubject<any | null>(null);\n  private statusSource = new BehaviorSubject<ACCOUNT_STATUS>(\n    ACCOUNT_STATUS.INIT\n  );\n  private balanceSource = new BehaviorSubject<string>('');\n  public accounts$ = this.accountsSource.asObservable();\n  public currentAccount$ = this.currentAccountsSource.asObservable();\n  public status$ = this.statusSource.asObservable();\n  public balance$ = this.balanceSource.asObservable();\n  public signer$ = this.signerSource.asObservable();\n\n  private balanceUnsub: Function;\n\n  constructor(\n    private api: SubsocialApiService,\n    private store: Store<AppState>,\n    private storage: StorageService\n  ) {\n    const { decimals, currency: unit } = environment;\n    formatBalance.setDefaults({ decimals, unit });\n  }\n\n  public getCurrentAccountId() {\n    return this.currentAccountsSource.value?.id;\n  }\n\n  public async initAccount() {\n    const injectedExtensions = await web3Enable('Subsocial');\n    const polkadotJs = injectedExtensions.find(\n      (extension: any) => extension.name === 'polkadot-js'\n    );\n\n    if (injectedExtensions.length === 0) {\n      this.setStatus(ACCOUNT_STATUS.EXTENSION_NOT_FOUND);\n    }\n\n    if (!polkadotJs) return;\n\n    this.signerSource.next(polkadotJs.signer);\n\n    const accounts = await web3Accounts();\n    if (accounts?.length > 0) {\n      this.accountsSource.next(accounts as unknown as PolkadotAccount[]);\n      this.setStatus(ACCOUNT_STATUS.UNAUTHORIZED);\n    } else {\n      this.setStatus(ACCOUNT_STATUS.ACCOUNTS_NOT_FOUND);\n    }\n  }\n\n  public getAccountsData(): Observable<AccountData[]> {\n    return this.accounts$.pipe(\n      switchMap((accounts) =>\n        this.getBalances(accounts).pipe(\n          map((balances) => {\n            return { accounts, balances };\n          })\n        )\n      ),\n      switchMap((data) =>\n        from(this.loadProfilesByPolkadotAccount(data.accounts)).pipe(\n          map((profiles) => {\n            return { ...data, profiles };\n          })\n        )\n      ),\n      map((accountRawData) => this.extractAccountData(accountRawData)),\n      tap((accountData) => this.checkIfAlreadySignIn(accountData))\n    );\n  }\n\n  public extractAccountData(accountRawData: AccountRawData) {\n    return accountRawData.accounts.map((account) => {\n      const id = asAccountId(account.address)!.toString();\n      const profile = accountRawData.profiles.find(\n        (profile) => profile.id === id\n      );\n      const balance = accountRawData.balances.find(\n        (balance) => balance.accountId.toString() === id\n      )!;\n\n      return {\n        id,\n        name: profile?.content?.name || account.name,\n        balance: this.getFormattedBalance(balance),\n        avatar: profile?.content?.avatar,\n      } as AccountData;\n    });\n  }\n\n  public async loadProfilesByPolkadotAccount(\n    polkadotAccount: PolkadotAccount[]\n  ) {\n    const ids = polkadotAccount.map((account) => account.address);\n\n    return await this.api.api.findProfiles(ids);\n  }\n\n  public async setCurrentAccount(account: AccountData) {\n    if (this.balanceUnsub) {\n      this.balanceUnsub();\n    }\n\n    await this.subscribeOnBalance(account.id);\n    this.store.dispatch(loadMyProfile({ id: account.id }));\n    this.storage.setCurrentAccountId(account.id);\n    this.currentAccountsSource.next(account);\n  }\n\n  public getMyAccountData(address: string): MyAccountState {\n    return { address, nonce: 0, blocked: false };\n  }\n\n  public signOut() {\n    this.currentAccountsSource.next(null);\n  }\n\n  public async setBalance(address: string) {\n    const balance = await this.getBalance(address);\n    this.balanceSource.next(this.getFormattedBalance(balance));\n  }\n\n  public async getBalance(address: string) {\n    const api = await this.api.api.subsocial.substrate.api;\n    return await api.derive.balances.all(address);\n  }\n\n  public async loadFormattedBalance(address: string) {\n    const balance = await this.getBalance(address);\n    return this.getFormattedBalance(balance);\n  }\n\n  public async getSignInData() {\n    const status = this.statusSource.value;\n    let accounts: AccountData[] = [];\n    if (status === ACCOUNT_STATUS.UNAUTHORIZED) {\n      accounts = await this.getAccountsData().pipe(take(1)).toPromise();\n    }\n\n    return { accounts, status };\n  }\n\n  private async subscribeOnBalance(address: string) {\n    const api = await this.api.api.subsocial.substrate.api;\n    this.balanceUnsub = await api.derive.balances.all(address, (data: any) => {\n      this.balanceSource.next(this.getFormattedBalance(data));\n    });\n  }\n\n  private setStatus(status: ACCOUNT_STATUS) {\n    this.statusSource.next(status);\n  }\n\n  private getBalances(accounts: PolkadotAccount[]) {\n    return forkJoin(\n      accounts.map((account) => from(this.getBalance(account.address)))\n    );\n  }\n\n  private getFormattedBalance(balance: Balance | undefined) {\n    const [prefix, postfix] = balance\n      ? formatBalance(balance.freeBalance, {\n          forceUnit: '-',\n          withSi: false,\n        }).split('.')\n      : ['0', undefined];\n\n    return prefix + '.' + (postfix || '0000');\n  }\n\n  private async checkIfAlreadySignIn(accountData: AccountData[]) {\n    const id = this.storage.getAccountId();\n    const account = accountData.find((accountData) => accountData.id === id);\n    if (account) {\n      await this.setCurrentAccount(account);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ActivityService",
            "id": "injectable-ActivityService-4072252be8efa7b165cc3be49b951181",
            "file": "src/app/shared/services/activity.service.ts",
            "properties": [
                {
                    "name": "offchainUrl",
                    "defaultValue": "environment.offchainUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "getFeedActivities",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFeedCount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from './http.service';\nimport { Activity } from '@subsocial/types';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActivityService {\n  constructor(private http: HttpService) {}\n\n  offchainUrl = environment.offchainUrl;\n\n  getFeedActivities(accountId: string, offset: number, limit: number) {\n    const url = `${this.offchainUrl}/v1/offchain/feed/${accountId}?offset=${offset}&limit=${limit}`;\n\n    return this.http.get<Activity[]>(url);\n  }\n\n  getFeedCount(accountId: string) {\n    const url = `${this.offchainUrl}/v1/offchain/feed/${accountId}/count`;\n\n    return this.http.get<string>(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CommentService",
            "id": "injectable-CommentService-91c82c48b754fb0a26887c536ab31f56",
            "file": "src/app/shared/services/comment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPostReplyId",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ReplyIds>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SubsocialApiService } from './subsocial-api.service';\nimport { ReplyIds } from '../../core/types/reply-id.type';\nimport { ConvertService } from './convert.service';\nimport { StoreService } from '../../state/store.service';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommentService {\n  constructor(\n    private api: SubsocialApiService,\n    private convert: ConvertService\n  ) {}\n\n  public async getPostReplyId(postId: string): Promise<ReplyIds> {\n    const ids = await this.api.api.subsocial.substrate.getReplyIdsByPostId(\n      this.convert.convertToBN(postId)\n    );\n\n    return { id: postId, replyIds: ids.map((id) => id.toString()) };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContentEffects",
            "id": "injectable-ContentEffects-cc49a4d58b463c9ed41b737e88792be4",
            "file": "src/app/state/content/content.effects.ts",
            "properties": [
                {
                    "name": "saveContent$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.action$.pipe(\r\n        ofType(ContentAction.saveContent),\r\n        map((payload) => ContentAction.upsertContent(payload))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "saveContents$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.action$.pipe(\r\n        ofType(ContentAction.saveContents),\r\n        map((payload) => ContentAction.upsertContents(payload))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as ContentAction from '../content/content.actions';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ContentEffects {\r\n  constructor(private action$: Actions) {}\r\n\r\n  saveContents$ = createEffect(\r\n    () =>\r\n      this.action$.pipe(\r\n        ofType(ContentAction.saveContents),\r\n        map((payload) => ContentAction.upsertContents(payload))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  saveContent$ = createEffect(\r\n    () =>\r\n      this.action$.pipe(\r\n        ofType(ContentAction.saveContent),\r\n        map((payload) => ContentAction.upsertContent(payload))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ContentService",
            "id": "injectable-ContentService-e3bdcf481e8062580acc2cf1ac1c6ad8",
            "file": "src/app/shared/services/content.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEntityContentArray",
                    "args": [
                        {
                            "name": "entity",
                            "type": "Array<CanHaveContent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "Array<CanHaveContent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SubsocialApiService } from './subsocial-api.service';\r\nimport { CanHaveContent } from '@subsocial/api/flat-subsocial/flatteners';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ContentService {\r\n  constructor(private apiService: SubsocialApiService) {}\r\n\r\n  public async getEntityContentArray(entity: Array<CanHaveContent>) {\r\n    const ids: string[] = entity\r\n      .filter((e) => e.contentId !== undefined)\r\n      .map((e) => e.contentId!);\r\n    return await this.apiService.getContentArray(ids);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConvertService",
            "id": "injectable-ConvertService-4669ae1e8c44f0745fe9a02d70251e35",
            "file": "src/app/shared/services/convert.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertBN",
                    "args": [
                        {
                            "name": "value",
                            "type": "BN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "BN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertBNs",
                    "args": [
                        {
                            "name": "bns",
                            "type": "Array<BN>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "bns",
                            "type": "Array<BN>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToBN",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToBNArray",
                    "args": [
                        {
                            "name": "array",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "idToBn",
                    "args": [
                        {
                            "name": "id",
                            "type": "AnyId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BN",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "AnyId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "idToPostId",
                    "args": [
                        {
                            "name": "id",
                            "type": "AnyId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PostId",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "AnyId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport * as BN from 'bn.js';\nimport { AnyId } from '@subsocial/api/flat-subsocial/dto';\nimport { PostId } from '@subsocial/types/substrate/interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConvertService {\n  constructor() {}\n\n  public convertToBN(value: string) {\n    return new BN(value);\n  }\n\n  public convertToBNArray(array: string[]) {\n    return array.map((el) => this.convertToBN(el));\n  }\n\n  public convertBN(value: BN) {\n    return value.toString();\n  }\n\n  public convertBNs(bns: Array<BN>) {\n    return bns.map((bn) => bn.toString());\n  }\n\n  public idToPostId(id: AnyId): PostId {\n    return this.idToBn(id) as unknown as PostId;\n  }\n\n  public idToBn(id: AnyId): BN {\n    return BN.isBN(id) ? id : new BN(id);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "DateService",
            "id": "injectable-DateService-1f17a3a1b5fc9d5132129aa22fc12b23",
            "file": "src/app/shared/services/date.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fromNow",
                    "args": [
                        {
                            "name": "date",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as dayjs from 'dayjs';\r\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\r\nimport * as updateLocale from 'dayjs/plugin/updateLocale';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DateService {\r\n  constructor() {\r\n    dayjs.extend(relativeTime);\r\n    dayjs.extend(updateLocale);\r\n    dayjs.updateLocale('en', {\r\n      relativeTime: {\r\n        future: 'in %s',\r\n        past: '%s ago',\r\n        s: 'a few seconds',\r\n        m: 'a minute',\r\n        mm: '%dm',\r\n        h: 'an hour',\r\n        hh: '%dh',\r\n        d: 'a day',\r\n        dd: '%dd',\r\n        M: 'a month',\r\n        MM: '%d months',\r\n        y: 'a year',\r\n        yy: '%d years',\r\n      },\r\n    });\r\n  }\r\n\r\n  fromNow(date: string | number) {\r\n    const diff = dayjs().diff(dayjs(date), 'days');\r\n\r\n    if (diff < 7) {\r\n      return dayjs(date).fromNow().toLowerCase();\r\n    } else if (diff > 7 && diff < 365) {\r\n      return dayjs(date).format('DD MMM');\r\n    } else {\r\n      return dayjs(date).format('DD MMM YY');\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "DeviceService",
            "id": "injectable-DeviceService-e62e74c9debdd588ac8a7e9a0d710f13",
            "file": "src/app/shared/services/device.service.ts",
            "properties": [
                {
                    "name": "isMobile$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{\r\n    mobile: {\r\n      width: '95%',\r\n      maxWidth: 'none',\r\n    },\r\n    desktop: {\r\n      width: '500px',\r\n      maxWidth: '80vh',\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "getResponsiveModalData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { fromEvent, Observable, of } from 'rxjs';\r\nimport {\r\n  concatMap,\r\n  distinctUntilChanged,\r\n  map,\r\n  shareReplay,\r\n  startWith,\r\n} from 'rxjs/operators';\r\nimport { MODAL_CONFIG } from '../../core/constants/size.const';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DeviceService {\r\n  public isMobile$: Observable<boolean>;\r\n\r\n  modalConfig = {\r\n    mobile: {\r\n      width: '95%',\r\n      maxWidth: 'none',\r\n    },\r\n    desktop: {\r\n      width: '500px',\r\n      maxWidth: '80vh',\r\n    },\r\n  };\r\n\r\n  constructor() {}\r\n\r\n  init() {\r\n    this.isMobile$ = fromEvent<any>(window, 'resize').pipe(\r\n      map((event) => {\r\n        return event.target.innerWidth < 768;\r\n      }),\r\n      startWith(window.innerWidth < 768),\r\n      distinctUntilChanged(),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  getResponsiveModalData() {\r\n    return this.isMobile$?.pipe(\r\n      concatMap((isMobile) => {\r\n        return isMobile ? of(MODAL_CONFIG.MOBILE) : of(MODAL_CONFIG.DESKTOP);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "type": "injectable"
        },
        {
            "name": "FollowedAccountIdsEffects",
            "id": "injectable-FollowedAccountIdsEffects-646f822df4d7192c9a91e94b9a4a4e91",
            "file": "src/app/state/followed-account-ids/followed-account-ids.effects.ts",
            "properties": [
                {
                    "name": "loadFollowedAccountIds$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(FollowedAccountIdsActions.getFollowedAccountIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.followerService.loadFollowedAccountIds(payload.address)).pipe(\r\n          map((ids) =>\r\n            FollowedAccountIdsActions.upsertFollowedAccountIds({\r\n              payload: ids,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as FollowedAccountIdsActions from '../followed-account-ids/followed-account-ids.actions';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport { FollowerService } from '../../shared/services/follower.service';\r\n\r\n@Injectable()\r\nexport class FollowedAccountIdsEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private followerService: FollowerService\r\n  ) {}\r\n\r\n  loadFollowedAccountIds$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(FollowedAccountIdsActions.getFollowedAccountIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.followerService.loadFollowedAccountIds(payload.address)).pipe(\r\n          map((ids) =>\r\n            FollowedAccountIdsActions.upsertFollowedAccountIds({\r\n              payload: ids,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FollowedSpaceIdsEffects",
            "id": "injectable-FollowedSpaceIdsEffects-774226fe55e09d70c7404ac6e883b96c",
            "file": "src/app/state/followed-space-ids/followed-space-ids.effects.ts",
            "properties": [
                {
                    "name": "loadFollowedSpaceIds$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(FollowedSpaceIdsActions.getFollowedSpaceIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.followerService.loadFollowedSpaceIds(payload.address)).pipe(\r\n          map((ids) =>\r\n            FollowedSpaceIdsActions.upsertFollowedSpaceIds({\r\n              payload: ids,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as FollowedSpaceIdsActions from '../followed-space-ids/followed-space-ids.actions';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport { FollowerService } from '../../shared/services/follower.service';\r\n\r\n@Injectable()\r\nexport class FollowedSpaceIdsEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private followerService: FollowerService\r\n  ) {}\r\n\r\n  loadFollowedSpaceIds$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(FollowedSpaceIdsActions.getFollowedSpaceIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.followerService.loadFollowedSpaceIds(payload.address)).pipe(\r\n          map((ids) =>\r\n            FollowedSpaceIdsActions.upsertFollowedSpaceIds({\r\n              payload: ids,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FollowedSpaceIdsFacade",
            "id": "injectable-FollowedSpaceIdsFacade-d0dd0794f1f25387679b031982fd6441",
            "file": "src/app/state/followed-space-ids/followed-space-ids.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadMyFollowedSpaceIds",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../state';\nimport { AccountService } from '../../shared/services/account.service';\nimport { getFollowedSpaceIds } from './followed-space-ids.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FollowedSpaceIdsFacade {\n  constructor(\n    private store: Store<AppState>,\n    private account: AccountService\n  ) {}\n\n  loadMyFollowedSpaceIds() {\n    const accountId = this.account.getCurrentAccountId();\n    this.store.dispatch(\n      getFollowedSpaceIds({ payload: { address: accountId! } })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FollowerService",
            "id": "injectable-FollowerService-e8b96886905db192f147d63e276756a8",
            "file": "src/app/shared/services/follower.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkIfFollowAccount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIfFollowSpace",
                    "args": [
                        {
                            "name": "spaceId",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceId",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFollowedAccountIds",
                    "args": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFollowedSpaceIds",
                    "args": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SubsocialApiService } from './subsocial-api.service';\r\nimport { FollowedSpaceIdsStruct } from '../../state/followed-space-ids/followed-space-ids.state';\r\nimport { selectFollowedSpaceIdsByCurrentAccount } from '../../state/followed-space-ids/followed-space-ids.selectors';\r\nimport { map } from 'rxjs/operators';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../state/state';\r\nimport { selectFollowedAccountIdsByCurrentAccount } from '../../state/followed-account-ids/followed-account-ids.selectors';\r\nimport { FollowedAccountIdsStruct } from '../../state/followed-account-ids/followed-account-ids.state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FollowerService {\r\n  constructor(\r\n    private api: SubsocialApiService,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  async loadFollowedSpaceIds(account: string) {\r\n    const spaceIds = await this.api.substrate.spaceIdsFollowedByAccount(\r\n      account\r\n    );\r\n\r\n    return {\r\n      id: account,\r\n      followingSpaceIds: spaceIds.map((id) => id.toString()),\r\n    } as FollowedSpaceIdsStruct;\r\n  }\r\n\r\n  async loadFollowedAccountIds(account: string) {\r\n    const readyApi = await this.api.substrate.api;\r\n    const accountIds =\r\n      (await readyApi.query.profileFollows.accountsFollowedByAccount(\r\n        account\r\n      )) as unknown as any[];\r\n\r\n    return {\r\n      id: account,\r\n      followingAccountIds: accountIds.map((id) => id.toString()),\r\n    } as FollowedAccountIdsStruct;\r\n  }\r\n\r\n  checkIfFollowSpace(spaceId: string | undefined) {\r\n    return this.store\r\n      .select(selectFollowedSpaceIdsByCurrentAccount)\r\n      .pipe(map((spaceIds) => !!spaceId && spaceIds.indexOf(spaceId) >= 0));\r\n  }\r\n\r\n  checkIfFollowAccount(accountId: string | undefined) {\r\n    return this.store\r\n      .select(selectFollowedAccountIdsByCurrentAccount)\r\n      .pipe(map((ids) => !!accountId && ids.indexOf(accountId) >= 0));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-48ebd46e11dcf6d4986a524093ea27eb",
            "file": "src/app/shared/services/http.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get<T>(url: string, params?: object): Observable<T> {\r\n    const httpParams = new HttpParams(params);\r\n    return this.http.get<T>(url, { params: httpParams });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconRegistryService",
            "id": "injectable-IconRegistryService-394e44563850985bfceef4987c945ed2",
            "file": "src/app/shared/services/icon-registry.service.ts",
            "properties": [
                {
                    "name": "ICON_NAMES",
                    "defaultValue": "[\n    'option',\n    'copy',\n    'copy-white',\n    'menu',\n    'upvote-default',\n    'downvote-default',\n    'upvote-active',\n    'downvote-active',\n    'comment',\n    'share',\n    'purse',\n    'qr',\n    'close',\n    'profile',\n    'setting',\n    'reply',\n    'edit',\n    'photo',\n    'photo-white',\n    'remove',\n    'remove-white',\n    'coin',\n    'option-hor',\n    'option-gray',\n    'info',\n    'arrow',\n    'info-yellow',\n    'error',\n    'success',\n    'react',\n    'documents',\n    'question',\n    'subsocial-logo',\n    'vue',\n    'world',\n    'github-ls',\n    'ipfs',\n    'view-reaction',\n    'hide',\n    'visible',\n    'bell',\n    'check',\n    'angular',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "SOCIAL_ICONS_NAMES",
                    "defaultValue": "[\n    'github',\n    'linkedin',\n    'medium',\n    'telegram',\n    'twitter',\n    'web',\n    'youtube',\n    'reddit',\n    'facebook',\n    'megaphone',\n    'discord',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registryIcons",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "iconNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "iconNames",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { isPlatformServer } from '@angular/common';\nimport { PLATFORM_ID } from '@angular/core';\nimport { Inject, Injectable } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconRegistryService {\n  constructor(\n    private iconRegistry: MatIconRegistry,\n    private sanitizer: DomSanitizer,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ICON_NAMES = [\n    'option',\n    'copy',\n    'copy-white',\n    'menu',\n    'upvote-default',\n    'downvote-default',\n    'upvote-active',\n    'downvote-active',\n    'comment',\n    'share',\n    'purse',\n    'qr',\n    'close',\n    'profile',\n    'setting',\n    'reply',\n    'edit',\n    'photo',\n    'photo-white',\n    'remove',\n    'remove-white',\n    'coin',\n    'option-hor',\n    'option-gray',\n    'info',\n    'arrow',\n    'info-yellow',\n    'error',\n    'success',\n    'react',\n    'documents',\n    'question',\n    'subsocial-logo',\n    'vue',\n    'world',\n    'github-ls',\n    'ipfs',\n    'view-reaction',\n    'hide',\n    'visible',\n    'bell',\n    'check',\n    'angular',\n  ];\n\n  SOCIAL_ICONS_NAMES = [\n    'github',\n    'linkedin',\n    'medium',\n    'telegram',\n    'twitter',\n    'web',\n    'youtube',\n    'reddit',\n    'facebook',\n    'megaphone',\n    'discord',\n  ];\n\n  init() {\n    let url = 'assets/icons/';\n    if (isPlatformServer(this.platformId)) {\n      url = environment.domainUrl + url;\n    }\n\n    this.registryIcons(url, this.ICON_NAMES);\n    this.registryIcons(url + 'links/', this.SOCIAL_ICONS_NAMES);\n  }\n\n  private registryIcons(url: string, iconNames: string[]): void {\n    for (const name of iconNames) {\n      this.iconRegistry.addSvgIcon(\n        name + '-icon',\n        this.sanitizer.bypassSecurityTrustResourceUrl(url + name + '.svg')\n      );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "iconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LinkService",
            "id": "injectable-LinkService-4e88239c0ca1f9eeeb5f11f063b96f13",
            "file": "src/app/shared/services/link.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPostIdFromLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostLink",
                    "args": [
                        {
                            "name": "spaceHandle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceHandle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport slug from 'slugify';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LinkService {\r\n  constructor() {}\r\n\r\n  getPostLink(spaceHandle: string, title: string, id: string): string {\r\n    return `/@${spaceHandle}/${slug(title)}-${id}`;\r\n  }\r\n\r\n  getPostIdFromLink(link: string | null) {\r\n    return link ? link.trim().split('-').pop()! : '';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "LoaderEffects",
            "id": "injectable-LoaderEffects-190469222414455cab943421a159e49c",
            "file": "src/app/state/notification/loader.effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\n@Injectable()\r\nexport class LoaderEffects {\r\n  constructor(private action$: Actions) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyAccountFacade",
            "id": "injectable-MyAccountFacade-cfbf23d6d6ec35db2d75bd78d71eb657",
            "file": "src/app/state/my-account/my-account.facade.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyAccountFacade {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "MyPostReactionFacade",
            "id": "injectable-MyPostReactionFacade-40fd2c35a54730da3593fb78a960cf5d",
            "file": "src/app/state/my-post-reactions/my-post-reaction.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getReactionByPostId",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMyPostReactionIds",
                    "args": [
                        {
                            "name": "postIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadReactionForAllPosts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { selectPostIds } from '../post/post.selectors';\nimport { AppState } from '../state';\nimport { selectMyPostReactionsByPostId } from './my-post-reactions.selectors';\nimport { take } from 'rxjs/operators';\nimport { getGetMyPostReactionsByPostIds } from './my-post-reactions.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyPostReactionFacade {\n  constructor(private store: Store<AppState>) {}\n\n  getReactionByPostId(accountId: string, postId: string) {\n    return this.store.select(selectMyPostReactionsByPostId(accountId, postId));\n  }\n\n  reloadReactionForAllPosts() {\n    this.store\n      .select(selectPostIds)\n      .pipe(take(1))\n      .subscribe((ids) => {\n        this.store.dispatch(\n          getGetMyPostReactionsByPostIds({ ids: ids as string[] })\n        );\n      });\n  }\n\n  loadMyPostReactionIds(postIds: string[]) {\n    this.store.dispatch(getGetMyPostReactionsByPostIds({ ids: postIds }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyPostReactionsEffects",
            "id": "injectable-MyPostReactionsEffects-fef08cd75ef473f661edc01db258593c",
            "file": "src/app/state/my-post-reactions/my-post-reactions.effects.ts",
            "properties": [
                {
                    "name": "loadMyPostReactions$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(MyPostReactionsActions.getGetMyPostReactionsByPostIds),\r\n      switchMap(({ ids }) =>\r\n        from(this.reactionsService.getReactionsIdsByPostIds(ids)).pipe(\r\n          filter(\r\n            (reactions) => reactions !== undefined && reactions.length > 0\r\n          ),\r\n          map((reactions) =>\r\n            MyPostReactionsActions.upsertMyPostReactions({\r\n              payload: reactions!,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as MyPostReactionsActions from './my-post-reactions.actions';\r\nimport { filter, map, switchMap } from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport { ReactionsService } from '../../shared/services/reactions.service';\r\n\r\n@Injectable()\r\nexport class MyPostReactionsEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private reactionsService: ReactionsService\r\n  ) {}\r\n\r\n  loadMyPostReactions$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(MyPostReactionsActions.getGetMyPostReactionsByPostIds),\r\n      switchMap(({ ids }) =>\r\n        from(this.reactionsService.getReactionsIdsByPostIds(ids)).pipe(\r\n          filter(\r\n            (reactions) => reactions !== undefined && reactions.length > 0\r\n          ),\r\n          map((reactions) =>\r\n            MyPostReactionsActions.upsertMyPostReactions({\r\n              payload: reactions!,\r\n            })\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reactionsService",
                        "type": "ReactionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reactionsService",
                        "type": "ReactionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-af4cfc5370a3e28cea9c383427de3120",
            "file": "src/app/shared/services/navigation.service.ts",
            "properties": [
                {
                    "name": "activeTab$",
                    "defaultValue": "this.activeTabSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activeTabSource",
                    "defaultValue": "new BehaviorSubject<TabLinkData | null>({\r\n    tabName: 'feed',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isShowTab$",
                    "defaultValue": "this.isShowTabSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isShowTabSource",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\r\n    { tabName: 'feed' },\r\n    { tabName: 'posts' },\r\n    { tabName: 'spaces' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hideTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "switchTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUrlQueryParams",
                    "args": [
                        {
                            "name": "queryParam",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryParam",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Params, Router } from '@angular/router';\r\nimport { TabLinkData } from '../../core/models/tab-link-data.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NavigationService {\r\n  private activeTabSource = new BehaviorSubject<TabLinkData | null>({\r\n    tabName: 'feed',\r\n  });\r\n  public activeTab$ = this.activeTabSource.asObservable();\r\n  private isShowTabSource = new BehaviorSubject<boolean>(false);\r\n  public isShowTab$ = this.isShowTabSource.asObservable();\r\n  public tabLinks: TabLinkData[] = [\r\n    { tabName: 'feed' },\r\n    { tabName: 'posts' },\r\n    { tabName: 'spaces' },\r\n  ];\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  public switchTab(tab: TabLinkData) {\r\n    const params: Params = { tab: tab.tabName };\r\n    this.updateUrlQueryParams(params);\r\n    this.activeTabSource.next(tab);\r\n  }\r\n\r\n  public showTab() {\r\n    this.isShowTabSource.next(true);\r\n  }\r\n\r\n  public hideTab() {\r\n    this.isShowTabSource.next(false);\r\n    this.activeTabSource.next(null);\r\n  }\r\n\r\n  private updateUrlQueryParams(queryParam: Params) {\r\n    this.router.navigate(['/'], {\r\n      queryParams: queryParam,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-330a6f7fd73c4ee8bf956ff5a2c4bf01",
            "file": "src/app/notification/services/notification.service.ts",
            "properties": [
                {
                    "name": "notificationCount$",
                    "defaultValue": "this.notificationCountSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "notificationCountSource",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "offchainUrl",
                    "defaultValue": "environment.offchainUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "SESSION_KEY",
                    "defaultValue": "'df.sessionKeys'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methods": [
                {
                    "name": "createSessionKey",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any | undefined>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateKeyPair",
                    "args": [],
                    "optional": false,
                    "returnType": "Keypair",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getActivityCount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "ActivityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotificationCount",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "JSONstingifySorted",
                    "args": [
                        {
                            "name": "obj",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNotificationActivity",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "manageSessionKey",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any | undefined>",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newGenericAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllNotifications",
                    "args": [
                        {
                            "name": "blockNumber",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "wsSubject",
                            "type": "WebSocketSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "blockNumber",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "wsSubject",
                            "type": "WebSocketSubject<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNotificationCount",
                    "args": [
                        {
                            "name": "count",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signMessage",
                    "args": [
                        {
                            "name": "props",
                            "type": "SignMessageProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string | undefined>",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "SignMessageProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOffchainMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keypair",
                            "type": "Partial<Keypair>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keypair",
                            "type": "Partial<Keypair>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AccountService } from '../../shared/services/account.service';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { Activity } from '@subsocial/types';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { Keypair } from '@polkadot/util-crypto/types';\nimport { naclSign } from '@polkadot/util-crypto';\nimport jsonabc from 'jsonabc';\nimport registry from '@subsocial/types/substrate/registry';\nimport { GenericAccountId } from '@polkadot/types';\nimport { stringToHex, u8aToHex, hexToU8a } from '@polkadot/util';\nimport { SessionService } from '../../shared/services/session.service';\nimport { StorageService } from '../../shared/services/storage.service';\nimport {\n  mnemonicGenerate,\n  mnemonicToMiniSecret,\n  naclKeypairFromSeed,\n} from '@polkadot/util-crypto';\nimport {\n  web3Accounts,\n  web3Enable,\n  web3FromAddress,\n} from '@polkadot/extension-dapp';\nimport { toSubsocialAddress } from '@subsocial/utils';\nimport { WebSocketSubject } from 'rxjs/webSocket';\n\nexport type ActivityType = 'notifications' | 'feed';\n\ntype SignMessageProps = {\n  signer: string;\n  message: string;\n  address?: string;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  constructor(\n    private accountService: AccountService,\n    private http: HttpClient,\n    private sessionService: SessionService,\n    private storage: StorageService\n  ) {}\n\n  SESSION_KEY = 'df.sessionKeys';\n  offchainUrl = environment.offchainUrl;\n\n  notificationCountSource = new BehaviorSubject(0);\n  notificationCount$: Observable<number> =\n    this.notificationCountSource.asObservable();\n\n  setNotificationCount(count: string) {\n    const countNumber = Number.parseInt(count);\n    this.notificationCountSource.next(countNumber);\n  }\n\n  getNotificationCount() {\n    return this.accountService.currentAccount$.pipe(\n      filter((account) => !!account),\n      mergeMap((account) =>\n        this.getActivityCount(account!.id, 'notifications')\n      ),\n      map((count) => Number.parseInt(count))\n    );\n  }\n\n  getActivityCount(accountId: string, type: ActivityType) {\n    const url = `${this.offchainUrl}/v1/offchain/${type}/${accountId}/count`;\n    return this.http.get<string>(url);\n  }\n\n  loadNotificationActivity(accountId: string, offset: number, limit: number) {\n    let params = new HttpParams();\n    params = params.append('offset', offset);\n    params = params.append('limit', limit);\n    const url = `${this.offchainUrl}/v1/offchain/notifications/${accountId}`;\n\n    return this.http.get<Activity[]>(url, { params });\n  }\n\n  signOffchainMessage(message: Object, keypair: Partial<Keypair>) {\n    return naclSign(this.JSONstingifySorted(message), keypair);\n  }\n\n  JSONstingifySorted(obj: Object) {\n    return JSON.stringify(jsonabc.sortObj(obj));\n  }\n\n  newGenericAccount(account: string | undefined) {\n    return account ? String(new GenericAccountId(registry, account)) : '';\n  }\n\n  async createSessionKey(address?: string): Promise<any | undefined> {\n    if (!address) return;\n\n    try {\n      const extensions = await web3Enable(environment.appName);\n      if (!extensions.length) return;\n\n      const allAccounts = await web3Accounts();\n\n      const account = allAccounts.find(\n        (x) => new GenericAccountId(registry, x.address)\n      );\n      if (!account) return;\n\n      const { publicKey, secretKey } = this.generateKeyPair();\n\n      const publicKeyHex = u8aToHex(publicKey);\n      const secretKeyHex = u8aToHex(secretKey);\n\n      const selectedNonce = await this.sessionService.getNonce(address);\n      let nonce = 0;\n      if (selectedNonce) nonce = parseInt(selectedNonce);\n\n      const message: any = {\n        nonce,\n        action: 'addSessionKey',\n        args: {\n          sessionKey: publicKeyHex,\n        },\n      };\n\n      const signature = await this.signMessage({\n        signer: account.address,\n        address,\n        message: this.JSONstingifySorted(message),\n      });\n      if (!signature) return;\n\n      const sessionKey: any = {\n        publicKey: publicKeyHex,\n        secretKey: secretKeyHex,\n      };\n\n      const storage: any = this.storage.get(this.SESSION_KEY) || {};\n\n      storage[address] = sessionKey;\n\n      this.storage.set(this.SESSION_KEY, storage);\n\n      await this.sessionService.addSessionKey({\n        account: address,\n        signature,\n        message,\n      });\n\n      return sessionKey;\n    } catch (err) {\n      console.error(`Failed to create session key: ${err}`);\n      return;\n    }\n  }\n\n  generateKeyPair(): Keypair {\n    const mnemonic = mnemonicGenerate();\n    const seed = mnemonicToMiniSecret(mnemonic);\n    const keypair = naclKeypairFromSeed(seed);\n\n    return keypair;\n  }\n\n  async signMessage(props: SignMessageProps): Promise<string | undefined> {\n    const { signer, message, address } = props;\n\n    const injector = await web3FromAddress(signer);\n\n    const signRaw = injector?.signer?.signRaw;\n\n    if (!!signRaw) {\n      const { signature } = await signRaw({\n        address: address || signer,\n        data: stringToHex(message),\n        type: 'bytes',\n      });\n      return signature;\n    }\n    return undefined;\n  }\n\n  async manageSessionKey(address: string): Promise<any | undefined> {\n    const sessionKeyStorage = this.storage.get(this.SESSION_KEY);\n    let sessionKey: any | undefined = undefined;\n\n    for (const key in sessionKeyStorage) {\n      if (key == address) {\n        sessionKey = sessionKeyStorage[key];\n        break;\n      }\n    }\n\n    const genericSessionKey = this.newGenericAccount(sessionKey?.publicKey);\n    const isSessionKey = await this.sessionService.getSessionKey(\n      genericSessionKey\n    );\n    if (!sessionKey || !isSessionKey) {\n      sessionKey = await this.createSessionKey(address);\n      if (!sessionKey) return;\n    }\n\n    const keypair = {\n      publicKey: hexToU8a(sessionKey.publicKey),\n      secretKey: hexToU8a(sessionKey.secretKey),\n    } as Keypair;\n\n    const genericAccount = new GenericAccountId(\n      registry,\n      u8aToHex(keypair.publicKey)\n    ).toString();\n\n    const subsocialAddress = toSubsocialAddress(genericAccount);\n\n    if (!subsocialAddress) return;\n\n    const currentNonce = await this.sessionService.getNonce(subsocialAddress);\n    let nonce = 0;\n    if (currentNonce) {\n      nonce = parseInt(currentNonce);\n    }\n\n    return { nonce, keypair, genericAccount: subsocialAddress };\n  }\n\n  async readAllNotifications(\n    blockNumber: string,\n    eventIndex: number,\n    address: string,\n    wsSubject: WebSocketSubject<any>\n  ) {\n    const sessionKey = await this.manageSessionKey(address);\n\n    if (!sessionKey) return;\n\n    const message = {\n      nonce: sessionKey.nonce,\n      action: 'readAll',\n      args: {\n        blockNumber,\n        eventIndex,\n      },\n    };\n\n    const signature = this.signOffchainMessage(message, sessionKey.keypair);\n    if (!signature) return;\n\n    wsSubject.next({\n      account: String(sessionKey.genericAccount),\n      signature: u8aToHex(signature),\n      message,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionService",
                        "type": "SessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PermissionsService",
            "id": "injectable-PermissionsService-54d8443b2052fcf9f4e54305b9402d29",
            "file": "src/app/shared/services/permissions.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkIfPostOwner",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIfSpaceOwner",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PostFacade } from '../../state/post/post.facade';\nimport { map } from 'rxjs/operators';\nimport { SpaceFacade } from '../../state/space/space.facade';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PermissionsService {\n  constructor(\n    private postFacade: PostFacade,\n    private spaceFacade: SpaceFacade\n  ) {}\n\n  checkIfPostOwner(accountId: string, postId: string) {\n    return this.postFacade\n      .getPost(postId)\n      .pipe(map((post) => post?.ownerId === accountId));\n  }\n\n  checkIfSpaceOwner(accountId: string, spaceId: string) {\n    return this.spaceFacade\n      .getSpace(spaceId)\n      .pipe(map((space) => space?.ownerId === accountId));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PostEffects",
            "id": "injectable-PostEffects-d16b279efb8e5c67a362d8a1c0e9ef89",
            "file": "src/app/state/post/post.effects.ts",
            "properties": [
                {
                    "name": "addNewCommentPost$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.addNewCommentPost),\r\n      tap(({ payload }) => this.postFacade.loadPost(payload.replyId)),\r\n      tap(({ payload }) =>\r\n        this.postFacade.increaseReplyCount(payload.parentId)\r\n      ),\r\n      switchMap((props) => [\r\n        ReplyIdAction.addReplyId({ payload: props.payload }),\r\n        PostActions.switchIsChildrenCommentShow({\r\n          payload: { id: props.payload.parentId, open: true },\r\n        }),\r\n      ])\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "loadPostEffect$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.loadPostById),\r\n      tap(({ id }) =>\r\n        this.store.dispatch(\r\n          MyPostReactionsActions.getGetMyPostReactionsByPostIds({\r\n            ids: [id],\r\n          })\r\n        )\r\n      ),\r\n      switchMap(({ id }) => from(this.postService.loadPostById(id, 'all'))),\r\n      filter((post) => !!post),\r\n      map((post) => PostActions.upsertPost({ payload: post! }))\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loadPosts$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.loadPostsByIds),\r\n      tap(({ payload }) =>\r\n        this.store.dispatch(\r\n          MyPostReactionsActions.getGetMyPostReactionsByPostIds({\r\n            ids: payload.ids,\r\n          })\r\n        )\r\n      ),\r\n      concatMap(({ payload }) =>\r\n        from(this.postService.loadPostsByIds(payload.ids, payload.type)).pipe(\r\n          switchMap((postsData) => [\r\n            PostActions.upsertPosts({ payload: postsData }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loadReplyPosts$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ReplyIdAction.upsertReplyIds),\r\n      map(({ payload }) =>\r\n        PostActions.loadPostsByIds({\r\n          payload: { ids: payload.replyIds, reload: true, type: 'all' },\r\n        })\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "switchIsChildrenCommentShow$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.switchIsChildrenCommentShow),\r\n      switchMap(({ payload }) =>\r\n        this.postFacade.getPostOnce(payload.id).pipe(\r\n          tap((post) => {\r\n            const isChildrenCommentShow =\r\n              payload.open || !post.isChildrenCommentShow;\r\n            const update: Update<Post> = {\r\n              id: post.id,\r\n              changes: { isChildrenCommentShow },\r\n            };\r\n            this.store.dispatch(updatePost({ payload: update }));\r\n          }),\r\n          concatMap((post) => {\r\n            if (!post.isChildrenCommentShow) {\r\n              return this.store\r\n                .select(selectCommentPostsByPostId(post.id))\r\n                .pipe(\r\n                  take(1),\r\n                  map((posts) =>\r\n                    Array.isArray(posts) && posts.length === 0 ? post.id : null\r\n                  )\r\n                );\r\n            } else {\r\n              return of(null);\r\n            }\r\n          }),\r\n          filter((id) => !!id),\r\n          map((id) => ReplyIdAction.loadReplyIdsByParentPostId({ id: id! }))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { PostService } from '../../post/services/post.service';\r\nimport * as PostActions from './post.actions';\r\nimport * as MyPostReactionsActions from '../my-post-reactions/my-post-reactions.actions';\r\nimport { concatMap, filter, map, switchMap, take, tap } from 'rxjs/operators';\r\nimport { from, of } from 'rxjs';\r\nimport * as ReplyIdAction from '../reply-id/reply-id.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../state';\r\nimport { ReplyFacade } from '../reply-id/reply.facade';\r\nimport { PostFacade } from './post.facade';\r\nimport { Update } from '@ngrx/entity';\r\nimport { Post } from '../../core/models/post/post-list-item.model';\r\nimport { updatePost } from './post.actions';\r\nimport { selectCommentPostsByPostId } from '../reply-id/reply-id.selectors';\r\n\r\n@Injectable()\r\nexport class PostEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private postService: PostService,\r\n    private replyFacade: ReplyFacade,\r\n    private postFacade: PostFacade,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  loadPosts$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.loadPostsByIds),\r\n      tap(({ payload }) =>\r\n        this.store.dispatch(\r\n          MyPostReactionsActions.getGetMyPostReactionsByPostIds({\r\n            ids: payload.ids,\r\n          })\r\n        )\r\n      ),\r\n      concatMap(({ payload }) =>\r\n        from(this.postService.loadPostsByIds(payload.ids, payload.type)).pipe(\r\n          switchMap((postsData) => [\r\n            PostActions.upsertPosts({ payload: postsData }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadPostEffect$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.loadPostById),\r\n      tap(({ id }) =>\r\n        this.store.dispatch(\r\n          MyPostReactionsActions.getGetMyPostReactionsByPostIds({\r\n            ids: [id],\r\n          })\r\n        )\r\n      ),\r\n      switchMap(({ id }) => from(this.postService.loadPostById(id, 'all'))),\r\n      filter((post) => !!post),\r\n      map((post) => PostActions.upsertPost({ payload: post! }))\r\n    )\r\n  );\r\n\r\n  switchIsChildrenCommentShow$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.switchIsChildrenCommentShow),\r\n      switchMap(({ payload }) =>\r\n        this.postFacade.getPostOnce(payload.id).pipe(\r\n          tap((post) => {\r\n            const isChildrenCommentShow =\r\n              payload.open || !post.isChildrenCommentShow;\r\n            const update: Update<Post> = {\r\n              id: post.id,\r\n              changes: { isChildrenCommentShow },\r\n            };\r\n            this.store.dispatch(updatePost({ payload: update }));\r\n          }),\r\n          concatMap((post) => {\r\n            if (!post.isChildrenCommentShow) {\r\n              return this.store\r\n                .select(selectCommentPostsByPostId(post.id))\r\n                .pipe(\r\n                  take(1),\r\n                  map((posts) =>\r\n                    Array.isArray(posts) && posts.length === 0 ? post.id : null\r\n                  )\r\n                );\r\n            } else {\r\n              return of(null);\r\n            }\r\n          }),\r\n          filter((id) => !!id),\r\n          map((id) => ReplyIdAction.loadReplyIdsByParentPostId({ id: id! }))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  addNewCommentPost$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(PostActions.addNewCommentPost),\r\n      tap(({ payload }) => this.postFacade.loadPost(payload.replyId)),\r\n      tap(({ payload }) =>\r\n        this.postFacade.increaseReplyCount(payload.parentId)\r\n      ),\r\n      switchMap((props) => [\r\n        ReplyIdAction.addReplyId({ payload: props.payload }),\r\n        PostActions.switchIsChildrenCommentShow({\r\n          payload: { id: props.payload.parentId, open: true },\r\n        }),\r\n      ])\r\n    )\r\n  );\r\n\r\n  loadReplyPosts$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ReplyIdAction.upsertReplyIds),\r\n      map(({ payload }) =>\r\n        PostActions.loadPostsByIds({\r\n          payload: { ids: payload.replyIds, reload: true, type: 'all' },\r\n        })\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PostFacade",
            "id": "injectable-PostFacade-46f1a7c8e55b089d86cec907f789e655",
            "file": "src/app/state/post/post.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addNewCommentPost",
                    "args": [
                        {
                            "name": "props",
                            "type": "AddReplyIdProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "AddReplyIdProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchPost",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPost",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post | undefined>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostOnce",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPosts",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post[]>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "increaseReplyCount",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPost",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPosts",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchIsChildrenCommentShow",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "open",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "open",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchVisibility",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "update",
                            "type": "Update<Post>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "Update<Post>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../state';\nimport { Observable } from 'rxjs';\nimport {\n  addNewCommentPost,\n  loadPostById,\n  loadPostsByIds,\n  switchIsChildrenCommentShow,\n  updatePost,\n} from './post.actions';\nimport { selectPostById, selectPostsByIds } from './post.selectors';\nimport { Post } from '../../core/models/post/post-list-item.model';\nimport { takeValueOnce } from '../../core/rxjs-custom/operators';\nimport { Update } from '@ngrx/entity';\nimport { AddReplyIdProps } from '../reply-id/reply-id.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostFacade {\n  constructor(private store: Store<AppState>) {}\n\n  loadPost(id: string) {\n    this.store.dispatch(loadPostById({ id }));\n  }\n\n  loadPosts(ids: string[], type?: 'public' | 'all') {\n    this.store.dispatch(loadPostsByIds({ payload: { ids, type } }));\n  }\n\n  getPost(id: string): Observable<Post | undefined> {\n    return this.store.select(selectPostById(id));\n  }\n\n  getPosts(ids: string[]): Observable<Post[]> {\n    return this.store.select(selectPostsByIds(ids));\n  }\n\n  getPostOnce(id: string): Observable<Post> {\n    return this.getPost(id).pipe(takeValueOnce) as Observable<Post>;\n  }\n\n  fetchPost(id: string): Observable<Post> {\n    this.loadPost(id);\n    return this.getPostOnce(id);\n  }\n\n  updatePost(update: Update<Post>) {\n    this.store.dispatch(updatePost({ payload: update }));\n  }\n\n  increaseReplyCount(id: string) {\n    this.getPostOnce(id).subscribe((post) => {\n      const update: Update<Post> = {\n        id: id,\n        changes: { repliesCount: post.repliesCount + 1 },\n      };\n\n      this.updatePost(update);\n    });\n  }\n\n  switchIsChildrenCommentShow(id: string, open?: boolean) {\n    this.store.dispatch(switchIsChildrenCommentShow({ payload: { id, open } }));\n  }\n\n  addNewCommentPost(props: AddReplyIdProps) {\n    this.store.dispatch(addNewCommentPost({ payload: props }));\n  }\n\n  switchVisibility(postId: string) {\n    this.getPostOnce(postId).subscribe((post) => {\n      const update: Update<Post> = {\n        id: postId,\n        changes: { hidden: !post.hidden },\n      };\n\n      this.updatePost(update);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PostService",
            "id": "injectable-PostService-ddee7519c3df25c0abc5e7da04241465",
            "file": "src/app/post/services/post.service.ts",
            "properties": [
                {
                    "name": "spaceIds",
                    "defaultValue": "environment.recommendedSpaceIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "findPostsWithAllDetails",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findPublicPostsWithAllDetails",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostIdsBySpaceId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostIdsBySpaceIds",
                    "args": [
                        {
                            "name": "spaceIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReactionIdsByPostId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReactionsByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSuggestedPostsIds",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadPostById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Post | undefined>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadPostsByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Post[]>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapPostsDTO",
                    "args": [
                        {
                            "name": "postsAllData",
                            "type": "PostWithAllDetails[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Post[]",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "postsAllData",
                            "type": "PostWithAllDetails[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { forkJoin, from, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { LinkService } from '../../shared/services/link.service';\r\nimport { SubsocialApiService } from '../../shared/services/subsocial-api.service';\r\nimport { PostId } from '@subsocial/types/substrate/interfaces';\r\nimport { PostWithAllDetails } from '@subsocial/api/flat-subsocial/dto';\r\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\r\nimport { flatReaction } from '../../core/mapper/flatten.map';\r\nimport { ConvertService } from '../../shared/services/convert.service';\r\nimport { StoreService } from '../../state/store.service';\r\nimport { Post } from '../../core/models/post/post-list-item.model';\r\nimport { mapPostDTOToPost } from '../../core/mapper/post.map';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PostService {\r\n  spaceIds = environment.recommendedSpaceIds;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private link: LinkService,\r\n    private api: SubsocialApiService,\r\n    private convert: ConvertService,\r\n    private storeService: StoreService\r\n  ) {}\r\n\r\n  getSuggestedPostsIds() {\r\n    return this.getPostIdsBySpaceIds(this.spaceIds);\r\n  }\r\n\r\n  getPostIdsBySpaceIds(spaceIds: string[]): Observable<string[]> {\r\n    const allIds$: Observable<PostId[]>[] = [];\r\n    spaceIds.forEach((id) => {\r\n      allIds$.push(\r\n        from(\r\n          this.api.api.subsocial.substrate.postIdsBySpaceId(\r\n            this.convert.convertToBN(id)\r\n          )\r\n        )\r\n      );\r\n    });\r\n\r\n    return forkJoin(allIds$).pipe(\r\n      map((postIds) => {\r\n        return postIds\r\n          .flat()\r\n          .sort((a, b) => b.sub(a).toNumber())\r\n          .map((id) => id.toString());\r\n      })\r\n    );\r\n  }\r\n\r\n  async getPostIdsBySpaceId(id: string) {\r\n    const ids = await this.api.api.subsocial.substrate.postIdsBySpaceId(\r\n      this.convert.convertToBN(id)\r\n    );\r\n    return ids.sort((a, b) => b.sub(a).toNumber()).map((id) => id.toString());\r\n  }\r\n\r\n  async loadPostsByIds(\r\n    ids: string[],\r\n    type: 'public' | 'all' = 'public'\r\n  ): Promise<Post[]> {\r\n    const postsData =\r\n      type === 'public'\r\n        ? await this.findPublicPostsWithAllDetails(ids)\r\n        : await this.findPostsWithAllDetails(ids);\r\n\r\n    return this.mapPostsDTO(postsData);\r\n  }\r\n\r\n  async loadPostById(\r\n    id: string,\r\n    type: 'public' | 'all' = 'public'\r\n  ): Promise<Post | undefined> {\r\n    const postsData =\r\n      type === 'public'\r\n        ? await this.findPublicPostsWithAllDetails([id])\r\n        : await this.findPostsWithAllDetails([id]);\r\n\r\n    if (postsData[0]) {\r\n      const { post, space, owner } = postsData[0];\r\n\r\n      return mapPostDTOToPost(post, space, owner?.content);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async findPublicPostsWithAllDetails(ids: string[]) {\r\n    return await this.api.api.findPublicPostsWithAllDetails(ids);\r\n  }\r\n\r\n  async findPostsWithAllDetails(ids: string[]) {\r\n    return await this.api.api.findPostsWithAllDetails({\r\n      ids: this.convert.convertToBNArray(ids),\r\n    });\r\n  }\r\n\r\n  async getReactionIdsByPostId(id: string) {\r\n    return await this.api.getSubstrateIdsById({\r\n      pallet: PALLETS.reactions,\r\n      method: METHODS.reactionIdsByPostId,\r\n      id,\r\n    });\r\n  }\r\n\r\n  async getReactionsByIds(ids: string[]) {\r\n    const reactions = await this.api.api.subsocial.substrate.findReactions(\r\n      this.convert.convertToBNArray(ids)\r\n    );\r\n\r\n    return reactions.map((reaction) => flatReaction(reaction));\r\n  }\r\n\r\n  public mapPostsDTO(postsAllData: PostWithAllDetails[]): Post[] {\r\n    const posts: Post[] = [];\r\n\r\n    postsAllData.forEach((postAllData) => {\r\n      const { post, space, owner } = postAllData;\r\n\r\n      if (post?.content) {\r\n        posts.push(mapPostDTOToPost(post, space, owner?.content));\r\n      }\r\n    });\r\n\r\n    return posts;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileEffects",
            "id": "injectable-ProfileEffects-f29162173054966ee4942739725e62f8",
            "file": "src/app/state/profile/profile.effects.ts",
            "properties": [
                {
                    "name": "loadMyProfiles$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadMyProfile),\r\n      switchMap(({ id }) =>\r\n        from(this.profileService.fetchProfileById(id)).pipe(\r\n          filter((profile) => !!profile),\r\n          switchMap((profile) => [\r\n            MyAccountAction.setMyAccount({\r\n              payload: this.accountService.getMyAccountData(profile.id),\r\n            }),\r\n            ProfileAction.upsertProfile({\r\n              payload: profile,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "loadProfile$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfileById),\r\n      switchMap(({ id }) =>\r\n        from(this.profileService.fetchProfileById(id)).pipe(\r\n          filter((profile) => !!profile),\r\n          switchMap((profile) => [\r\n            ProfileAction.upsertProfile({\r\n              payload: profile,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loadProfiles$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfilesByIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.profileService.fetchProfilesByIds(payload.ids)).pipe(\r\n          filter((profiles) => !!profiles),\r\n          switchMap((profiles) => [\r\n            ProfileAction.upsertProfiles({\r\n              payload: profiles,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { AccountService } from '../../shared/services/account.service';\r\nimport * as ProfileAction from './profile.actions';\r\nimport * as MyAccountAction from '../my-account/my-account.actions';\r\nimport { filter, switchMap } from 'rxjs/operators';\r\nimport { from } from 'rxjs';\r\nimport { ProfileService } from '../../account/services/profile.service';\r\n\r\n@Injectable()\r\nexport class ProfileEffects {\r\n  constructor(\r\n    private action$: Actions,\r\n    private accountService: AccountService,\r\n    private profileService: ProfileService\r\n  ) {}\r\n\r\n  loadProfile$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfileById),\r\n      switchMap(({ id }) =>\r\n        from(this.profileService.fetchProfileById(id)).pipe(\r\n          filter((profile) => !!profile),\r\n          switchMap((profile) => [\r\n            ProfileAction.upsertProfile({\r\n              payload: profile,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadProfiles$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadProfilesByIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.profileService.fetchProfilesByIds(payload.ids)).pipe(\r\n          filter((profiles) => !!profiles),\r\n          switchMap((profiles) => [\r\n            ProfileAction.upsertProfiles({\r\n              payload: profiles,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadMyProfiles$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(ProfileAction.loadMyProfile),\r\n      switchMap(({ id }) =>\r\n        from(this.profileService.fetchProfileById(id)).pipe(\r\n          filter((profile) => !!profile),\r\n          switchMap((profile) => [\r\n            MyAccountAction.setMyAccount({\r\n              payload: this.accountService.getMyAccountData(profile.id),\r\n            }),\r\n            ProfileAction.upsertProfile({\r\n              payload: profile,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileFacade",
            "id": "injectable-ProfileFacade-a064fdf7aafb1fd7fefa37c99f937fb0",
            "file": "src/app/state/profile/profile.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMyProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProfile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Profile | undefined>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileOnce",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Profile>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfiles",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Profile[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProfile",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProfiles",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../state';\r\nimport { Observable } from 'rxjs';\r\nimport { Profile } from './profile.state';\r\nimport { loadProfileById, loadProfilesByIds } from './profile.actions';\r\nimport { selectProfileById, selectProfilesByIds } from './profile.selectors';\r\nimport { takeValueOnce } from '../../core/rxjs-custom/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProfileFacade {\r\n  constructor(private store: Store<AppState>) {}\r\n\r\n  loadProfile(id: string) {\r\n    this.store.dispatch(loadProfileById({ id }));\r\n  }\r\n\r\n  loadProfiles(ids: string[], type?: 'public' | 'all') {\r\n    this.store.dispatch(loadProfilesByIds({ payload: { ids, type } }));\r\n  }\r\n\r\n  getProfile(id: string): Observable<Profile | undefined> {\r\n    return this.store.select(selectProfileById(id));\r\n  }\r\n\r\n  getProfileOnce(id: string): Observable<Profile> {\r\n    return this.getProfile(id).pipe(takeValueOnce) as Observable<Profile>\r\n  }\r\n\r\n  getProfiles(ids: string[]): Observable<Profile[]> {\r\n    return this.store.select(selectProfilesByIds(ids));\r\n  }\r\n\r\n  getMyProfile() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-753580102992cae062e38a5e613281b1",
            "file": "src/app/account/services/profile.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchProfileById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchProfilesByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFollowersIds",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFollowingIds",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SubsocialApiService } from '../../shared/services/subsocial-api.service';\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\nimport { mapProfileDTOToProfile } from '../../core/mapper/profile.map';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n  constructor(private api: SubsocialApiService) {}\n\n  async getFollowingIds(id: string) {\n    return await this.api.getSubstrateIdsById({\n      pallet: PALLETS.profileFollows,\n      method: METHODS.accountsFollowedByAccount,\n      id,\n    });\n  }\n\n  async getFollowersIds(id: string) {\n    return await this.api.getSubstrateIdsById({\n      pallet: PALLETS.profileFollows,\n      method: METHODS.accountFollowers,\n      id,\n    });\n  }\n\n  async fetchProfilesByIds(ids: string[]) {\n    const profilesData = await this.api.api.findProfiles(ids);\n    return profilesData.map((profile) => mapProfileDTOToProfile(profile));\n  }\n\n  public async fetchProfileById(id: string) {\n    const profileData = await this.api.api.findProfile(id);\n    return mapProfileDTOToProfile(profileData, id);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReactionsService",
            "id": "injectable-ReactionsService-7a4cd64e66ed9013f43a4a252762dc3a",
            "file": "src/app/shared/services/reactions.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getReactionsIdsByPostIds",
                    "args": [
                        {
                            "name": "postIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "postIds",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AccountService } from './account.service';\nimport { SubsocialApiService } from './subsocial-api.service';\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\nimport { AnyReactionId } from '@subsocial/types';\nimport { filter, skipWhile, take } from 'rxjs/operators';\nimport { MyPostReactions } from '../../state/my-post-reactions/my-post-reactions.state';\nimport BN from 'bn.js';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReactionsService {\n  constructor(\n    private accountService: AccountService,\n    private api: SubsocialApiService\n  ) {}\n\n  async getReactionsIdsByPostIds(postIds: string[]) {\n    const account = await this.accountService.currentAccount$\n      .pipe(\n        skipWhile((account) => !account),\n        take(1)\n      )\n      .toPromise();\n\n    if (!account) return;\n\n    const tuples = postIds.map((postId) => [account.id, postId]);\n\n    const reactionIds = await this.api.getSubstrateIdsByMulti({\n      pallet: PALLETS.reactions,\n      method: METHODS.postReactionIdByAccount,\n      tuples,\n    });\n\n    const filteredReactionIds: BN[] = [];\n\n    const reactionIdByPostIds = new Map<string, string>();\n    tuples.map(([, postIds], index) => {\n      const reactionId = reactionIds[index] as unknown as BN;\n      if (!reactionId.eqn(0)) {\n        reactionIdByPostIds.set(reactionId.toString(), postIds);\n        filteredReactionIds.push(reactionId);\n      }\n    });\n\n    const reactionsRaw = await this.api.substrate.findReactions(\n      filteredReactionIds\n    );\n\n    return reactionsRaw.map((reactionRaw) => {\n      const id = reactionRaw.id.toString();\n\n      return {\n        id:\n          reactionRaw.created.account.toString() +\n          '-' +\n          reactionIdByPostIds.get(id),\n        reactionId: id,\n        kind: reactionRaw.kind.isUpvote ? 'Upvote' : 'Downvote',\n      } as MyPostReactions;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReplyFacade",
            "id": "injectable-ReplyFacade-dc64b994df93f8deea21071b91ff8f7a",
            "file": "src/app/state/reply-id/reply.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addReplyIdForPost",
                    "args": [
                        {
                            "name": "props",
                            "type": "AddReplyIdProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "AddReplyIdProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReplyIdsForPost",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReplyPostByRootPostId",
                    "args": [
                        {
                            "name": "rootId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rootId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadReplyIdsForPost",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../state';\nimport {\n  addReplyId,\n  AddReplyIdProps,\n  loadReplyIdsByParentPostId,\n} from './reply-id.actions';\nimport {\n  selectCommentPostsByPostId,\n  selectReplyIdsByPostId,\n} from './reply-id.selectors';\nimport {\n  isNotEmptyOrNull,\n  takeValueOnce,\n} from '../../core/rxjs-custom/operators';\nimport { filter } from 'rxjs/operators';\nimport { Observable } from \"rxjs\";\nimport { Post } from \"../../core/models/post/post-list-item.model\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReplyFacade {\n  constructor(private store: Store<AppState>) {}\n\n  loadReplyIdsForPost(postId: string) {\n    this.store.dispatch(loadReplyIdsByParentPostId({ id: postId }));\n  }\n\n  getReplyPostByRootPostId(rootId: string): Observable<Post[]> {\n    return this.store\n      .select(selectCommentPostsByPostId(rootId))\n      .pipe(filter(isNotEmptyOrNull));\n  }\n\n  getReplyIdsForPost(postId: string) {\n    return this.store.select(selectReplyIdsByPostId(postId));\n  }\n\n  addReplyIdForPost(props: AddReplyIdProps) {\n    this.store.dispatch(addReplyId({ payload: props }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReplyIdEffects",
            "id": "injectable-ReplyIdEffects-3d7cdd1b445c3f492642373a29bc49ba",
            "file": "src/app/state/reply-id/reply-id.effects.ts",
            "properties": [
                {
                    "name": "addReplyId$",
                    "defaultValue": "createEffect(() =>\n    this.action$.pipe(\n      ofType(ReplyIdAction.addReplyId),\n      switchMap(({ payload }) =>\n        this.replyFacade.getReplyIdsForPost(payload.parentId).pipe(\n          take(1),\n          map((replyIds) => {\n            let update: Update<ReplyIds>;\n\n            if (replyIds) {\n              update = {\n                id: payload.parentId,\n                changes: { replyIds: [payload.replyId, ...replyIds!.replyIds] },\n              };\n            } else {\n              update = {\n                id: payload.parentId,\n                changes: { replyIds: [payload.replyId] },\n              };\n            }\n            return ReplyIdAction.updateReplyIds({ payload: update });\n          })\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadReplyIds$",
                    "defaultValue": "createEffect(() =>\n    this.action$.pipe(\n      ofType(ReplyIdAction.loadReplyIdsByParentPostId),\n      switchMap(({ id }) =>\n        from(this.commentService.getPostReplyId(id)).pipe(\n          map((replyIds) => ReplyIdAction.upsertReplyIds({ payload: replyIds }))\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as ReplyIdAction from './reply-id.actions';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { from } from 'rxjs';\nimport { CommentService } from '../../shared/services/comment.service';\nimport { PostFacade } from '../post/post.facade';\nimport { ReplyFacade } from './reply.facade';\nimport { Update } from '@ngrx/entity';\nimport { ReplyIds } from '../../core/types/reply-id.type';\n\n@Injectable()\nexport class ReplyIdEffects {\n  constructor(\n    private action$: Actions,\n    private postFacade: PostFacade,\n    private replyFacade: ReplyFacade,\n    private commentService: CommentService\n  ) {}\n\n  addReplyId$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(ReplyIdAction.addReplyId),\n      switchMap(({ payload }) =>\n        this.replyFacade.getReplyIdsForPost(payload.parentId).pipe(\n          take(1),\n          map((replyIds) => {\n            let update: Update<ReplyIds>;\n\n            if (replyIds) {\n              update = {\n                id: payload.parentId,\n                changes: { replyIds: [payload.replyId, ...replyIds!.replyIds] },\n              };\n            } else {\n              update = {\n                id: payload.parentId,\n                changes: { replyIds: [payload.replyId] },\n              };\n            }\n            return ReplyIdAction.updateReplyIds({ payload: update });\n          })\n        )\n      )\n    )\n  );\n\n  loadReplyIds$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(ReplyIdAction.loadReplyIdsByParentPostId),\n      switchMap(({ id }) =>\n        from(this.commentService.getPostReplyId(id)).pipe(\n          map((replyIds) => ReplyIdAction.upsertReplyIds({ payload: replyIds }))\n        )\n      )\n    )\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SessionService",
            "id": "injectable-SessionService-0dade2c8699a97345708c6f42478904a",
            "file": "src/app/shared/services/session.service.ts",
            "properties": [
                {
                    "name": "offchainUrl",
                    "defaultValue": "environment.offchainUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "addSessionKey",
                    "args": [
                        {
                            "name": "sessionCall",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "sessionCall",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNonce",
                    "args": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSessionKey",
                    "args": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SessionService {\n  constructor(private http: HttpClient) {}\n\n  offchainUrl = environment.offchainUrl;\n\n  async addSessionKey(sessionCall: any) {\n    await this.http\n      .post(\n        this.offchainUrl + '/v1/offchain/accounts/setSessionKey',\n        sessionCall\n      )\n      .pipe(\n        catchError((err) => {\n          console.error(\n            'Failed to add a session key to main account:',\n            sessionCall.account,\n            'res.status:',\n            err.status\n          );\n          return of(null);\n        })\n      )\n      .toPromise();\n  }\n\n  async getNonce(account: string) {\n    return await this.http\n      .get<string>(\n        this.offchainUrl + `/v1/offchain/accounts/getNonce?account=${account}`\n      )\n      .toPromise();\n  }\n\n  async getSessionKey(account: string) {\n    return await this.http\n      .get(\n        this.offchainUrl +\n          `/v1/offchain/accounts/getSessionKey?account=${account}`,\n        {}\n      )\n      .pipe(\n        catchError((err) => {\n          console.error(\n            `Failed to check if a session key is known on offchain: ${account}`,\n            err\n          );\n          return of(null);\n        })\n      )\n      .toPromise();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SideNavService",
            "id": "injectable-SideNavService-021aae4dffd3b5adfa890af41c377305",
            "file": "src/app/shared/services/side-nav.service.ts",
            "properties": [
                {
                    "name": "isShowAccountSideNav$",
                    "defaultValue": "this.isShowAccountSideNavSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isShowAccountSideNavSource",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeAccountSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openAccountSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SideNavService {\r\n  private isShowAccountSideNavSource = new BehaviorSubject<boolean>(false);\r\n  public isShowAccountSideNav$: Observable<boolean> =\r\n    this.isShowAccountSideNavSource.asObservable();\r\n\r\n  constructor() {}\r\n\r\n  openAccountSideNav() {\r\n    this.isShowAccountSideNavSource.next(true);\r\n  }\r\n\r\n  closeAccountSideNav() {\r\n    this.isShowAccountSideNavSource.next(false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "SignInModalService",
            "id": "injectable-SignInModalService-827df234661ec20f5d094d79b0b3ed1d",
            "file": "src/app/ui-lib/modal-dialogs/services/sign-in-modal.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openModal",
                    "args": [
                        {
                            "name": "isTx",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "isTx",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SignInModalDialogComponent } from '../sign-in-modal-dialog/sign-in-modal-dialog.component';\nimport { AccountService } from '../../../shared/services/account.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SignInModalService {\n  constructor(\n    private dialog: MatDialog,\n    private accountService: AccountService\n  ) {}\n\n  async openModal(isTx?: boolean) {\n    const { accounts, status } = await this.accountService.getSignInData();\n\n    const dialogRef = this.dialog.open(SignInModalDialogComponent, {\n      maxWidth: '430px',\n      data: {\n        status,\n        accounts,\n        isTx,\n      },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(filter((data) => !!data))\n      .subscribe((account) => this.accountService.setCurrentAccount(account!));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackBarService",
            "id": "injectable-SnackBarService-15e95f60e35de80cad17057adba7c240",
            "file": "src/app/shared/services/snack-bar.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openSimpleSnackBar",
                    "args": [
                        {
                            "name": "options",
                            "type": "SimpleSnackBarOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "SimpleSnackBarOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrorMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  SimpleSnackBarComponent,\n  SimpleSnackBarOption,\n} from '../components/simple-snack-bar/simple-snack-bar.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackBarService {\n  constructor(readonly snackBar: MatSnackBar) {}\n\n  public openSimpleSnackBar(options: SimpleSnackBarOption) {\n    return this.snackBar.openFromComponent(SimpleSnackBarComponent, {\n      data: options,\n      horizontalPosition: 'start',\n      verticalPosition: 'bottom',\n      duration: options.duration,\n      panelClass: ['white-snackbar'],\n    });\n  }\n\n  showErrorMessage(message: string) {\n    this.openSimpleSnackBar({\n      message,\n      iconName: 'error-icon',\n      isShowCloseButton: true,\n      duration: 3000,\n      className: 'font-error',\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SpaceEffects",
            "id": "injectable-SpaceEffects-10c4b647b7948d152f684eef79e924f9",
            "file": "src/app/state/space/space.effects.ts",
            "properties": [
                {
                    "name": "loadSpace$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.loadSpaceById),\r\n      switchMap(({ id }) =>\r\n        from(this.spaceService.loadSpaceById(id)).pipe(\r\n          filter((space) => space !== undefined),\r\n          switchMap((space) => [SpaceActions.upsertSpace({ payload: space })])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loadSpaces$",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.loadSpacesByIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.spaceService.loadSpacesByIds(payload.ids, payload.type)).pipe(\r\n          switchMap((spaceData) => [\r\n            SpaceActions.upsertSpaces({\r\n              payload: spaceData,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as SpaceActions from './space.actions';\r\nimport { filter, switchMap } from 'rxjs/operators';\r\nimport { SpaceService } from '../../space/services/space.service';\r\nimport { from } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class SpaceEffects {\r\n  constructor(private action$: Actions, private spaceService: SpaceService) {}\r\n\r\n  loadSpaces$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.loadSpacesByIds),\r\n      switchMap(({ payload }) =>\r\n        from(this.spaceService.loadSpacesByIds(payload.ids, payload.type)).pipe(\r\n          switchMap((spaceData) => [\r\n            SpaceActions.upsertSpaces({\r\n              payload: spaceData,\r\n            }),\r\n          ])\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  loadSpace$ = createEffect(() =>\r\n    this.action$.pipe(\r\n      ofType(SpaceActions.loadSpaceById),\r\n      switchMap(({ id }) =>\r\n        from(this.spaceService.loadSpaceById(id)).pipe(\r\n          filter((space) => space !== undefined),\r\n          switchMap((space) => [SpaceActions.upsertSpace({ payload: space })])\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SpaceFacade",
            "id": "injectable-SpaceFacade-e717e4831b9a47d66b410ced5d92f36c",
            "file": "src/app/state/space/space.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetchSpaces",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Space[]>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpace",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Space | undefined>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpaceOnce",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Space | undefined>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpaces",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Space[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpacesOnce",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Space[]>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSpace",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSpaces",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchVisibility",
                    "args": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSpace",
                    "args": [
                        {
                            "name": "update",
                            "type": "Update<Space>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "Update<Space>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../state';\nimport { loadSpaceById, loadSpacesByIds, updateSpace } from './space.actions';\nimport { selectSpaceById, selectSpacesByIds } from './space.selectors';\nimport { Observable } from 'rxjs';\nimport { Space } from './space.state';\nimport { takeValueOnce } from '../../core/rxjs-custom/operators';\nimport { Update } from '@ngrx/entity';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpaceFacade {\n  constructor(private store: Store<AppState>) {}\n\n  loadSpace(id: string) {\n    this.store.dispatch(loadSpaceById({ id }));\n  }\n\n  loadSpaces(ids: string[], type?: 'public' | 'all') {\n    this.store.dispatch(loadSpacesByIds({ payload: { ids, type } }));\n  }\n\n  getSpace(id: string): Observable<Space | undefined> {\n    return this.store.select(selectSpaceById(id));\n  }\n\n  getSpaces(ids: string[]): Observable<Space[]> {\n    return this.store.select(selectSpacesByIds(ids));\n  }\n\n  fetchSpaces(ids: string[]): Observable<Space[]> {\n    this.loadSpaces(ids);\n    return this.getSpacesOnce(ids);\n  }\n\n  getSpaceOnce(id: string): Observable<Space | undefined> {\n    return this.store.select(selectSpaceById(id)).pipe(takeValueOnce);\n  }\n\n  getSpacesOnce(ids: string[]): Observable<Space[]> {\n    return this.store.select(selectSpacesByIds(ids)).pipe(takeValueOnce);\n  }\n\n  updateSpace(update: Update<Space>) {\n    this.store.dispatch(updateSpace({ payload: update }));\n  }\n\n  switchVisibility(spaceId: string) {\n    this.getSpaceOnce(spaceId).subscribe((space) => {\n      const update: Update<Space> = {\n        id: spaceId,\n        changes: { isHidden: !space?.isHidden },\n      };\n\n      this.updateSpace(update);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SpaceService",
            "id": "injectable-SpaceService-c6729e1f2f8f482fdf3f2ea375ce737d",
            "file": "src/app/space/services/space.service.ts",
            "properties": [
                {
                    "name": "myOwnSpaceIds$",
                    "defaultValue": "this.myOwnSpaceIdsSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "myOwnSpaceIdsSource",
                    "defaultValue": "new BehaviorSubject<string[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFollowersIdsBySpaceId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMyOwnSpaceIds",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ]
                },
                {
                    "name": "getOrLoadSpacesByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpaceIdByHandle",
                    "args": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string | undefined>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpaceIdsByAccount",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSpacesByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SpaceStruct[]>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSpaceById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSpacesByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Space[]>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"public\" | \"all\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'public'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadSpaceById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SubsocialApiService } from '../../shared/services/subsocial-api.service';\nimport { SpaceStruct } from '@subsocial/api/flat-subsocial/flatteners';\nimport { SpaceId } from '@subsocial/types/substrate/interfaces';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../state/state';\nimport {\n  selectSpaceById,\n  selectSpaceEntitiesByIds,\n} from '../../state/space/space.selectors';\nimport {\n  loadSpacesByIds,\n  loadSpaceById,\n  loadSpaceSuccess,\n} from '../../state/space/space.actions';\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\nimport { ConvertService } from '../../shared/services/convert.service';\nimport { StoreService } from '../../state/store.service';\nimport { SpaceListItemData } from '../../core/models/space/space-list-item.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { AccountService } from '../../shared/services/account.service';\nimport { mapSpaceDTOToSpace } from '../../core/mapper/space.map';\nimport { Space } from '../../state/space/space.state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpaceService {\n  constructor(\n    private http: HttpClient,\n    private apiService: SubsocialApiService,\n    private store: Store<AppState>,\n    private convert: ConvertService,\n    private storeService: StoreService,\n    private accountService: AccountService\n  ) {}\n\n  private myOwnSpaceIdsSource = new BehaviorSubject<string[] | null>(null);\n  myOwnSpaceIds$ = this.myOwnSpaceIdsSource.asObservable();\n\n  public async getSpacesByIds(ids: string[]): Promise<SpaceStruct[]> {\n    return await this.apiService.api.findSpaceStructs(ids);\n  }\n\n  public async getMyOwnSpaceIds() {\n    const accountId = this.accountService.getCurrentAccountId();\n    if (accountId) {\n      const ids = await this.getSpaceIdsByAccount(accountId);\n\n      if (ids?.length > 0) {\n        this.myOwnSpaceIdsSource.next(ids);\n        return;\n      }\n    }\n\n    this.myOwnSpaceIdsSource.next(null);\n  }\n\n  public async loadSpacesByIds(\n    ids: string[],\n    type: 'public' | 'all' = 'public'\n  ): Promise<Space[]> {\n    const spaceData = await this.apiService.api.findPublicSpaces(ids);\n\n    if (type === 'public') {\n      const unlistedSpaces = await this.apiService.api.findUnlistedSpaces(ids);\n      spaceData.push(...unlistedSpaces);\n    }\n\n    return spaceData.map((data) => mapSpaceDTOToSpace(data));\n  }\n\n  async getSpaceIdByHandle(handle: string): Promise<string | undefined> {\n    const res: SpaceId | undefined =\n      await this.apiService.api.subsocial.substrate.getSpaceIdByHandle(\n        handle.toLowerCase()\n      );\n\n    return res?.toString();\n  }\n\n  async loadSpaceById(id: string) {\n    const spaceData = await this.apiService.api.findSpace({\n      id: this.convert.convertToBN(id),\n    });\n\n    return spaceData ? mapSpaceDTOToSpace(spaceData) : undefined;\n  }\n\n  async getFollowersIdsBySpaceId(id: string) {\n    return await this.apiService.getSubstrateIdsById({\n      pallet: PALLETS.spaceFollows,\n      method: METHODS.spaceFollowers,\n      id,\n    });\n  }\n\n  async reloadSpaceById(id: string) {\n    return (await this.storeService.reloadEntity(\n      selectSpaceById,\n      loadSpaceById,\n      loadSpaceSuccess,\n      id,\n      { id }\n    )) as SpaceListItemData;\n  }\n\n  async getOrLoadSpacesByIds(ids: string[] | undefined) {\n    const spaceEntityData = await this.storeService.getOrLoadEntities(\n      selectSpaceEntitiesByIds,\n      loadSpacesByIds,\n      loadSpaceSuccess,\n      ids,\n      { payload: { ids } }\n    );\n\n    return Object.values(spaceEntityData) as SpaceListItemData[];\n  }\n\n  async getSpaceIdsByAccount(id: string) {\n    const spaceId =\n      await this.apiService.api.subsocial.substrate.spaceIdsByOwner(id);\n    return spaceId.map((id) => id.toString());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-32a0c53fd57c4f749d3e8485750536b3",
            "file": "src/app/shared/services/storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccountId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLang",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAccountId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurrentAccountId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLang",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\n\r\nexport const STORAGE_KEYS = {\r\n  accountId: 'accountId',\r\n  lang: 'lang',\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StorageService {\r\n  constructor() {}\r\n\r\n  setCurrentAccountId(id: string) {\r\n    localStorage.setItem(STORAGE_KEYS.accountId, id);\r\n  }\r\n\r\n  getAccountId() {\r\n    return localStorage.getItem(STORAGE_KEYS.accountId);\r\n  }\r\n\r\n  removeAccountId() {\r\n    localStorage.removeItem(STORAGE_KEYS.accountId);\r\n  }\r\n\r\n  setLang(lang: string) {\r\n    this.set(STORAGE_KEYS.lang, lang);\r\n  }\r\n\r\n  getLang() {\r\n    return this.get(STORAGE_KEYS.lang);\r\n  }\r\n\r\n  get(key: string) {\r\n    const value = localStorage.getItem(key);\r\n    return value ? JSON.parse(value) : undefined;\r\n  }\r\n\r\n  set(key: string, obj: any) {\r\n    localStorage.setItem(key, JSON.stringify(obj));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "StoreService",
            "id": "injectable-StoreService-ca295813c5889aef4befa13867967ab6",
            "file": "src/app/state/store.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOrLoadEntities",
                    "args": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "successAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "successAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueFromStore",
                    "args": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadEntity",
                    "args": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "successAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "successAction",
                            "type": "ActionCreator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActionCreator, Store } from '@ngrx/store';\nimport { AppState } from './state';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreService {\n  constructor(private store: Store<AppState>, private action$: Actions) {}\n\n  public async getValueFromStore(\n    selector: Function,\n    action: ActionCreator,\n    getProps: any\n  ) {\n    return await this.action$\n      .pipe(\n        ofType(action),\n        mergeMap((_) => this.store.select(selector(getProps))),\n        take(1)\n      )\n      .toPromise();\n  }\n\n  public async getOrLoadEntities(\n    selector: Function,\n    loadAction: Function,\n    successAction: ActionCreator,\n    getProps: any,\n    loadProps: any\n  ) {\n    const entitiesFromStore = await this.store\n      .select(selector(getProps))\n      .pipe(take(1))\n      .toPromise();\n\n    if (\n      !entitiesFromStore ||\n      entitiesFromStore?.length === 0 ||\n      Object.keys(entitiesFromStore).length === 0\n    ) {\n      this.store.dispatch(loadAction(loadProps));\n\n      return await this.getValueFromStore(selector, successAction, getProps);\n    }\n\n    return entitiesFromStore;\n  }\n\n  public async reloadEntity(\n    selector: Function,\n    loadAction: Function,\n    successAction: ActionCreator,\n    getProps: any,\n    loadProps: any\n  ) {\n    this.store.dispatch(loadAction(loadProps));\n    return await this.getValueFromStore(selector, successAction, getProps);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SubsocialApiService",
            "id": "injectable-SubsocialApiService-293489a89173d7f3067206a041f1d6b1",
            "file": "src/app/shared/services/subsocial-api.service.ts",
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FlatSubsocialApi",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getContentArray",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubstrateIdsById",
                    "args": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubstrateIdsByMulti",
                    "args": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateMultiProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "FetchSubstrateMultiProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubsocialApi",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { newFlatSubsocialApi, SubsocialSubstrateApi } from '@subsocial/api';\nimport { environment } from '../../../environments/environment';\nimport { FlatSubsocialApi } from '@subsocial/api/flat-subsocial';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AnyId } from '@subsocial/api/flat-subsocial/dto';\nimport { SnackBarService } from './snack-bar.service';\nimport { ConvertService } from './convert.service';\n\ntype FetchSubstrateProps = {\n  pallet: string;\n  method: string;\n  id: AnyId;\n};\n\ntype FetchSubstrateMultiProps = {\n  pallet: string;\n  method: string;\n  tuples: string[][];\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SubsocialApiService {\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private _snackBar: MatSnackBar,\n    private snackBarService: SnackBarService,\n    private convert: ConvertService\n  ) {}\n  public api: FlatSubsocialApi;\n\n  public get substrate() {\n    return this.api.subsocial.substrate;\n  }\n\n  async initSubsocialApi() {\n    const snackBar = this.snackBarService.openSimpleSnackBar({\n      message: 'Connecting to network...',\n      iconName: 'info-icon',\n      isShowCloseButton: true,\n    });\n\n    const { substrateNodeUrl, offchainUrl, ipfsNodeUrl } = environment;\n    this.api = await newFlatSubsocialApi({\n      offchainUrl,\n      substrateNodeUrl,\n      ipfsNodeUrl,\n      useServer: {\n        httpRequestMethod: 'get',\n      },\n    });\n\n    snackBar.dismiss();\n  }\n\n  async getSubstrateIdsById(props: FetchSubstrateProps) {\n    const readyApi = await this.api.subsocial.substrate.api;\n    const { pallet, method, id } = props;\n    const ids = await readyApi.query[pallet][method](id);\n    return (ids.toJSON() as Array<any>).map((id) => id.toString());\n  }\n\n  async getSubstrateIdsByMulti(props: FetchSubstrateMultiProps) {\n    const readyApi = await this.api.subsocial.substrate.api;\n    const { pallet, method, tuples } = props;\n    const ids = await readyApi.query[pallet][method].multi(tuples);\n    return ids;\n  }\n\n  async getContentArray(ids: string[]) {\n    return await this.api.subsocial.ipfs.getContentArray(ids);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "convert",
                        "type": "ConvertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "substrate": {
                    "name": "substrate",
                    "getSignature": {
                        "name": "substrate",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "TransactionService",
            "id": "injectable-TransactionService-f42a5fb821e0e8779b9ca6f1a942b4b7",
            "file": "src/app/shared/services/transaction.service.ts",
            "properties": [
                {
                    "name": "waitMessageRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarRef<SimpleSnackBarComponent>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [
                {
                    "name": "closeWaitMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExtrinsic",
                    "args": [
                        {
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeContent",
                    "args": [
                        {
                            "name": "cid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "cid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveIpfsContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrorMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccessMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWaitMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SubsocialApiService } from './subsocial-api.service';\nimport { ExtrinsicProps } from '../../core/base-component/base-tx.component';\nimport { SnackBarService } from './snack-bar.service';\nimport { MESSAGES } from '../../core/constants/messages';\nimport { SimpleSnackBarComponent } from '../components/simple-snack-bar/simple-snack-bar.component';\nimport { MatSnackBarRef } from '@angular/material/snack-bar';\nimport { CommonContent } from '@subsocial/types';\nimport { environment } from '../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\n\nexport type IpfsContentProps = {\n  body?: string;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransactionService {\n  constructor(\n    private api: SubsocialApiService,\n    private snackBarService: SnackBarService,\n    private http: HttpClient\n  ) {}\n\n  waitMessageRef: MatSnackBarRef<SimpleSnackBarComponent>;\n\n  async getExtrinsic({ pallet, method, params }: ExtrinsicProps) {\n    const api = await this.api.api.subsocial.substrate.api;\n    if (!api.tx[pallet]) {\n      throw new Error(`Unable to find api.tx.${pallet}`);\n    } else if (!api.tx[pallet][method]) {\n      throw new Error(`Unable to find api.tx.${pallet}.${method}`);\n    }\n\n    return api.tx[pallet][method](...params);\n  }\n\n  async saveIpfsContent(content: CommonContent) {\n    try {\n      const cid = await this.api.api.subsocial.ipfs.saveContent(content);\n      if (cid) {\n        return cid;\n      } else {\n        console.error('Save to IPFS returned an undefined CID');\n      }\n    } catch (err) {\n      console.error(`Failed to build tx params. ${err}`);\n    }\n    return undefined;\n  }\n\n  async saveFile(file: File) {\n    const { addFileUrl } = environment;\n\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.http.post(addFileUrl, formData).toPromise();\n  }\n\n  async removeContent(cid: string) {\n    try {\n      await this.api.api.subsocial.ipfs.removeContent(cid);\n    } catch (e) {\n      console.error('Content not removed', e);\n    }\n  }\n\n  showSuccessMessage(message: string) {\n    this.snackBarService.openSimpleSnackBar({\n      message,\n      isShowCloseButton: true,\n      duration: 2000,\n    });\n  }\n\n  showErrorMessage(message: string) {\n    this.snackBarService.showErrorMessage(message);\n  }\n\n  showWaitMessage() {\n    this.waitMessageRef = this.snackBarService.openSimpleSnackBar({\n      message: MESSAGES.WAITING_TX_COMPLETE,\n      isWait: true,\n    });\n  }\n\n  closeWaitMessage() {\n    this.waitMessageRef.dismiss();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TransferStateService",
            "id": "injectable-TransferStateService-ecb57c6baaeea1e0994a0875da8e9388",
            "file": "src/app/shared/services/transfer-state.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { makeStateKey, TransferState } from '@angular/platform-browser';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TransferStateService {\r\n  constructor(private transferState: TransferState) {}\r\n\r\n  public set<T>(key: string, object: T) {\r\n    const stateKey = makeStateKey<T>(key);\r\n    this.transferState.set<T>(stateKey, object);\r\n  }\r\n\r\n  public get<T>(key: string): T {\r\n    const stateKey = makeStateKey<T>(key);\r\n    return this.transferState.get<T>(stateKey, <any>null);\r\n  }\r\n\r\n  public remove<T>(key: string) {\r\n    const stateKey = makeStateKey<T>(key);\r\n    this.transferState.remove<T>(stateKey);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TranslocoHttpLoader",
            "id": "injectable-TranslocoHttpLoader-242218445c40e27ef28c8f314c3b2c5c",
            "file": "src/app/transloco-root.module.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule\n} from '@ngneat/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`${environment.baseUrl}/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [ TranslocoModule ],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en', 'ru'],\n        defaultLang: 'en',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      })\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader }\n  ]\n})\nexport class TranslocoRootModule {}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "VisibilityService",
            "id": "injectable-VisibilityService-656635902de63a8c83c615190b23882f",
            "file": "src/app/shared/services/visibility.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getIsPostHidden",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsSpaceHidden",
                    "args": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIsSpaceHiddenByPostId",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchPostVisibility",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchSpaceVisibility",
                    "args": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "spaceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PostFacade } from '../../state/post/post.facade';\nimport { SpaceFacade } from '../../state/space/space.facade';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { PermissionsService } from './permissions.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VisibilityService {\n  constructor(\n    private postFacade: PostFacade,\n    private spaceFacade: SpaceFacade,\n    private permission: PermissionsService\n  ) {}\n\n  switchPostVisibility(postId: string) {\n    this.postFacade.switchVisibility(postId);\n  }\n\n  switchSpaceVisibility(spaceId: string) {\n    this.spaceFacade.switchVisibility(spaceId);\n  }\n\n  getIsPostHidden(postId: string) {\n    return this.postFacade.getPost(postId).pipe(\n      filter((post) => !!post),\n      map((post) => post!.hidden || post!.spaceHidden)\n    );\n  }\n\n  getIsSpaceHiddenByPostId(postId: string) {\n    return this.postFacade.getPost(postId).pipe(\n      filter((post) => !!post),\n      map((post) => post!.spaceHidden)\n    );\n  }\n\n  getIsSpaceHidden(spaceId: string) {\n    return this.spaceFacade.getSpace(spaceId).pipe(\n      filter((space) => !!space),\n      map((space) => space!.isHidden)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppErrorStateMatcher",
            "id": "class-AppErrorStateMatcher-71854ad84ee65f6fbd9ba36731a196b6",
            "file": "src/app/core/errors/error-matcher.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\n\r\nexport class AppErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(\r\n      control &&\r\n      control.invalid &&\r\n      (control.dirty || control.touched || isSubmitted)\r\n    );\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "ScrollProps",
            "id": "class-ScrollProps-fa5283019d94238843a8ef75783edac2",
            "file": "src/app/core/classes/scroll-props.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ScrollProps {\r\n  startIndex: number = 0;\r\n  limit: number;\r\n  endIndex: number;\r\n\r\n  public isFinish: boolean = false;\r\n\r\n  get max() {\r\n    return this._max;\r\n  }\r\n\r\n  set max(value: number) {\r\n    this._max = value;\r\n  }\r\n  private _max = Number.MAX_SAFE_INTEGER;\r\n\r\n  constructor(limit: number) {\r\n    this.limit = limit;\r\n    this.endIndex = limit;\r\n  }\r\n\r\n  public next() {\r\n    this.startIndex += this.limit;\r\n    if (this.startIndex + this.limit > this.max) {\r\n      this.endIndex = this.max;\r\n    } else {\r\n      this.endIndex = this.startIndex + this.limit;\r\n    }\r\n\r\n    this.isFinish = this.startIndex > this.max;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "limit",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "limit",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_max",
                    "defaultValue": "Number.MAX_SAFE_INTEGER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "endIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isFinish",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "startIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "max": {
                    "name": "max",
                    "setSignature": {
                        "name": "max",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "max",
                        "type": "",
                        "returnType": "",
                        "line": 8
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "IfDesktopDirective",
            "id": "directive-IfDesktopDirective-57ab6e314874efb304297107937ca0ec",
            "file": "src/app/shared/directives/if-desktop.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ifDesktop]',\r\n})\r\nexport class IfDesktopDirective implements AfterContentInit {\r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngAfterContentInit(): void {\r\n    this.renderer.addClass(this.elementRef.nativeElement, 'if-desktop');\r\n  }\r\n}\r\n",
            "selector": "[ifDesktop]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IfMobileDirective",
            "id": "directive-IfMobileDirective-e55ca8de535deff07a1f417fd0b72a7b",
            "file": "src/app/shared/directives/if-mobile.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[ifMobile]',\r\n})\r\nexport class IfMobileDirective implements AfterContentInit {\r\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) {}\r\n\r\n  ngAfterContentInit(): void {\r\n    this.renderer.addClass(this.elementRef.nativeElement, 'if-mobile');\r\n  }\r\n}\r\n",
            "selector": "[ifMobile]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccountComponent",
            "id": "component-AccountComponent-0bd708757a4e6d482587e0b035568b97",
            "file": "src/app/account/account/account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account",
            "styleUrls": [
                "./account.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-account',\r\n  templateUrl: './account.component.html',\r\n  styleUrls: ['./account.component.scss']\r\n})\r\nexport class AccountComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-profile></app-profile>\r\n\r\n"
        },
        {
            "name": "AccountListItemComponent",
            "id": "component-AccountListItemComponent-ea6087eac7b943ad9e790de4ea1835ce",
            "file": "src/app/ui-lib/profile/account-list-item/account-list-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-list-item",
            "styleUrls": [
                "./account-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accountData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "AccountData"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "avatarBaseUrl",
                    "defaultValue": "environment.ipfsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showCopyButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "onMouseHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AccountData } from '../../../core/types/account.types';\r\n\r\n@Component({\r\n  selector: 'app-account-list-item',\r\n  templateUrl: './account-list-item.component.html',\r\n  styleUrls: ['./account-list-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AccountListItemComponent {\r\n  @Input() accountData: AccountData;\r\n  @Output() onClick = new EventEmitter();\r\n  showCopyButton = false;\r\n  avatarBaseUrl = environment.ipfsUrl;\r\n\r\n  @HostListener('mouseover') onMouseHover() {\r\n    this.showCopyButton = true;\r\n  }\r\n\r\n  @HostListener('mouseleave') onMouseLeave() {\r\n    this.showCopyButton = false;\r\n  }\r\n\r\n  constructor(public dialogRef: MatDialog) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../shared/styles/_var.scss\";\r\n\r\n:host {\r\n  display: block;\r\n\r\n   &:hover {\r\n     cursor: pointer;\r\n     background-color: $hover_color_light;\r\n   }\r\n}\r\n\r\n",
                    "styleUrl": "./account-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"accountData\">\r\n\r\n  <app-row [h]=\"'space-between'\"\r\n           [v]=\"'center'\" (click)=\"onClick.emit()\"\r\n           mat-ripple\r\n           [style.height]=\"'65px'\"\r\n  ><app-row>\r\n\r\n      <app-avatar [src]=\"accountData.avatar\"\r\n                  [jdentityValue]=\"accountData.id\"\r\n                  [style.margin-right]=\"'16px'\"\r\n      ></app-avatar>\r\n\r\n      <app-column>\r\n\r\n        <app-title [text]=\"accountData.name || (accountData.id | addressHidden)\"\r\n                   type=\"small\"\r\n        ></app-title>\r\n\r\n        <app-address [address]=\"accountData.id\"\r\n                     [showCopyButton]=\"showCopyButton\"\r\n        ></app-address>\r\n\r\n      </app-column>\r\n\r\n    </app-row>\r\n\r\n    <app-tokens [tokens]=\"accountData.balance\"\r\n                [style.margin-right]=\"'5px'\"\r\n    ></app-tokens>\r\n\r\n  </app-row>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "AccountSidenavComponent",
            "id": "component-AccountSidenavComponent-6f514f88e9fa1242f2bb8cc08261b8d1",
            "file": "src/app/ui-lib/modal-dialogs/account-sidenav/account-sidenav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-sidenav",
            "styleUrls": [
                "./account-sidenav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-sidenav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountData[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "myProfileData$",
                    "defaultValue": "this.store.select(\n    selectMyAccountProfileData\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Profile | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "sideNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSidenav",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSidenav"
                        }
                    ]
                },
                {
                    "name": "sideNavService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SideNavService",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAccountsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { SideNavService } from '../../../shared/services/side-nav.service';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { DeviceService } from '../../../shared/services/device.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../state/state';\nimport { selectMyAccountProfileData } from '../../../state/profile/profile.selectors';\nimport { AccountService } from '../../../shared/services/account.service';\nimport { StorageService } from '../../../shared/services/storage.service';\nimport { AccountData } from '../../../core/types/account.types';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, map, mergeMap, takeUntil } from 'rxjs/operators';\nimport { Profile } from '../../../state/profile/profile.state';\n\n@Component({\n  selector: 'app-account-sidenav',\n  templateUrl: './account-sidenav.component.html',\n  styleUrls: ['./account-sidenav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccountSidenavComponent\n  implements OnInit, AfterViewInit, OnDestroy\n{\n  @ViewChild(MatSidenav) sideNav: MatSidenav;\n\n  accounts: AccountData[] = [];\n\n  myProfileData$: Observable<Profile | undefined> = this.store.select(\n    selectMyAccountProfileData\n  );\n  private unsubscribe$: Subject<void> = new Subject();\n\n  constructor(\n    public accountService: AccountService,\n    public sideNavService: SideNavService,\n    public deviceService: DeviceService,\n    private store: Store<AppState>,\n    private storage: StorageService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.getAccountsData();\n  }\n\n  ngAfterViewInit(): void {\n    this.sideNavService.isShowAccountSideNav$.subscribe((isShow) => {\n      isShow ? this.sideNav.open() : this.sideNav.close();\n      this.cd.markForCheck();\n    });\n  }\n\n  signOut() {\n    this.storage.removeAccountId();\n    this.accountService.signOut();\n    this.sideNavService.closeAccountSideNav();\n  }\n\n  async onChangeAccount(account: AccountData) {\n    const currentAccount = this.accounts.find(\n      (accountData) => accountData.id === account.id\n    );\n\n    if (currentAccount) {\n      await this.accountService.setCurrentAccount(currentAccount);\n    }\n  }\n\n  private getAccountsData() {\n    this.accountService\n      .getAccountsData()\n      .pipe(\n        mergeMap((accountData) =>\n          this.myProfileData$.pipe(\n            filter((myProfile) => !!myProfile),\n            map((myProfile) => {\n              return { accounts: accountData, profile: myProfile };\n            })\n          )\n        ),\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe((accountWithProfile) => {\n        this.accounts = accountWithProfile.accounts.filter(\n          (data) => data.id !== accountWithProfile.profile!.id\n        );\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$?.next();\n    this.unsubscribe$?.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".side-wp {\r\n  position: relative;\r\n  width: 393px;\r\n\r\n  .close-btn {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 13px;\r\n  }\r\n}\r\n\r\napp-scroll {\r\n  height: calc(100vh - 424px);\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .side-wp {\r\n    width: auto;\r\n  }\r\n\r\n  app-scroll {\r\n    height: calc(100vh - 525px);\r\n  }\r\n}\r\n\r\n::ng-deep {\r\n  .mat-drawer-container {\r\n    z-index: 5 !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./account-sidenav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<mat-sidenav-container>\r\n\r\n  <mat-sidenav\r\n    [mode]=\"'over'\"\r\n    [fixedInViewport]=\"true\"\r\n    fixedBottomGap=\"{{ (deviceService.isMobile$ | async) ? 50 : 0}}\"\r\n    fixedTopGap=\"{{ (deviceService.isMobile$ | async) ? 50 : 0}}\"\r\n    position=\"end\">\r\n\r\n    <app-column [margin]=\"'0 16px'\" class=\"side-wp\" *ngIf=\"(myProfileData$ | async) as myProfileData\">\r\n\r\n      <app-column [margin]=\"'16px 0 19px'\" [v]=\"'start'\">\r\n\r\n        <app-close-button (onClose)=\"sideNavService.closeAccountSideNav()\"\r\n                          class=\"close-btn\"\r\n        ></app-close-button>\r\n\r\n        <app-profile-info [profileName]=\"myProfileData.name\"\r\n                          [avatarSrc]=\"myProfileData.avatar\"\r\n                          [followersCount]=\"myProfileData.followersCount\"\r\n                          [followingCount]=\"myProfileData.followingAccountsCount\"\r\n                          [address]=\"myProfileData.id\"\r\n        ></app-profile-info>\r\n\r\n        <app-row [v]=\"'center'\" [margin]=\"'18px 0 0 0'\">\r\n          <app-address [size]=\"'medium'\"\r\n                       [showIcon]=\"true\"\r\n                       [iconMargin]=\"'0 25px 0 11px'\"\r\n                       [showCopyButton]=\"true\"\r\n                       [address]=\"myProfileData.id\"\r\n          ></app-address>\r\n\r\n          <app-qr-button [style.margin-left]=\"'50px'\"\r\n                         [address]=\"myProfileData.id\"\r\n          ></app-qr-button>\r\n        </app-row>\r\n\r\n        <app-tokens [size]=\"'medium'\"\r\n                    [showIcon]=\"true\"\r\n                    [iconMargin]=\"'0 25px 0 11px'\"\r\n                    [style.margin-top]=\"'10px'\"\r\n                    [tokens]=\"accountService.balance$ | async\">\r\n        </app-tokens>\r\n      </app-column>\r\n\r\n      <mat-divider></mat-divider>\r\n\r\n      <app-sidenav-menu [profileId]=\"myProfileData.id\"></app-sidenav-menu>\r\n\r\n      <mat-divider></mat-divider>\r\n\r\n      <app-scroll>\r\n        <app-account-list-item (onClick)=\"onChangeAccount(account)\"\r\n                                 *ngFor=\"let account of accounts\"\r\n                                 [accountData]=\"account\"\r\n        ></app-account-list-item>\r\n      </app-scroll>\r\n\r\n\r\n      <mat-divider  [style.margin-bottom]=\"'16px'\"></mat-divider>\r\n\r\n      <app-sign-out-button (click)=\"signOut()\"></app-sign-out-button>\r\n\r\n     </app-column>\r\n\r\n  </mat-sidenav>\r\n\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "ActionPanelComponent",
            "id": "component-ActionPanelComponent-9e43fa67c0e7c943324bb19258ce7ef4",
            "file": "src/app/ui-lib/action-panel/action-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-panel",
            "styleUrls": [
                "./action-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "commentCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "number"
                },
                {
                    "name": "downvoteCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "number"
                },
                {
                    "name": "isShowComment",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean"
                },
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "isShowReply",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean"
                },
                {
                    "name": "isShowShare",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "position",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "\"center\" | \"left\""
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "upvoteCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "commentClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                },
                {
                    "name": "replyClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                },
                {
                    "name": "shareClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initialVoteStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InitialVoteStatus",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "isDownvoteActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "isUpvoteActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "KIND",
                    "defaultValue": "KIND",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "reaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyPostReactions | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getExtrinsicProps",
                    "args": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "OperationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtrinsicProps",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "OperationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onVoteClick",
                    "args": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareAndDoTransaction",
                    "args": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "operationType",
                            "type": "OperationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operationType",
                            "type": "OperationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "returnToInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "switchHandler",
                    "args": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "kind",
                            "type": "KIND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { KIND, METHODS, PALLETS } from '../../core/constants/query.const';\nimport {\n  ExtrinsicProps,\n  BaseTxComponent,\n} from '../../core/base-component/base-tx.component';\nimport { TransactionService } from '../../shared/services/transaction.service';\nimport { AccountService } from '../../shared/services/account.service';\nimport { SubmittableResult } from '@polkadot/api';\nimport { MyPostReactions } from '../../state/my-post-reactions/my-post-reactions.state';\nimport { MyPostReactionFacade } from '../../state/my-post-reactions/my-post-reaction.facade';\nimport { filter, mergeMap, switchMap } from 'rxjs/operators';\nimport { SignInModalService } from '../modal-dialogs/services/sign-in-modal.service';\n\ntype OperationType = {\n  update?: boolean;\n  delete?: boolean;\n};\n\ntype InitialVoteStatus = {\n  upvoteCount: number;\n  downvoteCount: number;\n  isUpvoteActive: boolean | undefined;\n  isDownvoteActive: boolean | undefined;\n};\n\n@Component({\n  selector: 'app-action-panel',\n  templateUrl: './action-panel.component.html',\n  styleUrls: ['./action-panel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ActionPanelComponent extends BaseTxComponent implements OnInit {\n  @Input() postId: string;\n  @Input() isShowShare = false;\n  @Input() isShowComment = false;\n  @Input() upvoteCount: number = 0;\n  @Input() downvoteCount: number = 0;\n  @Input() commentCount: number = 0;\n  @Input() isShowLabel = false;\n  @Input() isShowReply = false;\n  @Input() position: 'center' | 'left' = 'center';\n  @Output() replyClick = new EventEmitter();\n  @Output() commentClick = new EventEmitter();\n  @Output() shareClick = new EventEmitter();\n\n  reaction: MyPostReactions | undefined;\n  KIND = KIND;\n  initialVoteStatus: InitialVoteStatus;\n  isUpvoteActive: boolean;\n  isDownvoteActive: boolean;\n\n  constructor(\n    public transaction: TransactionService,\n    public account: AccountService,\n    public cd: ChangeDetectorRef,\n    private reactionFacade: MyPostReactionFacade,\n    public signIn: SignInModalService\n  ) {\n    super(transaction, account, signIn, cd);\n  }\n\n  ngOnInit(): void {\n    this.account.currentAccount$\n      .pipe(\n        filter((account) => !!account),\n        mergeMap((account) =>\n          this.reactionFacade.getReactionByPostId(account!.id, this.postId)\n        )\n      )\n      .subscribe((reaction) => {\n        this.reaction = reaction;\n        this.isDownvoteActive = reaction?.kind === 'Downvote';\n        this.isUpvoteActive = reaction?.kind === 'Upvote';\n        this.updateInitialState();\n        this.cd.markForCheck();\n      });\n  }\n\n  async onVoteClick(kind: KIND) {\n    await this.switchHandler(kind);\n  }\n\n  async switchHandler(kind: KIND) {\n    const operationType: OperationType = {};\n    kind === KIND.UPVOTE\n      ? (this.isUpvoteActive = !this.isUpvoteActive)\n      : (this.isDownvoteActive = !this.isDownvoteActive);\n\n    operationType.delete =\n      kind === KIND.UPVOTE ? !this.isUpvoteActive : !this.isDownvoteActive;\n\n    if (kind === KIND.UPVOTE) {\n      if (this.isDownvoteActive) {\n        this.downvoteCount =\n          this.downvoteCount > 0 ? --this.downvoteCount : this.downvoteCount;\n        operationType.update = true;\n      }\n\n      this.upvoteCount = this.isUpvoteActive\n        ? ++this.upvoteCount\n        : --this.upvoteCount;\n    } else {\n      if (this.isUpvoteActive) {\n        this.upvoteCount =\n          this.upvoteCount > 0 ? --this.upvoteCount : this.upvoteCount;\n        operationType.update = true;\n      }\n\n      this.downvoteCount = this.isDownvoteActive\n        ? ++this.downvoteCount\n        : --this.downvoteCount;\n    }\n\n    kind === KIND.UPVOTE\n      ? (this.isDownvoteActive = false)\n      : (this.isUpvoteActive = false);\n\n    await this.prepareAndDoTransaction(kind, operationType);\n  }\n\n  async prepareAndDoTransaction(kind: KIND, operationType: OperationType) {\n    const props = this.getExtrinsicProps(kind, operationType);\n    await this.initExtrinsic(props);\n    await this.sentTransaction();\n  }\n\n  onFailed(result: SubmittableResult | null): void {\n    this.returnToInitialState();\n  }\n\n  onSuccess(result: SubmittableResult): void {\n    const ids = this.getNewIdsFromEvent(result);\n    if (ids.length > 0) {\n      this.reactionFacade.loadMyPostReactionIds(ids);\n    }\n  }\n\n  validate(): boolean {\n    return true;\n  }\n\n  private getExtrinsicProps(kind: KIND, type: OperationType): ExtrinsicProps {\n    let method = '';\n    let params: string[];\n\n    if (this.reaction?.reactionId && type.delete) {\n      method = METHODS.deletePostReaction;\n      params = [this.postId, this.reaction?.reactionId];\n    } else if (this.reaction?.reactionId && type.update) {\n      method = METHODS.updatePostReaction;\n      params = [this.postId, this.reaction?.reactionId, kind];\n    } else {\n      method = METHODS.createPostReaction;\n      params = [this.postId, kind];\n    }\n\n    return {\n      pallet: PALLETS.reactions,\n      method,\n      params,\n    };\n  }\n\n  private returnToInitialState() {\n    this.upvoteCount = this.initialVoteStatus.upvoteCount;\n    this.downvoteCount = this.initialVoteStatus.downvoteCount;\n    this.isUpvoteActive = !!this.initialVoteStatus.isUpvoteActive;\n    this.isDownvoteActive = !!this.initialVoteStatus.isDownvoteActive;\n  }\n\n  private updateInitialState() {\n    this.initialVoteStatus = {\n      upvoteCount: this.upvoteCount,\n      downvoteCount: this.downvoteCount,\n      isUpvoteActive: this.isUpvoteActive,\n      isDownvoteActive: this.isDownvoteActive,\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".center {\r\n  display: flex;\r\n  padding: 0 60px;\r\n\r\n  &>*{\r\n    flex: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n.left {\r\n  display: flex;\r\n  padding: 3px 0;\r\n  margin-left: 12px;\r\n  width: 342px;\r\n\r\n  &>*{\r\n    display: flex;\r\n    justify-content: center;\r\n    padding-right: 12px;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .center {\r\n    display: flex;\r\n    padding: 3px 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./action-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reactionFacade",
                        "type": "MyPostReactionFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reactionFacade",
                        "type": "MyPostReactionFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [ngClass]=\"position\">\r\n  <app-upvote-button [isActive]=\"!!isUpvoteActive\"\r\n                     [isShowLabel]=\"isShowLabel\"\r\n                     [count]=\"upvoteCount\"\r\n                     (voteClick)=\"onVoteClick(KIND.UPVOTE)\"\r\n  ></app-upvote-button>\r\n\r\n  <app-downvote-button [isActive]=\"!!isDownvoteActive\"\r\n                       [count]=\"downvoteCount\"\r\n                       [isShowLabel]=\"isShowLabel\"\r\n                       (voteClick)=\"onVoteClick(KIND.DOWNVOTE)\"\r\n  ></app-downvote-button>\r\n\r\n  <app-comment-button *ngIf=\"isShowComment\"\r\n                      [count]=\"commentCount\"\r\n                      (onClick)=\"commentClick.emit()\"\r\n  ></app-comment-button>\r\n\r\n  <app-shared-button *ngIf=\"isShowShare\"\r\n                     [isShowLabel]=\"isShowLabel\"\r\n                     (click)=\"shareClick.emit()\"\r\n  ></app-shared-button>\r\n\r\n  <app-reply-button *ngIf=\"isShowReply\"\r\n                    (click)=\"replyClick.emit()\"\r\n                    [isShowLabel]=\"isShowLabel\"\r\n  ></app-reply-button>\r\n</div>\r\n"
        },
        {
            "name": "AdblockConflictModalDialogComponent",
            "id": "component-AdblockConflictModalDialogComponent-0ec2452c6743afc0b205f4f170f9ae03",
            "file": "src/app/ui-lib/modal-dialogs/adblock-conflict-modal-dialog/adblock-conflict-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-adblock-conflict-modal-dialog",
            "styleUrls": [
                "./adblock-conflict-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./adblock-conflict-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "reload",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-adblock-conflict-modal-dialog',\n  templateUrl: './adblock-conflict-modal-dialog.component.html',\n  styleUrls: ['./adblock-conflict-modal-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdblockConflictModalDialogComponent {\n  reload() {\n    window.location.reload();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n\r\napp-column {\r\n  padding: 24px;\r\n  &>*:not(:last-child) {\r\n    margin-bottom: $space_normal;\r\n  }\r\n}\r\n\r\np {\r\n  text-align: center;\r\n  margin-block-start: 0;\r\n  margin-block-end: 0;\r\n}\r\n\r\nbutton {\r\n\r\n}\r\n",
                    "styleUrl": "./adblock-conflict-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-column [v]=\"'center'\" [h]=\"'space-between'\" *transloco=\"let t; read: 'modals.adblock'\">\r\n\r\n  <img width=\"180\"\r\n       height=\"40\"\r\n       src=\"assets/subsocial-logo.png\"\r\n       alt=\"subsocial-logo\"\r\n  >\r\n\r\n  <p class=\"title-large\">{{ t('title')}}</p>\r\n\r\n  <p>{{ t('subtitle')}}</p>\r\n\r\n  <button (click)=\"reload()\"\r\n          class=\"w100 normal\"\r\n          mat-flat-button\r\n          color=\"primary\">\r\n    {{ t('button')}}\r\n  </button>\r\n\r\n</app-column>\r\n"
        },
        {
            "name": "AdblockDetectComponent",
            "id": "component-AdblockDetectComponent-03e49abd1278e4ee754bfa0e1e99062a",
            "file": "src/app/shared/components/adblock-detect/adblock-detect.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-adblock-detect",
            "styleUrls": [
                "./adblock-detect.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./adblock-detect.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AdblockConflictModalDialogComponent } from '../../../ui-lib/modal-dialogs/adblock-conflict-modal-dialog/adblock-conflict-modal-dialog.component';\n\n@Component({\n  selector: 'app-adblock-detect',\n  templateUrl: './adblock-detect.component.html',\n  styleUrls: ['./adblock-detect.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdblockDetectComponent implements OnInit, AfterViewInit {\n  constructor(\n    @Inject(DOCUMENT) private doc: any,\n    private renderer: Renderer2,\n    private el: ElementRef,\n    public dialog: MatDialog,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      const fakeAd = this.renderer.createElement('div');\n      this.renderer.addClass(fakeAd, 'banner_ads');\n      this.renderer.setStyle(fakeAd, 'height', '1px');\n      this.renderer.appendChild(this.doc.body, fakeAd);\n\n      if (fakeAd.offsetHeight === 0) {\n        this.dialog.open(AdblockConflictModalDialogComponent, {\n          // disableClose: true,\n          minHeight: '300px',\n          width: '432px',\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./adblock-detect.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "doc",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "doc",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "\n"
        },
        {
            "name": "AddressComponent",
            "id": "component-AddressComponent-440d3f5c0bf9aa24822eba2e800dc7bb",
            "file": "src/app/ui-lib/address/address.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-address",
            "styleUrls": [
                "./address.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "addressLength",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "iconMargin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "showCopyButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "showIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"small\" | \"medium\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCopy",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { SnackBarService } from '../../shared/services/snack-bar.service';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\n\r\n@Component({\r\n  selector: 'app-address',\r\n  templateUrl: './address.component.html',\r\n  styleUrls: ['./address.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddressComponent {\r\n  @Input() address = '';\r\n  @Input() iconMargin = '';\r\n  @Input() showIcon = false;\r\n  @Input() addressLength = 12;\r\n  @Input() showCopyButton = false;\r\n  @Input() size: 'small' | 'medium' = 'small';\r\n\r\n  constructor(\r\n    private snackBar: SnackBarService,\r\n    private transloco: TranslocoService\r\n  ) {}\r\n\r\n  onCopy(event: any) {\r\n    event.stopPropagation();\r\n    this.snackBar.openSimpleSnackBar({\r\n      message: this.transloco.translate('snackbars.addressCopied'),\r\n      iconName: 'info-icon',\r\n      duration: 1500,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n:host {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: fit-content;\r\n}\r\n\r\nmat-icon {\r\n  margin-right: 6px;\r\n  width: 20px;\r\n}\r\n\r\n.address-text {\r\n  line-height: 20px;\r\n  letter-spacing: 0.25px;\r\n}\r\n\r\n.small {\r\n  font-size: $font_small;\r\n  color: rgba(0, 0, 0, 0.38);\r\n}\r\n\r\n.medium {\r\n  font-size: $font_normal;\r\n}\r\n\r\n.large {\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n}\r\n\r\n.copy-button {\r\n  position: absolute;\r\n  animation: fadeInFromNone 0.5s ease-out;\r\n}\r\n\r\n.small-button {\r\n  top: -6px;\r\n  right: -35px;\r\n}\r\n\r\n.medium-button {\r\n  top: -2px;\r\n  right: -43px;\r\n}\r\n\r\n.show-button {\r\n  display: block;\r\n}\r\n\r\n",
                    "styleUrl": "./address.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-icon  *ngIf=\"showIcon\"\r\n           [style.margin]=\"iconMargin\"\r\n           svgIcon=\"purse-icon\"\r\n></mat-icon>\r\n\r\n<span\r\n  class=\"address-text\"\r\n  [ngClass]=\"size\">\r\n  {{address | addressHidden: addressLength}}\r\n</span>\r\n\r\n<app-icon-button *ngIf=\"showCopyButton\"\r\n                 (click)=\"onCopy($event)\"\r\n                 [iconName]=\"'copy-icon'\"\r\n                 [cdkCopyToClipboard]=\"address\"\r\n                 [ngClass]=\"['copy-button', size + '-button']\"\r\n></app-icon-button>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4991c3b96c14e5fb67ef2ae59553df24",
            "file": "src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getAccountAdditionalData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "setLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { DeviceService } from './shared/services/device.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { SubsocialApiService } from './shared/services/subsocial-api.service';\nimport { AppState } from './state/state';\nimport { Store } from '@ngrx/store';\nimport { SpaceService } from './space/services/space.service';\nimport { AccountService } from './shared/services/account.service';\nimport { filter, map, takeUntil, tap } from 'rxjs/operators';\nimport { getFollowedSpaceIds } from './state/followed-space-ids/followed-space-ids.actions';\nimport { Subject } from 'rxjs';\nimport { getFollowedAccountIds } from './state/followed-account-ids/followed-account-ids.actions';\nimport { MyPostReactionFacade } from './state/my-post-reactions/my-post-reaction.facade';\nimport { TranslocoService } from '@ngneat/transloco';\nimport { StorageService } from './shared/services/storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  private unsubscribe$: Subject<void> = new Subject();\n\n  constructor(\n    private route: ActivatedRoute,\n    private store: Store<AppState>,\n    private api: SubsocialApiService,\n    private spaceService: SpaceService,\n    private transloco: TranslocoService,\n    private deviceService: DeviceService,\n    private storageService: StorageService,\n    private accountService: AccountService,\n    private reactionFacade: MyPostReactionFacade,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (isPlatformBrowser(this.platformId)) {\n      this.deviceService.init();\n      await this.accountService.initAccount();\n      this.getAccountAdditionalData();\n      this.setLanguage();\n    }\n  }\n\n  getAccountAdditionalData() {\n    this.accountService.currentAccount$\n      .pipe(\n        tap(() => this.spaceService.getMyOwnSpaceIds()),\n        filter((account) => !!account?.id),\n        map((account) => account?.id!),\n        tap((address: string) =>\n          this.store.dispatch(getFollowedSpaceIds({ payload: { address } }))\n        ),\n        tap((address: string) =>\n          this.store.dispatch(getFollowedAccountIds({ payload: { address } }))\n        ),\n        tap((_) => this.reactionFacade.reloadReactionForAllPosts()),\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe((_) => null);\n  }\n\n  setLanguage() {\n    const savedLang = this.storageService.getLang();\n    savedLang && this.transloco.setActiveLang(savedLang);\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "main{\r\n  display: flex;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reactionFacade",
                        "type": "MyPostReactionFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reactionFacade",
                        "type": "MyPostReactionFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-header ></app-header>\r\n<app-account-sidenav></app-account-sidenav>\r\n\r\n<div class=\"container scroll-container\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<app-adblock-detect></app-adblock-detect>\r\n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-7686c582d933d6d986be33d8e7cf04de",
            "file": "src/app/ui-lib/avatar/avatar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alignItem",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "\"center\" | \"start\""
                },
                {
                    "name": "jdentityValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string | undefined"
                },
                {
                    "name": "size",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showJdentity",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "onImgError",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Inject,\n  Input,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'app-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AvatarComponent {\n  @Input() size = 40;\n  @Input() jdentityValue = '';\n  @Input() name: string | undefined;\n  @Input() set src(value: string | undefined | null) {\n    this.showJdentity = !value && isPlatformBrowser(this.platformId);\n    this.url = environment.ipfsUrl + value;\n  }\n\n  @HostBinding('style.align-items') @Input() alignItem: 'center' | 'start' =\n    'center';\n\n  url = '';\n  showJdentity = false;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  onImgError($event: any) {\n    this.showJdentity = isPlatformBrowser(this.platformId);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n\r\nimg {\r\n  border-radius: 50%;\r\n}\r\n\r\ndiv {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 1px solid #ddd;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "src": {
                    "name": "src",
                    "setSignature": {
                        "name": "src",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | undefined | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | undefined | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<img *ngIf=\"!showJdentity\"\r\n     width=\"{{size}}\"\r\n     height=\"{{size}}\"\r\n     (error)=\"onImgError($event)\"\r\n     src=\"{{url}}\"\r\n>\r\n\r\n<div *ngIf=\"showJdentity\" [style.width]=\"size + 'px'\" [style.height]=\"size + 'px'\" >\r\n\r\n  <svg width=\"{{size}}\"\r\n       height=\"{{size}}\"\r\n       [data-jdenticon-value]=\"jdentityValue\"\r\n  ></svg>\r\n\r\n</div>\r\n\r\n"
        },
        {
            "name": "BaseControlValueAccessorComponent",
            "id": "component-BaseControlValueAccessorComponent-482f541647a311a670482a91d4156dc4",
            "file": "src/app/core/base-component/base-value-accessor.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { KeyValuePair } from '../models/key-value-pair.model';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  template: '',\n  animations: [\n    trigger('errorsAnimations', [\n      transition(':enter', [\n        style({ top: '-20px', opacity: 0 }),\n        animate('150ms', style({ top: '0', opacity: 1 })),\n      ]),\n      transition(':leave', [\n        style({ top: '0', opacity: 1 }),\n        animate('150ms', style({ top: '-20px', opacity: 0 })),\n      ]),\n    ]),\n  ],\n})\nexport class BaseControlValueAccessorComponent implements ControlValueAccessor {\n  @Input() error: string = '';\n  @Output() blur = new EventEmitter();\n\n  onChange: any = () => {};\n  onTouch: any = () => {};\n  protected _value: string | string[] = '';\n\n  set value(val: string | string[]) {\n    this._value = val;\n    this.onChange(this._value);\n    this.onTouch(this._value);\n  }\n\n  get value(): string | string[] {\n    return this._value;\n  }\n\n  constructor() {}\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  writeValue(obj: any): void {\n    this.value = obj;\n    this.onBlur();\n  }\n\n  onBlur() {\n    this.onTouch();\n    this.blur.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | []",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "BaseInfinityScrollComponent",
            "id": "component-BaseInfinityScrollComponent-1343775885748e56a90b285e6638e3b2",
            "file": "src/app/core/base-component/base-infinity-scroll.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string[] | null"
                },
                {
                    "name": "showHiddenContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean | null"
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"public\" | \"all\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "idsSet",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUniqueIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { ScrollProps } from '../classes/scroll-props.class';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { HasId } from '@subsocial/api/flat-subsocial/flatteners';\r\nimport { AppState } from '../../state/state';\r\nimport { Store } from '@ngrx/store';\r\nimport { delay, filter, map, switchMap, tap } from 'rxjs/operators';\r\nimport { Actions } from '@ngrx/effects';\r\n\r\n@Component({\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BaseInfinityScrollComponent<T extends HasId> implements OnDestroy {\r\n  @Input() ids: string[] | null;\r\n  @Input() type: 'public' | 'all' = 'public';\r\n  @Input() showHiddenContent: boolean | null;\r\n\r\n  public items$: Observable<T[]>;\r\n  public scrollDistance = 1;\r\n  public scrollProps = new ScrollProps(20);\r\n  public isBlockInfinityScroll = false;\r\n  public isLoading: boolean;\r\n\r\n  private idsSet = new Set<string>();\r\n\r\n  private scrollDownEventSource = new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  );\r\n\r\n  scrollDownEvent$ = this.scrollDownEventSource.asObservable();\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    public store: Store<AppState>,\r\n    public cd: ChangeDetectorRef,\r\n    public action$: Actions\r\n  ) {}\r\n\r\n  onScrollDown() {\r\n    if (!this.isBlockInfinityScroll) {\r\n      this.scrollProps.next();\r\n      this.scrollDownEventSource.next(this.scrollProps);\r\n    }\r\n  }\r\n\r\n  getScrollableData(dispatchAction: Function, selector: Function) {\r\n    if (!this.ids || this.ids?.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.scrollProps.max = this.ids.length;\r\n\r\n    this.items$ = this.scrollDownEvent$.pipe(\r\n      filter((props) => !props.isFinish),\r\n      tap((_) => this.loadStart()),\r\n      map((props) => this.sliceIds(this.ids!, props)),\r\n      tap((slicedIds) =>\r\n        this.store.dispatch(\r\n          dispatchAction({ payload: { ids: slicedIds, type: this.type } })\r\n        )\r\n      ),\r\n      map((ids) => this.getUniqueIds(ids)),\r\n      switchMap((ids) => this.store.select(selector(ids)).pipe(delay(300))),\r\n      filter((items) => items.length > 0),\r\n      tap((_) => this.loadFinish())\r\n    );\r\n  }\r\n\r\n  getUniqueIds(ids: string[]) {\r\n    ids.forEach((id) => this.idsSet.add(id));\r\n    return Array.from(this.idsSet);\r\n  }\r\n\r\n  trackById(index: number, item: T) {\r\n    return item.id;\r\n  }\r\n\r\n  private sliceIds(arr: Array<string>, props: ScrollProps): string[] {\r\n    return arr.slice(props.startIndex, props.endIndex).map((e) => e.toString());\r\n  }\r\n\r\n  private loadStart() {\r\n    this.isLoading = true;\r\n    this.isBlockInfinityScroll = true;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  private loadFinish() {\r\n    this.isLoading = false;\r\n    this.isBlockInfinityScroll = false;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$?.next();\r\n    this.unsubscribe$?.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "BaseTxComponent",
            "id": "component-BaseTxComponent-fa48c839ce65ce802e9742df0410c99b",
            "file": "src/app/core/base-component/base-tx.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n} from '@angular/core';\nimport { TransactionService } from '../../shared/services/transaction.service';\nimport { AccountService } from '../../shared/services/account.service';\nimport { skipWhile, take } from 'rxjs/operators';\nimport { SubmittableResult } from '@polkadot/api';\nimport { CommonContent, IpfsCid } from '@subsocial/types';\nimport { SignInModalService } from '../../ui-lib/modal-dialogs/services/sign-in-modal.service';\n\nexport type ExtrinsicProps = {\n  pallet: string;\n  method: string;\n  params: string[] | any[];\n};\n\n@Component({\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport abstract class BaseTxComponent {\n  extrinsic: any;\n  signer: any;\n  accountId: string | undefined;\n  txUnsub: Function;\n  isSending: boolean = false;\n  isAuthRequired: boolean = true;\n  isFreeTx: boolean = false;\n  contentCid: IpfsCid | undefined;\n\n  abstract onSuccess(result: SubmittableResult): void;\n  abstract onFailed(result: SubmittableResult | null): void;\n  abstract validate(): boolean;\n\n  protected constructor(\n    public transactionService: TransactionService,\n    public accountService: AccountService,\n    public signIn: SignInModalService,\n    public cd: ChangeDetectorRef\n  ) {}\n\n  protected async initExtrinsic(props: ExtrinsicProps) {\n    this.accountService.signer$\n      .pipe(\n        skipWhile((sinner) => sinner === null),\n        take(1)\n      )\n      .subscribe((sinner) => (this.signer = sinner));\n\n    this.accountService.currentAccount$\n      .pipe(skipWhile((account) => account === null))\n      .subscribe((account) => (this.accountId = account?.id));\n\n    this.extrinsic = await this.transactionService.getExtrinsic(props);\n  }\n\n  doOnSuccess(result: SubmittableResult) {\n    this.onSuccess(result);\n  }\n\n  async doOnFailed(result: SubmittableResult | null) {\n    console.error(result);\n    this.onFailed(result);\n    await this.clear();\n    this.setIsSending(false);\n  }\n\n  async sentTransaction() {\n    this.unsubscribe();\n\n    if (!this.validate()) {\n      console.warn('Cannot send a tx because validate() returned false');\n      return;\n    }\n\n    const txType = this.accountId ? 'signed' : 'unsigned';\n    console.debug(`Sending ${txType} tx...`);\n\n    this.setIsSending(true);\n\n    if (txType === 'unsigned') {\n      if (this.isAuthRequired && !this.isFreeTx) {\n        await this.signIn.openModal(true);\n        return this.setIsSending(false);\n      }\n      await this.sendUnsignedTx();\n    } else {\n      await this.sendSignedTx();\n    }\n  }\n\n  async onSuccessHandler(result: SubmittableResult) {\n    if (!result || !result.status) {\n      return;\n    }\n\n    const { status } = result;\n    if (status.isFinalized || status.isInBlock) {\n      this.setIsSending(false);\n      this.unsubscribe();\n\n      const blockHash = status.isFinalized\n        ? status.asFinalized\n        : status.asInBlock;\n\n      console.warn(`✅ Tx finalized. Block hash: ${blockHash.toString()}`);\n\n      result.events\n        .filter(({ event: { section } }): boolean => section === 'system')\n        .forEach(({ event: { method } }): void => {\n          if (method === 'ExtrinsicSuccess') {\n            this.doOnSuccess(result);\n          } else if (method === 'ExtrinsicFailed') {\n            this.doOnFailed(result);\n          }\n        });\n    } else if (result.isError) {\n      await this.doOnFailed(result);\n    } else {\n      console.warn(`⏱ Current tx status: ${status.type}`);\n    }\n  }\n\n  async onFailedHandler(err: Error) {\n    if (err) {\n      const errMsg = `Tx failed: ${err.toString()}`;\n      console.warn(`❌ ${errMsg}`);\n      this.transactionService.showErrorMessage(errMsg);\n    }\n\n    await this.doOnFailed(null);\n  }\n\n  async sendSignedTx() {\n    if (!this.accountId) {\n      throw new Error('No account id provided');\n    }\n\n    if (!this.signer) {\n      throw new Error('No signer provided');\n    }\n\n    try {\n      const tx = await this.extrinsic.signAsync(this.accountId, {\n        signer: this.signer,\n      });\n      this.txUnsub = await tx.send(this.onSuccessHandler.bind(this));\n      this.transactionService.showWaitMessage();\n    } catch (err: any) {\n      await this.onFailedHandler(err);\n      console.error(err);\n    }\n  }\n\n  async sendUnsignedTx() {\n    try {\n      this.txUnsub = await this.extrinsic.send(\n        this.onSuccessHandler.bind(this)\n      );\n      this.transactionService.showWaitMessage();\n    } catch (err: any) {\n      await this.onFailedHandler(err);\n    }\n  }\n\n  async saveContent(content: CommonContent) {\n    return await this.transactionService.saveIpfsContent(content);\n  }\n\n  setIsSending(value: boolean) {\n    this.isSending = value;\n    this.cd.markForCheck();\n  }\n\n  setIsAuthRequired(value: boolean) {\n    this.isAuthRequired = value;\n  }\n\n  setIsFreeTx(value: boolean) {\n    this.isFreeTx = value;\n  }\n\n  getNewIdsFromEvent(result: SubmittableResult) {\n    const newIds: string[] = [];\n\n    result.events.find((event) => {\n      const {\n        event: { data, method },\n      } = event;\n      if (method.indexOf('Created') >= 0) {\n        const [, /* owner */ ...ids] = data.toArray();\n        newIds.push(...(ids.map((id) => id.toString()) as string[]));\n        return true;\n      }\n      return false;\n    });\n\n    return newIds;\n  }\n\n  async clear() {\n    this.contentCid\n      ? await this.transactionService.removeContent(this.contentCid as string)\n      : null;\n  }\n\n  unsubscribe() {\n    if (this.txUnsub) {\n      this.transactionService.closeWaitMessage();\n      this.txUnsub();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transactionService",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "transactionService",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseVisibleTxComponent",
            "id": "component-BaseVisibleTxComponent-1a9ddd63f45d5314c366bdaa02e5b5a7",
            "file": "src/app/core/base-component/base-visible-tx.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "switchHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibilityService",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visibleOperationType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibleOperationType",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setupInitExtrinsic",
                    "args": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Output,\n} from '@angular/core';\nimport { BaseTxComponent } from './base-tx.component';\nimport { TransactionService } from '../../shared/services/transaction.service';\nimport { AccountService } from '../../shared/services/account.service';\nimport { SubmittableResult } from '@polkadot/api';\nimport { METHODS, PALLETS } from '../constants/query.const';\nimport { PostService } from '../../post/services/post.service';\nimport { SpaceService } from '../../space/services/space.service';\nimport { AppState } from '../../state/state';\nimport { Store } from '@ngrx/store';\nimport { loadPostById } from '../../state/post/post.actions';\nimport { VisibilityService } from '../../shared/services/visibility.service';\nimport { SignInModalService } from '../../ui-lib/modal-dialogs/services/sign-in-modal.service';\n\ntype VisibleOperationType = 'post' | 'space';\n\n@Component({\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BaseVisibleTxComponent extends BaseTxComponent {\n  @Output() switchHidden = new EventEmitter();\n\n  visibleOperationType: VisibleOperationType;\n  entityId: string;\n\n  get isPost() {\n    return this.visibleOperationType === 'post';\n  }\n\n  constructor(\n    public transaction: TransactionService,\n    public account: AccountService,\n    public cd: ChangeDetectorRef,\n    public signIn: SignInModalService,\n    public visibility: VisibilityService\n  ) {\n    super(transaction, account, signIn, cd);\n  }\n\n  onFailed(result: SubmittableResult | null): void {}\n\n  async onSuccess(result: SubmittableResult) {\n    if (this.visibleOperationType === 'post') {\n      this.visibility.switchPostVisibility(this.entityId);\n    } else if (this.visibleOperationType === 'space') {\n      this.visibility.switchSpaceVisibility(this.entityId);\n    }\n\n    this.switchHidden.emit();\n  }\n\n  validate(): boolean {\n    return true;\n  }\n\n  async hide() {\n    await this.setupInitExtrinsic(true);\n    await this.sentTransaction();\n  }\n\n  async show() {\n    await this.setupInitExtrinsic(false);\n    await this.sentTransaction();\n  }\n\n  private async setupInitExtrinsic(hidden: boolean) {\n    const pallet = this.isPost ? PALLETS.posts : PALLETS.spaces;\n    const method = this.isPost ? METHODS.updatePost : METHODS.updateSpace;\n\n    let update: any;\n\n    if (this.isPost) {\n      update = {\n        spaceId: null,\n        content: null,\n        hidden,\n      };\n    } else {\n      update = {\n        handle: null,\n        content: null,\n        hidden,\n        permissions: null,\n      };\n    }\n\n    const params = [this.entityId, update];\n\n    await this.initExtrinsic({ pallet, params, method });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "accessors": {
                "isPost": {
                    "name": "isPost",
                    "getSignature": {
                        "name": "isPost",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "BoxComponent",
            "id": "component-BoxComponent-f7464438e3ade474bedc36a8165543fd",
            "file": "src/app/core/base-component/box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": ""
                },
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.margin'"
                        }
                    ]
                },
                {
                    "name": "_padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.padding'"
                        }
                    ]
                },
                {
                    "name": "alignItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.align-items'"
                        }
                    ]
                },
                {
                    "name": "flex",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ]
                },
                {
                    "name": "justifyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.justify-content'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.align-items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined"
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "style.justify-content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | undefined"
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | undefined"
                },
                {
                    "name": "style.padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string | undefined"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\ntype AlignType = 'start' | 'end' | 'center' | 'normal' | 'space-between';\r\n\r\n@Component({\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BoxComponent {\r\n  @Input() set v(value: AlignType) {\r\n    this.alignItem = value;\r\n  }\r\n\r\n  @Input() set h(value: AlignType) {\r\n    this.justifyContent = value;\r\n  }\r\n\r\n  @Input() set margin(value: string) {\r\n    this._margin = value;\r\n  }\r\n\r\n  @Input() set padding(value: string) {\r\n    this._padding = value;\r\n  }\r\n\r\n  @HostBinding('style.align-items') alignItem: string | undefined;\r\n  @HostBinding('style.justify-content') justifyContent: string | undefined;\r\n  @HostBinding('style.margin') _margin: string | undefined;\r\n  @HostBinding('style.padding') _padding: string | undefined;\r\n  @HostBinding('style.display') flex = 'flex';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "v": {
                    "name": "v",
                    "setSignature": {
                        "name": "v",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "h": {
                    "name": "h",
                    "setSignature": {
                        "name": "h",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "AlignType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "margin": {
                    "name": "margin",
                    "setSignature": {
                        "name": "margin",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "padding": {
                    "name": "padding",
                    "setSignature": {
                        "name": "padding",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ChooseSpaceModalDialogComponent",
            "id": "component-ChooseSpaceModalDialogComponent-3de8c43bd0e888fbf073bc08115658c6",
            "file": "src/app/ui-lib/modal-dialogs/choose-space-modal-dialog/choose-space-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-choose-space-modal-dialog",
            "styleUrls": [
                "./choose-space-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./choose-space-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChooseSpaceModalData",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ChooseSpaceModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "spaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceListItemData[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  OnInit,\n} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SpaceListItemData } from '../../../core/models/space/space-list-item.model';\nimport { SpaceService } from '../../../space/services/space.service';\n\nexport type ChooseSpaceModalData = {\n  ids: string[];\n};\n\n@Component({\n  selector: 'app-choose-space-modal-dialog',\n  templateUrl: './choose-space-modal-dialog.component.html',\n  styleUrls: ['./choose-space-modal-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChooseSpaceModalDialogComponent implements OnInit {\n  spaces: SpaceListItemData[];\n\n  constructor(\n    public dialogRef: MatDialogRef<ChooseSpaceModalDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: ChooseSpaceModalData,\n    private spaceService: SpaceService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  async ngOnInit() {\n    this.spaces = await this.spaceService.getOrLoadSpacesByIds(this.data.ids);\n    this.cd.markForCheck();\n  }\n\n  onClick(id: string) {\n    this.dialogRef.close(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/app/shared/styles/var\";\r\n\r\n.space-list {\r\n  margin: 6px 16px 16px;\r\n\r\n  li {\r\n    border-bottom: 1px solid $color_border_list;\r\n    padding: 11px 0;\r\n    cursor: pointer;\r\n\r\n    app-avatar {\r\n      margin-right: $space_normal;\r\n      margin-left: $space_tiny;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: $hover_color_light;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n.modal-body-spaces {\r\n  max-height: 550px;\r\n  margin-bottom: -16px;\r\n}\r\n",
                    "styleUrl": "./choose-space-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ChooseSpaceModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "ChooseSpaceModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ChooseSpaceModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ChooseSpaceModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\n  <div class=\"modal-header\">\n    <h2 class=\"title-medium\">{{ 'forms.titles.chooseSpace' | transloco }}</h2>\n    <app-close-button (onClose)=\"dialogRef.close()\"></app-close-button>\n  </div>\n  <div class=\"modal-body-spaces\">\n    <ul class=\"space-list\">\n      <li *ngFor=\"let space of spaces\" >\n        <app-row (click)=\"onClick(space.struct.id)\"\n                 [v]=\"'center'\"\n        >\n          <app-avatar [src]=\"space.content.image\"></app-avatar>\n          <span class=\"title-small\">{{space.content.name}}</span>\n        </app-row>\n      </li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "CloseButtonComponent",
            "id": "component-CloseButtonComponent-d9d06ae2e144832e52328e62dc080467",
            "file": "src/app/ui-lib/buttons/close-button/close-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-close-button",
            "styleUrls": [
                "./close-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./close-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-close-button',\r\n  templateUrl: './close-button.component.html',\r\n  styleUrls: ['./close-button.component.scss'],\r\n})\r\nexport class CloseButtonComponent implements OnInit {\r\n  @Output() onClose = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./close-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-icon-button [iconName]=\"'close-icon'\"\r\n                 (click)=\"onClose.emit()\"\r\n></app-icon-button>\r\n"
        },
        {
            "name": "ColumnComponent",
            "id": "component-ColumnComponent-1d5f4f25015808f4a536ee2dd7df5257",
            "file": "src/app/ui-lib/containers/column/column.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-column",
            "styleUrls": [
                "./column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.margin'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "_padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.padding'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "alignItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.align-items'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "flex",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "justifyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.justify-content'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.align-items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.justify-content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { BoxComponent } from '../../../core/base-component/box.component';\r\n\r\n@Component({\r\n  selector: 'app-column',\r\n  templateUrl: './column.component.html',\r\n  styleUrls: ['./column.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ColumnComponent extends BoxComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n",
                    "styleUrl": "./column.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BoxComponent",
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "CommentButtonComponent",
            "id": "component-CommentButtonComponent-db02e679b6bcc1a51a1bc91cb90b35c2",
            "file": "src/app/ui-lib/buttons/comment-button/comment-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-button",
            "styleUrls": [
                "./comment-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-comment-button',\r\n  templateUrl: './comment-button.component.html',\r\n  styleUrls: ['./comment-button.component.scss'],\r\n})\r\nexport class CommentButtonComponent implements OnInit {\r\n  @Output() onClick = new EventEmitter();\r\n  @Input() count: number;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./comment-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-icon-button [buttonSize]=\"32\"\r\n                 [iconSize]=\"22\"\r\n                 [iconName]=\"'comment-icon'\"\r\n                 (click)=\"onClick.emit()\"\r\n></app-icon-button>\r\n\r\n<span [ngClass]=\"['action-panel-label']\"\r\n      *ngIf=\"count > 0\"\r\n>{{ count }}</span>\r\n"
        },
        {
            "name": "CommentInputComponent",
            "id": "component-CommentInputComponent-3dda2a2fa9bd815ab736d704526fd2fe",
            "file": "src/app/ui-lib/comment/comment-input/comment-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CommentInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-comment-input",
            "styleUrls": [
                "./comment-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autofocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean"
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "Post | undefined"
                },
                {
                    "name": "isReply",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean"
                },
                {
                    "name": "parentPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string | undefined"
                },
                {
                    "name": "rootPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "\"edit\" | \"create\""
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                },
                {
                    "name": "sendSuccess",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "AVATAR_SIZE",
                    "defaultValue": "AVATAR_SIZE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "avatar$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "commentForm",
                    "defaultValue": "new FormControl('', { validators: Validators.required })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "disabledButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "mdeComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MdeEditorComponent",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MdeEditorComponent"
                        }
                    ]
                },
                {
                    "name": "showSendButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelComment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDisableSendButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocusOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendComments",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { AccountService } from '../../../shared/services/account.service';\nimport { Observable, Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { AVATAR_SIZE } from '../../../core/constants/size.const';\nimport { BaseTxComponent } from '../../../core/base-component/base-tx.component';\nimport { TransactionService } from '../../../shared/services/transaction.service';\nimport { SubmittableResult } from '@polkadot/api';\nimport { FORM_STATUS } from '../../../core/enums/common';\nimport { METHODS, PALLETS } from '../../../core/constants/query.const';\nimport { PostService } from '../../../post/services/post.service';\nimport { MdeEditorComponent } from '../../input/mde-editor/mde-editor.component';\nimport { Post } from '../../../core/models/post/post-list-item.model';\nimport { PostFacade } from '../../../state/post/post.facade';\nimport { ReplyFacade } from '../../../state/reply-id/reply.facade';\nimport { Update } from '@ngrx/entity';\nimport { SignInModalService } from '../../modal-dialogs/services/sign-in-modal.service';\n\n@Component({\n  selector: 'app-comment-input',\n  templateUrl: './comment-input.component.html',\n  styleUrls: ['./comment-input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CommentInputComponent),\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CommentInputComponent extends BaseTxComponent implements OnInit {\n  @Input() parentPostId: string | undefined;\n  @Input() rootPostId: string;\n  @Input() comment: Post | undefined;\n  @Input() type: 'edit' | 'create' = 'create';\n  @Input() autofocus: boolean;\n  @Input() isReply: boolean;\n  @Output() sendSuccess = new EventEmitter();\n  @Output() cancel = new EventEmitter();\n\n  @ViewChild(MdeEditorComponent) mdeComponent: MdeEditorComponent;\n\n  showSendButton: boolean;\n  disabledButton: boolean = true;\n  avatar$: Observable<string | undefined>;\n  AVATAR_SIZE = AVATAR_SIZE;\n\n  get isEdit() {\n    return this.type === 'edit';\n  }\n\n  commentForm = new FormControl('', { validators: Validators.required });\n\n  private unsubscribe$: Subject<void> = new Subject();\n\n  constructor(\n    public transaction: TransactionService,\n    public account: AccountService,\n    public cd: ChangeDetectorRef,\n    private postService: PostService,\n    private replyFacade: ReplyFacade,\n    private postFacade: PostFacade,\n    public signIn: SignInModalService\n  ) {\n    super(transaction, account, signIn, cd);\n  }\n\n  ngOnInit(): void {\n    if (this.autofocus) {\n      this.showSendButton = true;\n    }\n\n    if (this.isEdit) {\n      this.commentForm.patchValue(this.comment?.body);\n    }\n\n    this.handleDisableSendButton();\n\n    this.avatar$ = this.accountService.currentAccount$.pipe(\n      map((account) => account?.avatar)\n    );\n  }\n\n  onFocus() {\n    this.showSendButton = true;\n    this.cd.markForCheck();\n  }\n\n  onFocusOut() {\n    this.showSendButton = this.commentForm.valid;\n    this.cd.markForCheck();\n  }\n\n  onFailed(result: SubmittableResult | null): void {}\n\n  async onSuccess(result: SubmittableResult) {\n    const ids = this.getNewIdsFromEvent(result);\n    const parentId = this.parentPostId || this.rootPostId;\n\n    if (!this.isEdit) {\n      this.postFacade.addNewCommentPost({ parentId, replyId: ids[0] });\n    } else {\n      const update: Update<Post> = {\n        id: this.comment?.id!,\n        changes: { body: this.commentForm.value },\n      };\n      this.postFacade.updatePost(update);\n      this.sendSuccess.emit();\n    }\n\n    this.commentForm.patchValue('');\n  }\n\n  validate(): boolean {\n    return this.commentForm.valid;\n  }\n\n  async sendComments() {\n    const pallet = PALLETS.posts;\n    const method = this.isEdit ? METHODS.updatePost : METHODS.createPost;\n\n    const body = this.commentForm.value;\n\n    this.contentCid = await this.saveContent({ body });\n\n    if (!this.contentCid) return;\n\n    const commentExt = {\n      Comment: {\n        parentId:\n          this.parentPostId !== this.rootPostId ? this.parentPostId : null,\n        rootPostId: this.rootPostId,\n      },\n    };\n\n    let params: any[];\n\n    if (this.isEdit) {\n      const update = {\n        spaceId: null,\n        content: {\n          IPFS: this.contentCid,\n        },\n        hidden: null,\n      };\n      params = [this.comment?.id, update];\n    } else {\n      params = [null, commentExt, { IPFS: this.contentCid }];\n    }\n\n    await this.initExtrinsic({ pallet, params, method });\n\n    await this.sentTransaction();\n  }\n\n  private handleDisableSendButton() {\n    let savedStatus: FORM_STATUS = FORM_STATUS.INVALID;\n    this.disabledButton = true;\n\n    this.commentForm.statusChanges\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((status) => {\n        if (savedStatus !== status) {\n          this.disabledButton = status === FORM_STATUS.INVALID;\n          this.cd.markForCheck();\n          savedStatus = status;\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    //check for storybook\n    if (typeof this.unsubscribe$ !== 'string') {\n      this.unsubscribe$?.next();\n      this.unsubscribe$?.complete();\n    }\n  }\n\n  cancelComment() {\n    this.cancel.emit();\n    this.commentForm.reset();\n    this.showSendButton = false;\n    this.mdeComponent.setInitView();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.comment-input-wp {\r\n  display: flex;\r\n  align-items: flex-start;\r\n}\r\n\r\n.input-wp {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 9px;\r\n  width: 100%;\r\n\r\n  .text-area-wp {\r\n    position: relative;\r\n\r\n    .text-area-input {\r\n      border: $shared_post_border;\r\n      border-radius: 3.5px;\r\n      padding: 7px 16px;\r\n      word-break: break-all;\r\n\r\n      &:hover, &:focus {\r\n        border: $border_primary;\r\n      }\r\n    }\r\n\r\n    .placeholder {\r\n      position: absolute;\r\n      top: 6px;\r\n      left: 16px;\r\n      font-size: 16px;\r\n      line-height: 24px;\r\n      letter-spacing: 0.25px;\r\n      color: $color_gray_dark;\r\n      pointer-events: none;\r\n    }\r\n  }\r\n\r\n  [contenteditable]:focus {\r\n    outline: 0px solid transparent;\r\n    border: 1px solid #bfbfbf;\r\n  }\r\n\r\n  .send-btn-wp {\r\n    display: flex;\r\n    gap: 16px;\r\n    margin-top: $space_normal;\r\n  }\r\n}\r\n",
                    "styleUrl": "./comment-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isEdit": {
                    "name": "isEdit",
                    "getSignature": {
                        "name": "isEdit",
                        "type": "",
                        "returnType": "",
                        "line": 61
                    }
                }
            },
            "templateData": "<div class=\"comment-input-wp\">\r\n  <div class=\"avatar-wp\">\r\n    <app-avatar [size]=\"AVATAR_SIZE.MINI\" [src]=\"avatar$ | async\"></app-avatar>\r\n  </div>\r\n\r\n  <div class=\"input-wp\" >\r\n    <div class=\"text-area-wp\" *transloco=\"let t; read: 'forms.placeholder'\">\r\n      <app-mde-editor [placeholder]=\"isReply ? t('addReply') : t('addComment')\"\r\n                      (focus)=\"onFocus()\"\r\n                      [formControl]=\"commentForm\"\r\n                      [autoFocus]=\"autofocus\"\r\n      ></app-mde-editor>\r\n    </div>\r\n    <ng-container *ngIf=\"autofocus || showSendButton\">\r\n      <div class=\"send-btn-wp\" *transloco=\"let t; read: 'buttons'\">\r\n        <app-tx-button   (click)=\"sendComments()\"\r\n                         [isDisabled]=\"disabledButton\"\r\n                         [isSending]=\"isSending\"\r\n                         [name]=\"type === 'edit' ? t('update') : t('send')\"\r\n        ></app-tx-button>\r\n\r\n        <button (click)=\"cancelComment()\" class=\"secondary-button\">\r\n          {{ t('cancel') }}\r\n        </button>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CommentItemComponent",
            "id": "component-CommentItemComponent-6bb11dfac02af182a54f9353e2c247fc",
            "file": "src/app/ui-lib/comment/comment-item/comment-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-item",
            "styleUrls": [
                "./comment-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Post"
                },
                {
                    "name": "isFirstLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "rootPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "device",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isShowReplyInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showCommentText",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditCommentSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenReactions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwitchHidden",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { DeviceService } from '../../../shared/services/device.service';\r\nimport { Post } from '../../../core/models/post/post-list-item.model';\r\nimport { PostFacade } from '../../../state/post/post.facade';\r\n\r\n@Component({\r\n  selector: 'app-comment-item',\r\n  templateUrl: './comment-item.component.html',\r\n  styleUrls: ['./comment-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CommentItemComponent implements OnInit {\r\n  @Input() rootPostId: string;\r\n  @Input() isFirstLevel: boolean;\r\n  @Input() comment: Post;\r\n\r\n  isShowReplyInput: boolean;\r\n  isEdit: boolean;\r\n  showCommentText: boolean = true;\r\n  hidden: boolean;\r\n\r\n  constructor(\r\n    public device: DeviceService,\r\n    private cd: ChangeDetectorRef,\r\n    private postFacade: PostFacade\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.hidden = this.comment.hidden;\r\n  }\r\n\r\n  onOpenReactions() {}\r\n\r\n  onEdit() {\r\n    this.isEdit = !this.isEdit;\r\n  }\r\n\r\n  onEditCommentSuccess() {\r\n    this.isEdit = false;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  onSwitchHidden() {\r\n    this.hidden = !this.hidden;\r\n    this.postFacade.loadPost(this.comment.id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 7px;\r\n}\r\n\r\napp-avatar {\r\n  margin-right: 8px;\r\n}\r\n\r\n.date {\r\n  color: #A0A0A0;\r\n}\r\n\r\n.dot {\r\n  padding: 0 4px 0;\r\n}\r\n\r\n.message {\r\n  background: #F2F2F2;\r\n  border-radius: 4px;\r\n}\r\n\r\n\r\n.message-wp {\r\n  width: inherit;\r\n}\r\n\r\napp-option-button {\r\n  padding-left: 7px;\r\n}\r\n\r\napp-reply-comments {\r\n  margin-left: 7px;\r\n}\r\n\r\napp-comment-input {\r\n  margin: 16px 0 16px;\r\n}\r\n\r\napp-comment-list {\r\n  margin-left: 43px;\r\n}\r\n",
                    "styleUrl": "./comment-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-column class=\"w100\">\n\n  <app-row class=\"w100\" [style.display]=\"isEdit ? 'none' : 'flex'\">\n\n    <app-avatar [size]=\"36\"\n                [src]=\"comment.ownerImageUrl\"\n                [jdentityValue]=\"comment.ownerId\"\n                [alignItem]=\"'start'\"\n    ></app-avatar>\n\n    <app-column class=\"message-wp\">\n\n      <app-column class=\"message\"\n                  [padding]=\"'8px 16px 11px 16px'\"\n      >\n\n        <app-hidden-content *ngIf=\"hidden\"\n                            [type]=\"'comment'\"\n                            [id]=\"comment.id\"\n                            (switchHidden)=\"onSwitchHidden()\"\n        ></app-hidden-content>\n\n        <app-row [v]=\"'center'\">\n\n          <app-title [text]=\"comment.ownerName || (comment.ownerId | addressHidden)\"\n                     [link]=\"'/accounts/' + comment.ownerId\"\n                     type=\"small\"\n          ></app-title>\n\n          <span class=\"dot\">·</span>\n\n          <span class=\"date\">{{comment.createdAtTime | day}}</span>\n\n          <app-comment-menu (onClickViewReaction)=\"onOpenReactions()\"\n                            (switchHidden)=\"onSwitchHidden()\"\n                            (edit)=\"onEdit()\"\n                            [comment]=\"comment\"\n                            [isHidden]=\"hidden\"\n          ></app-comment-menu>\n\n        </app-row>\n\n        <markdown *ngIf=\"showCommentText\" class=\"markdown-body\" ngPreserveWhitespaces>\n          {{ comment.body }}\n        </markdown>\n\n      </app-column>\n\n      <app-action-panel [isShowLabel]=\"!(device.isMobile$ | async)\"\n                        [isShowReply]=\"true\"\n                        [upvoteCount]=\"comment.upvotesCount\"\n                        [downvoteCount]=\"comment.downvotesCount\"\n                        [postId]=\"comment.id\"\n                        [position]=\"!(device.isMobile$ | async) ? 'left' : 'center'\"\n                        (replyClick)=\"isShowReplyInput = !isShowReplyInput\"\n      ></app-action-panel>\n\n\n    </app-column>\n  </app-row>\n\n  <app-comment-input *ngIf=\"isEdit\"\n                     class=\"w100\"\n                     [autofocus]=\"true\"\n                     [type]=\"'edit'\"\n                     [comment]=\"comment\"\n                     [parentPostId]=\"comment.parentId\"\n                     [rootPostId]=\"comment.rootPostId!\"\n                     (sendSuccess)=\"onEditCommentSuccess()\"\n                     (cancel)=\"isEdit = false\"\n  ></app-comment-input>\n\n<!--  <app-comment-list [isShowInput]=\"isShowReplyInput\"-->\n<!--                    [parentPostId]=\"comment.id\"-->\n<!--                    [rootPostId]=\"rootPostId\"-->\n<!--                    (closeReply)=\"isShowReplyInput = false\"-->\n<!--  ></app-comment-list>-->\n\n</app-column>\n\n\n"
        },
        {
            "name": "CommentListComponent",
            "id": "component-CommentListComponent-0a98a147487aab2b4670a5f66b5d06b6",
            "file": "src/app/ui-lib/comment/comment-list/comment-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-list",
            "styleUrls": [
                "./comment-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isFirstLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "isShowInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "parentPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string | undefined"
                },
                {
                    "name": "rootPostId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeReply",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "comments$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Post[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "commentsCount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isChildrenShow$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "parentPost$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Post | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onShowMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { CommentService } from '../../../shared/services/comment.service';\r\nimport { Post } from '../../../core/models/post/post-list-item.model';\r\nimport { Observable } from 'rxjs';\r\nimport { map, pluck } from 'rxjs/operators';\r\nimport { PostFacade } from '../../../state/post/post.facade';\r\nimport { ReplyFacade } from '../../../state/reply-id/reply.facade';\r\n\r\n@Component({\r\n  selector: 'app-comment-list',\r\n  templateUrl: './comment-list.component.html',\r\n  styleUrls: ['./comment-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CommentListComponent implements OnInit {\r\n  @Input() rootPostId: string;\r\n  @Input() parentPostId: string | undefined;\r\n  @Input() isShowInput: boolean;\r\n  @Input() isFirstLevel: boolean;\r\n  @Output() closeReply = new EventEmitter();\r\n\r\n  comments$: Observable<Post[]>;\r\n  parentPost$: Observable<Post | undefined>;\r\n  commentsCount$: Observable<number>;\r\n  isChildrenShow$: Observable<boolean>;\r\n  parentId: string;\r\n\r\n  constructor(\r\n    private commentService: CommentService,\r\n    private postFacade: PostFacade,\r\n    private replyFacade: ReplyFacade\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.parentId = this.isFirstLevel ? this.rootPostId : this.parentPostId!;\r\n\r\n    this.comments$ = this.replyFacade.getReplyPostByRootPostId(this.parentId);\r\n\r\n    this.parentPost$ = this.postFacade.getPost(this.parentId);\r\n\r\n    this.commentsCount$ = this.parentPost$.pipe(\r\n      map((post) => post?.repliesCount || 0)\r\n    );\r\n\r\n    this.isChildrenShow$ = this.parentPost$.pipe(\r\n      pluck('isChildrenCommentShow')\r\n    );\r\n\r\n    if (this.isFirstLevel) {\r\n      this.postFacade.switchIsChildrenCommentShow(this.parentId, true);\r\n    }\r\n  }\r\n\r\n  onShowMore() {\r\n    this.postFacade.switchIsChildrenCommentShow(this.parentId);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-comment-input {\r\n  display: block;\r\n  margin-bottom: 16px;\r\n  margin-top: 16px;\r\n}\r\n\r\napp-show-comments-button {\r\n  margin-bottom: 8px;\r\n}\r\n",
                    "styleUrl": "./comment-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replyFacade",
                        "type": "ReplyFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"isShowInput\">\n  <app-comment-input [rootPostId]=\"rootPostId\"\n                     [parentPostId]=\"parentId\"\n                     (cancel)=\"closeReply.emit()\"\n                     [autofocus]=\"!isFirstLevel\"\n  ></app-comment-input>\n</ng-container>\n\n<ng-container *ngIf=\"!isFirstLevel\">\n  <app-show-comments-button [isShowReplyComments]=\"isChildrenShow$ | async\"\n                            [replyCommentCount]=\"commentsCount$ | async\"\n                            (showMore)=\"onShowMore()\"\n  ></app-show-comments-button>\n</ng-container>\n\n<ng-container *ngIf=\"isChildrenShow$ | async\">\n  <ng-container *ngIf=\"(comments$ | async) as comments; else loading\">\n    <ng-container *ngFor=\"let comment of comments\">\n      <app-comment-item [isFirstLevel]=\"isFirstLevel\"\n                        [rootPostId]=\"rootPostId\"\n                        [comment]=\"comment\"\n      ></app-comment-item>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loading>\n  <app-spinner [showSpinner]=\"!!(commentsCount$ | async)\"></app-spinner>\n</ng-template>\n"
        },
        {
            "name": "CommentMenuComponent",
            "id": "component-CommentMenuComponent-071bf7b40e3fbdb148f352516bcdf83a",
            "file": "src/app/ui-lib/menu/comment-menu/comment-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-menu",
            "styleUrls": [
                "./comment-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Post"
                },
                {
                    "name": "isHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClickViewReaction",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "switchHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isOwner$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibilityService",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibleOperationType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibleOperationType",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setupInitExtrinsic",
                    "args": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { BaseVisibleTxComponent } from '../../../core/base-component/base-visible-tx.component';\nimport { TransactionService } from '../../../shared/services/transaction.service';\nimport { AccountService } from '../../../shared/services/account.service';\nimport { Post } from '../../../core/models/post/post-list-item.model';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../state/state';\nimport { PermissionsService } from '../../../shared/services/permissions.service';\nimport { filter, mergeMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { VisibilityService } from '../../../shared/services/visibility.service';\nimport { SignInModalService } from '../../modal-dialogs/services/sign-in-modal.service';\n\n@Component({\n  selector: 'app-comment-menu',\n  templateUrl: './comment-menu.component.html',\n  styleUrls: ['./comment-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CommentMenuComponent\n  extends BaseVisibleTxComponent\n  implements OnInit\n{\n  @Input() comment: Post;\n  @Input() isHidden: boolean;\n  @Output() onClickViewReaction = new EventEmitter();\n  @Output() edit = new EventEmitter();\n\n  isOwner$: Observable<boolean>;\n\n  constructor(\n    public transaction: TransactionService,\n    public account: AccountService,\n    public cd: ChangeDetectorRef,\n    public visibility: VisibilityService,\n    private permission: PermissionsService,\n    public signIn: SignInModalService\n  ) {\n    super(transaction, account, cd, signIn, visibility);\n  }\n\n  ngOnInit(): void {\n    this.visibleOperationType = 'post';\n    this.entityId = this.comment.id;\n\n    this.isOwner$ = this.account.currentAccount$.pipe(\n      filter((account) => !!account),\n      mergeMap((account) =>\n        this.permission.checkIfPostOwner(account!.id, this.comment.id)\n      )\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./comment-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseVisibleTxComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<app-icon-button [iconSize]=\"16\"\n                 [matMenuTriggerFor]=\"menu\"\n                 [iconName]=\"'option-hor-icon'\"\n></app-icon-button>\n\n<mat-menu #menu=\"matMenu\">\n\n  <app-menu-item *ngIf=\"isOwner$ | async\"\n                 (click)=\"edit.emit()\"\n                 [title]=\"'buttons.editComment' | transloco\"\n                 [iconName]=\"'edit-icon'\"\n                 [iconSize]=\"18\"\n  ></app-menu-item>\n\n  <app-menu-item [title]=\"'buttons.makeVisible' | transloco\"\n                 [iconName]=\"'visible-icon'\"\n                 (click)=\"show()\"\n                 *ngIf=\"isHidden && (isOwner$ | async)\"\n  ></app-menu-item>\n\n  <app-menu-item [title]=\"'buttons.hideComment' | transloco\"\n                 [iconName]=\"'hide-icon'\"\n                 (click)=\"hide()\"\n                 *ngIf=\"!isHidden && (isOwner$ | async)\"\n  ></app-menu-item>\n\n  <app-menu-item [title]=\"'buttons.viewReactions' | transloco\"\n                 [iconName]=\"'view-reaction-icon'\"\n                 (click)=\"onClickViewReaction.emit()\"\n  ></app-menu-item>\n\n  <app-menu-item [title]=\"'buttons.viewOnIPFS' | transloco\"\n                 [iconName]=\"'ipfs-icon'\"\n  ></app-menu-item>\n\n</mat-menu>\n"
        },
        {
            "name": "CommentPostTitleComponent",
            "id": "component-CommentPostTitleComponent-1b1cd8392b08c86c9943833fdcd60a0f",
            "file": "src/app/ui-lib/text/comment-post-title/comment-post-title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comment-post-title",
            "styleUrls": [
                "./comment-post-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comment-post-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string | undefined"
                },
                {
                    "name": "postTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-comment-post-title',\r\n  templateUrl: './comment-post-title.component.html',\r\n  styleUrls: ['./comment-post-title.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CommentPostTitleComponent implements OnInit {\r\n  @Input() postTitle: string | undefined = '';\r\n  @Input() link: string | undefined = '';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.link {\r\n  color: $color_primary;\r\n  margin-left: 5px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./comment-post-title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"title-large\">In response to</span>\r\n<a [routerLink]=\"link\">\r\n  <span class=\"title-large link\">{{postTitle}}</span>\r\n</a>\r\n"
        },
        {
            "name": "CommentsComponent",
            "id": "component-CommentsComponent-3a895416531e7a3d1abdc488b5c1a58f",
            "file": "src/app/ui-lib/comment/comments/comments.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comments",
            "styleUrls": [
                "./comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "repliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "rootPost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Post"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Post } from '../../../core/models/post/post-list-item.model';\r\n\r\n@Component({\r\n  selector: 'app-comments',\r\n  templateUrl: './comments.component.html',\r\n  styleUrls: ['./comments.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CommentsComponent implements OnInit {\r\n  @Input() rootPost: Post;\r\n  @Input() repliesCount: number;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "app-comment-list {\r\n  display: block;\r\n  margin: 16px 0 16px;\r\n}\r\n\r\n",
                    "styleUrl": "./comments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-title type=\"medium\"\r\n           text=\"{{repliesCount + ' ' + (repliesCount | pluralize : 'Comment')}}\"\r\n></app-title>\r\n\r\n<app-comment-list [rootPostId]=\"rootPost.id\"\r\n                  [isFirstLevel]=\"true\"\r\n                  [isShowInput]=\"true\"\r\n></app-comment-list>\r\n"
        },
        {
            "name": "ConnectionsModalDialogComponent",
            "id": "component-ConnectionsModalDialogComponent-c195c01e274faa52309aa1cc6b685d29",
            "file": "src/app/ui-lib/modal-dialogs/connections-modal-dialog/connections-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-connections-modal-dialog",
            "styleUrls": [
                "./connections-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./connections-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabLinks.find(\r\n    (tab) => tab.tabName === this.data.activeTab\r\n  )!",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionModalData",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConnectionsModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "followersIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "followingIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\r\n    { tabName: 'following', additionalInfo: this.data.followingCount },\r\n    { tabName: 'followers', additionalInfo: this.data.followerCount },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { ConnectionModalData } from '../../../core/types/dialog-modal-data.types';\r\nimport { from, Observable } from 'rxjs';\r\nimport { ProfileService } from '../../../account/services/profile.service';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-connections-modal-dialog',\r\n  templateUrl: './connections-modal-dialog.component.html',\r\n  styleUrls: ['./connections-modal-dialog.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ConnectionsModalDialogComponent implements OnInit {\r\n  public tabLinks: TabLinkData[] = [\r\n    { tabName: 'following', additionalInfo: this.data.followingCount },\r\n    { tabName: 'followers', additionalInfo: this.data.followerCount },\r\n  ];\r\n\r\n  activeTab: TabLinkData = this.tabLinks.find(\r\n    (tab) => tab.tabName === this.data.activeTab\r\n  )!;\r\n\r\n  followersIds: string[];\r\n  followingIds: string[];\r\n\r\n  constructor(\r\n    private cd: ChangeDetectorRef,\r\n    private profileService: ProfileService,\r\n    public dialogRef: MatDialogRef<ConnectionsModalDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ConnectionModalData\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    from(this.profileService.getFollowersIds(this.data.address))\r\n      .pipe(first())\r\n      .subscribe((ids) => {\r\n        this.followersIds = ids;\r\n        this.cd.markForCheck();\r\n      });\r\n    from(this.profileService.getFollowingIds(this.data.address))\r\n      .pipe(first())\r\n      .subscribe((ids) => {\r\n        this.followingIds = ids;\r\n        this.cd.markForCheck();\r\n      });\r\n  }\r\n\r\n  onTabClick(activeTab: TabLinkData) {\r\n    this.activeTab = activeTab;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./connections-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConnectionsModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "ConnectionModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileService",
                        "type": "ProfileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConnectionsModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ConnectionModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\r\n\r\n  <div class=\"modal-header\">\r\n    <h2 class=\"title-medium\">{{ 'modals.connections.connections' | transloco }}</h2>\r\n    <app-close-button (onClose)=\"dialogRef.close()\"></app-close-button>\r\n  </div>\r\n\r\n  <div class=\"modal-tabs\">\r\n    <app-tabs (tabClick)=\"onTabClick($event)\" [activeLink]=\"activeTab\" [tabLinks]=\"tabLinks\"></app-tabs>\r\n  </div>\r\n\r\n  <div class=\"modal-body\">\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'following' && followingIds\">\r\n      <ng-container *ngIf=\"followingIds.length > 0; else noDownload\">\r\n        <app-vote-user-list [ids]=\"followingIds\"></app-vote-user-list>\r\n      </ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'followers' && followersIds\">\r\n      <ng-container *ngIf=\"followersIds.length > 0; else noDownload\">\r\n        <app-vote-user-list [ids]=\"followersIds\"></app-vote-user-list>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n\r\n</div>\r\n\r\n<ng-template #noDownload>\r\n  <app-row margin=\"16px 0 0\" h=\"center\">{{ 'content.noDownload' | transloco }}</app-row>\r\n</ng-template>\r\n"
        },
        {
            "name": "CreateEntityButtonComponent",
            "id": "component-CreateEntityButtonComponent-98056619bb4babd835539471a66ae080",
            "file": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-entity-button",
            "styleUrls": [
                "./create-entity-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-entity-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "type",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"space\" | \"post\" | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { combineLatest, Subject, Subscription } from 'rxjs';\nimport { DeviceService } from '../../../shared/services/device.service';\nimport { SpaceService } from '../../../space/services/space.service';\nimport { AccountService } from '../../../shared/services/account.service';\n\n@Component({\n  selector: 'app-create-entity-button',\n  templateUrl: './create-entity-button.component.html',\n  styleUrls: ['./create-entity-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CreateEntityButtonComponent implements OnInit {\n  type: 'space' | 'post' | null = null;\n\n  subscription = new Subscription();\n\n  constructor(\n    public dialog: MatDialog,\n    private router: Router,\n    private deviceService: DeviceService,\n    private spaceService: SpaceService,\n    private cd: ChangeDetectorRef,\n    private account: AccountService\n  ) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      combineLatest([\n        this.spaceService.myOwnSpaceIds$,\n        this.account.currentAccount$,\n      ]).subscribe(([ids, account]) => {\n        if (account) {\n          this.type = ids && ids.length > 0 ? 'post' : 'space';\n        } else {\n          this.type = null;\n        }\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  async onClick() {\n    await this.navigate();\n  }\n\n  private async navigate() {\n    if (this.type === 'post') {\n      await this.router.navigate(['/posts', 'new']);\n    } else {\n      await this.router.navigate(['/spaces', 'new']);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n@import \"mixins\";\r\n\r\n:host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\nbutton {\r\n  @include font($font_normal, 500, 34px);\r\n  margin: auto 0;\r\n  padding: 0 $space_normal 0 38px;\r\n  border-radius: $space_mini;\r\n\r\n  span:first-child {\r\n    font-size: 26px;\r\n    position: absolute;\r\n    font-weight: 400;\r\n    top: 0;\r\n    left: 14px;\r\n  }\r\n\r\n  &:active {\r\n    border: 1px solid $color_gray_light;\r\n  }\r\n}\r\n\r\n.post {\r\n  border: 1px solid $color_gray_light;\r\n}\r\n\r\n.space {\r\n  border: 1px solid $color_primary;\r\n  color: $color_primary;\r\n}\r\n\r\n",
                    "styleUrl": "./create-entity-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button *ngIf=\"type\"\n        mat-ripple\n        [ngClass]=\"type\"\n        (click)=\"onClick()\"\n>\n  <span>+</span>\n  <span *transloco=\"let t; read: 'buttons'\">\n    {{type === 'post' ? t('newPost') : t('createSpace') }}\n  </span>\n</button>\n"
        },
        {
            "name": "CreateSpaceButtonComponent",
            "id": "component-CreateSpaceButtonComponent-5651895432bdb7f3cb7c42300b2e800f",
            "file": "src/app/ui-lib/buttons/create-space-button/create-space-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-space-button",
            "styleUrls": [
                "./create-space-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-space-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"primary\" | \"gray\""
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"create\" | \"edit\""
                },
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-create-space-button',\r\n  templateUrl: './create-space-button.component.html',\r\n  styleUrls: ['./create-space-button.component.scss'],\r\n})\r\nexport class CreateSpaceButtonComponent {\r\n  @Input() width: 'full' | 'static' = 'static';\r\n  @Input() color: 'primary' | 'gray' = 'primary';\r\n  @Input() type: 'create' | 'edit' = 'create';\r\n  @Input() spaceId: string;\r\n\r\n  className: string;\r\n  constructor(private router: Router) {}\r\n\r\n  get isCreate() {\r\n    return this.type === 'create';\r\n  }\r\n\r\n  onClick() {\r\n    if (this.isCreate) {\r\n      this.router.navigate(['/spaces', 'create']);\r\n    } else {\r\n      this.router.navigate(['/spaces', this.spaceId, 'edit']);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.static {}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\n.primary {\r\n  border: $border_primary !important;\r\n}\r\n\r\n.gray {\r\n  border: $border_light !important;\r\n  color: $color_black;\r\n}\r\n\r\nbutton {\r\n  font-size: $font_normal;\r\n}\r\n",
                    "styleUrl": "./create-space-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isCreate": {
                    "name": "isCreate",
                    "getSignature": {
                        "name": "isCreate",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                }
            },
            "templateData": "<button [ngClass]=\"[width, color]\"\r\n        mat-stroked-button\r\n        color=\"primary\"\r\n        (click)=\"onClick()\"\r\n        *transloco=\"let t; read: 'buttons'\"\r\n>\r\n  {{ isCreate ? t('createSpace') : t('editSpace') }}\r\n</button>\r\n"
        },
        {
            "name": "DownvoteButtonComponent",
            "id": "component-DownvoteButtonComponent-228600b0fe04c3c37c8976b1fd926000",
            "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-downvote-button",
            "styleUrls": [
                "./downvote-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./downvote-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                },
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "voteClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n} from '@angular/core';\r\nimport { VoteButtonComponent } from '../../../core/base-component/vote-button.component';\r\n\r\n@Component({\r\n  selector: 'app-downvote-button',\r\n  templateUrl: './downvote-button.component.html',\r\n  styleUrls: ['./downvote-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DownvoteButtonComponent extends VoteButtonComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.active {\r\n  color: #EA3323 !important;\r\n}\r\n",
                    "styleUrl": "./downvote-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "VoteButtonComponent",
            "templateData": "<app-icon-button [iconSize]=\"22\"\r\n                 [buttonSize]=\"32\"\r\n                 [iconName]=\"isActive ? 'downvote-active-icon' : 'downvote-default-icon'\"\r\n                 (click)=\"this.voteClick.emit()\"\r\n></app-icon-button>\r\n\r\n<span class=\"action-panel-label\"\r\n      *ngIf=\"isShowLabel\"\r\n>\r\n  {{ 'buttons.downvote' | transloco }}\r\n  <span *ngIf=\"count > 0\">\r\n    ({{count | numeral}})\r\n  </span>\r\n</span>\r\n\r\n<span\r\n  class=\"action-panel-label\"\r\n  [ngClass]=\"{ 'active': isActive }\"\r\n  *ngIf=\"!isShowLabel && count > 0\"\r\n>\r\n  {{count | numeral}}\r\n</span>\r\n\r\n"
        },
        {
            "name": "EditButtonComponent",
            "id": "component-EditButtonComponent-37f665ef97fc77b1ec4f21dd1a76d834",
            "file": "src/app/ui-lib/buttons/edit-button/edit-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-button",
            "styleUrls": [
                "./edit-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "handle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'space'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"space\" | \"profile\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-edit-button',\n  templateUrl: './edit-button.component.html',\n  styleUrls: ['./edit-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EditButtonComponent implements OnInit {\n  @Input() id: string;\n  @Input() handle: string;\n  @Input() type: 'space' | 'profile' = 'space';\n\n  route: string[];\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.route =\n      this.type === 'space'\n        ? ['/spaces', this.id, 'edit']\n        : ['/accounts', this.id, 'profile', 'edit'];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  border: 1px solid #EDEDED;\r\n  cursor: pointer;\r\n\r\n  ::ng-deep {\r\n    mat-icon {\r\n      width: 15px;\r\n      svg {\r\n        path {\r\n          fill: #EB2F96;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &:hover, &:active {\r\n    border-color: #EB2F96;\r\n  }\r\n}\r\n",
                    "styleUrl": "./edit-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a [routerLink]=\"route\" matRipple class=\"edit-button\">\r\n  <mat-icon svgIcon=\"edit-icon\"></mat-icon>\r\n</a>\r\n"
        },
        {
            "name": "EditPostComponent",
            "id": "component-EditPostComponent-e74497f1a2e1b7d988e3b0a0c0751365",
            "file": "src/app/post/edit-post/edit-post.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-post",
            "styleUrls": [
                "./edit-post.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-post.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabs[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initialSpaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isBodyRequired",
                    "defaultValue": "this.activeTab.tabName === 'article'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "postForm",
                    "defaultValue": "new FormGroup({\r\n    spaceId: new FormControl(''),\r\n    title: new FormControl(''),\r\n    body: new FormControl('', { validators: Validators.required }),\r\n    tags: new FormControl([]),\r\n    link: new FormControl(''),\r\n    image: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "postFormErrors",
                    "defaultValue": "{\r\n    body: '',\r\n    link: '',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostFormErrors",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "tabs",
                    "defaultValue": "[{ tabName: 'article' }, { tabName: 'video' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"edit\" | \"new\"",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "videoUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleEditType",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onEditPost",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onVideoUrlBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setActiveTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TabLinkData } from '../../core/models/tab-link-data.model';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { BaseTxComponent } from '../../core/base-component/base-tx.component';\r\nimport { TransactionService } from '../../shared/services/transaction.service';\r\nimport { AccountService } from '../../shared/services/account.service';\r\nimport { SubmittableResult } from '@polkadot/api';\r\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\r\nimport { PostContent } from '@subsocial/types';\r\nimport { PostService } from '../services/post.service';\r\nimport { Post } from '../../core/models/post/post-list-item.model';\r\nimport { Location } from '@angular/common';\r\nimport { PostFacade } from '../../state/post/post.facade';\r\nimport { SignInModalService } from '../../ui-lib/modal-dialogs/services/sign-in-modal.service';\r\n\r\ntype PostFormErrors = {\r\n  body: string;\r\n  link: string;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-edit-post',\r\n  templateUrl: './edit-post.component.html',\r\n  styleUrls: ['./edit-post.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class EditPostComponent extends BaseTxComponent implements OnInit {\r\n  type: 'edit' | 'new';\r\n  tabs: TabLinkData[] = [{ tabName: 'article' }, { tabName: 'video' }];\r\n  activeTab: TabLinkData = this.tabs[0];\r\n  videoUrl = '';\r\n\r\n  initialSpaceId: string | undefined;\r\n  postId: string;\r\n  isBodyRequired = this.activeTab.tabName === 'article';\r\n  postFormErrors: PostFormErrors = {\r\n    body: '',\r\n    link: '',\r\n  };\r\n\r\n  postForm = new FormGroup({\r\n    spaceId: new FormControl(''),\r\n    title: new FormControl(''),\r\n    body: new FormControl('', { validators: Validators.required }),\r\n    tags: new FormControl([]),\r\n    link: new FormControl(''),\r\n    image: new FormControl(''),\r\n  });\r\n\r\n  get isActiveArticle() {\r\n    return this.activeTab.tabName === 'article';\r\n  }\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    public transaction: TransactionService,\r\n    public account: AccountService,\r\n    public cd: ChangeDetectorRef,\r\n    private postService: PostService,\r\n    private location: Location,\r\n    private postFacade: PostFacade,\r\n    public signIn: SignInModalService\r\n  ) {\r\n    super(transaction, account, signIn, cd);\r\n  }\r\n\r\n  async ngOnInit() {\r\n    const { type } = this.route.snapshot.params;\r\n    this.initialSpaceId = this.route.snapshot.queryParams['spaceId'];\r\n    this.type = type;\r\n\r\n    await this.handleEditType();\r\n  }\r\n\r\n  setActiveTab(tab: TabLinkData) {\r\n    this.resetErrors();\r\n    this.activeTab = tab;\r\n    this.isBodyRequired = this.isActiveArticle;\r\n\r\n    if (this.isActiveArticle) {\r\n      this.postForm.controls['link'].clearValidators();\r\n      this.postForm.controls['body'].addValidators(Validators.required);\r\n    } else {\r\n      this.postForm.controls['body'].clearValidators();\r\n      this.postForm.controls['link'].addValidators(Validators.required);\r\n    }\r\n    this.postForm.controls['link'].updateValueAndValidity();\r\n    this.postForm.controls['body'].updateValueAndValidity();\r\n  }\r\n\r\n  onVideoUrlBlur() {\r\n    this.videoUrl = this.postForm.value.link;\r\n  }\r\n\r\n  onFailed(result: SubmittableResult | null): void {\r\n    console.log(result?.toHuman());\r\n  }\r\n\r\n  async onSuccess(result: SubmittableResult) {\r\n    let newPost: Post | null = null;\r\n    if (this.type === 'edit') {\r\n      newPost = await this.postFacade.fetchPost(this.postId).toPromise();\r\n    } else {\r\n      const ids = this.getNewIdsFromEvent(result);\r\n      if (ids?.length > 0) {\r\n        this.postId = ids[0];\r\n        newPost = await this.postFacade.fetchPost(this.postId).toPromise();\r\n      }\r\n    }\r\n\r\n    newPost\r\n      ? await this.router.navigate(['/' + newPost.postLink])\r\n      : console.error('Post not found');\r\n  }\r\n\r\n  validate(): boolean {\r\n    const isValid = this.postForm.valid;\r\n\r\n    if (!isValid) {\r\n      this.transaction.showErrorMessage('Form is invalid');\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  async onEditPost() {\r\n    this.checkErrors();\r\n    const isEdit = this.type === 'edit';\r\n\r\n    const pallet = PALLETS.posts;\r\n    const method = isEdit ? METHODS.updatePost : METHODS.createPost;\r\n\r\n    const { spaceId, title, body, tags, link, image } = this.postForm.value;\r\n\r\n    const content: PostContent = {\r\n      title,\r\n      tags,\r\n      body,\r\n      link: '',\r\n      image: '',\r\n      canonical: '',\r\n    };\r\n\r\n    if (this.isActiveArticle) {\r\n      content.image = image;\r\n      content.link = '';\r\n    } else {\r\n      content.link = link;\r\n      content.image = '';\r\n    }\r\n\r\n    this.contentCid = await this.saveContent(content);\r\n\r\n    if (!this.contentCid) return;\r\n\r\n    let params: any[];\r\n\r\n    if (isEdit) {\r\n      const update = {\r\n        spaceId: null,\r\n        content: {\r\n          IPFS: this.contentCid,\r\n        },\r\n        hidden: null,\r\n      };\r\n\r\n      params = [this.postId, update];\r\n    } else {\r\n      params = [spaceId, { RegularPost: null }, { IPFS: this.contentCid }];\r\n    }\r\n\r\n    console.log(params);\r\n\r\n    await this.initExtrinsic({ pallet, params, method });\r\n\r\n    await this.sentTransaction();\r\n  }\r\n\r\n  async handleEditType() {\r\n    const { postId } = this.route.snapshot.params;\r\n\r\n    if (this.type !== 'edit' || !postId) return;\r\n\r\n    this.postId = postId;\r\n\r\n    const {\r\n      title,\r\n      body,\r\n      tags,\r\n      link,\r\n      imageUrl: image,\r\n    } = await this.postFacade.fetchPost(postId).toPromise();\r\n\r\n    this.postForm.patchValue({\r\n      title,\r\n      body,\r\n      tags,\r\n      link,\r\n      image,\r\n    });\r\n  }\r\n  resetForm() {\r\n    if (this.type === 'edit') {\r\n      this.location.back();\r\n    } else {\r\n      this.postForm.reset();\r\n    }\r\n  }\r\n\r\n  private resetErrors() {\r\n    this.postFormErrors = {\r\n      body: '',\r\n      link: '',\r\n    };\r\n  }\r\n\r\n  private checkErrors() {\r\n    const { body, link } = this.postForm.controls;\r\n\r\n    this.postFormErrors.body = body.errors?.['required']\r\n      ? 'Post body is required'\r\n      : '';\r\n\r\n    this.postFormErrors.link = link.errors?.['required']\r\n      ? 'Video url is required'\r\n      : '';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.edit-post-container {\r\n  width: 628px;\r\n  margin: 0 auto;\r\n  min-height: 60vh;\r\n  padding-bottom: 16px;\r\n\r\n  h2 {\r\n    margin-block-end: 4px;\r\n  }\r\n\r\n  .image-wp {\r\n    margin-top: 20px;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .input-wp {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .mat-tab-header {\r\n      margin: 0 -16px;\r\n    }\r\n\r\n    .mat-tab-link {\r\n      font-size: 14px !important;\r\n      letter-spacing: 1.25px;\r\n    }\r\n\r\n    .mat-tab-link-container {\r\n      z-index: 0 !important;\r\n    }\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n    gap: 16px;\r\n    margin-top: 5px;\r\n\r\n    button {\r\n      min-width: 110px;\r\n      font-size: 17px;\r\n      .mat-button-wrapper {\r\n        letter-spacing: 0.5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nform {\r\n  &>:not(:last-child) {\r\n    display: block;\r\n    margin-bottom: $space_normal;\r\n  }\r\n}\r\n\r\napp-space-select {\r\n  margin-top: 20px;\r\n  margin-bottom: 6px;\r\n}\r\n\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .edit-post-container {\r\n    width: 100%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./edit-post.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isActiveArticle": {
                    "name": "isActiveArticle",
                    "getSignature": {
                        "name": "isActiveArticle",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            },
            "templateData": "<section class=\"edit-post-container\">\r\n  <mat-card>\r\n    <h2 class=\"title-medium\" *transloco=\"let t; read: 'general'\">\r\n      {{ t(type) }} {{ t('post') }}\r\n    </h2>\r\n    <app-tabs [tabLinks]=\"tabs\"\r\n              [activeLink]=\"activeTab\"\r\n              (tabClick)=\"setActiveTab($event)\"\r\n    ></app-tabs>\r\n\r\n    <form [formGroup]=\"postForm\" action=\"\" *transloco=\"let t; read: 'forms.placeholder'\">\r\n\r\n      <app-space-select *ngIf=\"type === 'new'\"\r\n                        formControlName=\"spaceId\"\r\n                        [spaceId]=\"initialSpaceId\"\r\n      ></app-space-select>\r\n\r\n      <ng-container [ngSwitch]=\"activeTab.tabName\">\r\n\r\n        <ng-template ngSwitchCase=\"article\">\r\n          <div class=\"image-wp\">\r\n\r\n            <app-image-loader type=\"square\"\r\n                              formControlName=\"image\"\r\n            ></app-image-loader>\r\n\r\n          </div>\r\n        </ng-template>\r\n\r\n        <ng-template ngSwitchCase=\"video\">\r\n          <div class=\"input-wp\">\r\n            <app-text-input formControlName=\"link\"\r\n                            [isRequired]=\"true\"\r\n                            [label]=\"t('vireoUrl')\"\r\n                            (blur)=\"onVideoUrlBlur()\"\r\n                            [error]=\"postFormErrors.link\"\r\n            ></app-text-input>\r\n          </div>\r\n          <app-embed-video [videoUrl]=\"videoUrl\"></app-embed-video>\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <app-text-input [label]=\"t('postTitle')\"\r\n                      formControlName=\"title\"\r\n      ></app-text-input>\r\n\r\n      <app-mde-editor [isToolbarHidden]=\"false\"\r\n                      formControlName=\"body\"\r\n                      [height]=\"160\"\r\n                      [autoFocus]=\"true\"\r\n                      [placeholder]=\"t('postBody')\"\r\n                      [isRequired]=\"isBodyRequired\"\r\n                      [error]=\"postFormErrors.body\"\r\n      ></app-mde-editor>\r\n\r\n      <app-tag-input formControlName=\"tags\"\r\n                     [placeholder]=\"t('tags')\"\r\n      ></app-tag-input>\r\n\r\n      <div class=\"button-wp\" *transloco=\"let t; read: 'buttons'\">\r\n        <button (click)=\"resetForm()\" mat-stroked-button>\r\n          {{ type === 'edit' ? t('cancel') : t('resetForm')}}\r\n        </button>\r\n\r\n        <app-tx-button [name]=\"type === 'edit' ? t('save') : t('createPost')\"\r\n                       (click)=\"onEditPost()\"\r\n                       [isSending]=\"isSending\"\r\n        ></app-tx-button>\r\n      </div>\r\n\r\n    </form>\r\n\r\n  </mat-card>\r\n</section>\r\n\r\n"
        },
        {
            "name": "EditProfileComponent",
            "id": "component-EditProfileComponent-15904e7116b15b2d3e84ce7de8e6efd5",
            "file": "src/app/account/edit-profile/edit-profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-space",
            "styleUrls": [
                "./edit-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editProfileForm",
                    "defaultValue": "new FormGroup({\r\n    avatar: new FormControl(''),\r\n    name: new FormControl('', {\r\n      validators: [Validators.required],\r\n    }),\r\n    about: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "hasPermission$",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "titleKey",
                    "defaultValue": "'general.new'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onEditProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { DeviceService } from '../../shared/services/device.service';\r\nimport { BaseTxComponent } from '../../core/base-component/base-tx.component';\r\nimport { SubmittableResult } from '@polkadot/api';\r\nimport { TransactionService } from '../../shared/services/transaction.service';\r\nimport { AccountService } from '../../shared/services/account.service';\r\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\r\nimport { filter, map, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { ProfileFacade } from '../../state/profile/profile.facade';\r\nimport { BehaviorSubject, combineLatest, Subject } from 'rxjs';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\nimport { SignInModalService } from '../../ui-lib/modal-dialogs/services/sign-in-modal.service';\r\n\r\ntype Type = 'edit' | 'new';\r\n\r\n@Component({\r\n  selector: 'app-edit-space',\r\n  templateUrl: './edit-profile.component.html',\r\n  styleUrls: ['./edit-profile.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class EditProfileComponent\r\n  extends BaseTxComponent\r\n  implements OnInit, OnDestroy\r\n{\r\n  type: Type;\r\n  url = '';\r\n\r\n  editProfileForm = new FormGroup({\r\n    avatar: new FormControl(''),\r\n    name: new FormControl('', {\r\n      validators: [Validators.required],\r\n    }),\r\n    about: new FormControl(''),\r\n  });\r\n\r\n  private userId: string;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    public deviceService: DeviceService,\r\n    public transaction: TransactionService,\r\n    public account: AccountService,\r\n    public cd: ChangeDetectorRef,\r\n    private profileFacade: ProfileFacade,\r\n    public signIn: SignInModalService\r\n  ) {\r\n    super(transaction, account, signIn, cd);\r\n  }\r\n\r\n  titleKey = 'general.new';\r\n  hasPermission$ = new BehaviorSubject<boolean>(true);\r\n  unsubscribe$ = new Subject();\r\n\r\n  get isNew() {\r\n    return this.type === 'new';\r\n  }\r\n\r\n  async ngOnInit() {\r\n    combineLatest([this.route.params, this.account.currentAccount$])\r\n      .pipe(\r\n        filter(([, account]) => !!account),\r\n        tap(([{ userId }, account]) => {\r\n          this.userId = userId;\r\n          this.hasPermission$.next(account?.id === userId);\r\n        }),\r\n        switchMap(([{ userId }]) => this.profileFacade.getProfile(userId)),\r\n        map((profile) => {\r\n          if (profile?.name) {\r\n            this.editProfileForm.patchValue({ ...profile });\r\n            this.type = 'edit';\r\n          } else {\r\n            this.type = 'new';\r\n          }\r\n          this.titleKey = 'general.' + this.type;\r\n        }),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe((_) => null);\r\n  }\r\n\r\n  onFailed(result: SubmittableResult | null): void {}\r\n\r\n  async onSuccess(result: SubmittableResult) {\r\n    this.profileFacade.loadProfile(this.userId);\r\n    await this.router.navigate(['/accounts', this.userId]);\r\n  }\r\n\r\n  validate(): boolean {\r\n    return this.editProfileForm.valid;\r\n  }\r\n\r\n  async onEditProfile() {\r\n    const pallet = PALLETS.profiles;\r\n    const method = this.isNew ? METHODS.createProfile : METHODS.updateProfile;\r\n\r\n    const { about, name, avatar } = this.editProfileForm.value;\r\n\r\n    this.contentCid = await this.saveContent({\r\n      about,\r\n      avatar,\r\n      name,\r\n    });\r\n\r\n    if (!this.contentCid) return;\r\n\r\n    const params = this.isNew\r\n      ? [{ IPFS: this.contentCid }]\r\n      : [{ content: { IPFS: this.contentCid } }];\r\n\r\n    console.log(pallet, params, method);\r\n\r\n    await this.initExtrinsic({ pallet, params, method });\r\n\r\n    await this.sentTransaction();\r\n  }\r\n\r\n  resetForm() {\r\n    if (this.isNew) {\r\n      this.editProfileForm.patchValue({});\r\n    } else {\r\n      this.router.navigate(['/accounts', this.userId]);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.edit-profile-container {\r\n  width: 628px;\r\n  margin: 0 auto;\r\n  min-height: 60vh;\r\n  padding-bottom: $space_normal;\r\n\r\n  mat-card {\r\n    padding: 35px 23px 21px;\r\n  }\r\n\r\n  h2 {\r\n    margin: 19px 3px;\r\n  }\r\n\r\n  .profile-form {\r\n    margin-top: $space_normal;\r\n    gap: 24px;\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n    gap: $space_normal;\r\n    margin-top: 5px;\r\n\r\n    button {\r\n      min-width: 110px;\r\n      font-size: $font_normal;\r\n      .mat-button-wrapper {\r\n        letter-spacing: 0.5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\napp-mde-editor, app-image-loader, app-text-input {\r\n  display: block;\r\n  margin-bottom: $space_normal;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .edit-profile-container {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
                    "styleUrl": "./edit-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileFacade",
                        "type": "ProfileFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileFacade",
                        "type": "ProfileFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isNew": {
                    "name": "isNew",
                    "getSignature": {
                        "name": "isNew",
                        "type": "",
                        "returnType": "",
                        "line": 66
                    }
                }
            },
            "templateData": "<section class=\"edit-profile-container\" *ngIf=\"hasPermission$ | async; else noPermission\">\r\n  <mat-card>\r\n    <h2 class=\"title-medium\">{{ titleKey | transloco }} {{ 'general.profile' | transloco}}</h2>\r\n\r\n    <form [formGroup]=\"editProfileForm\" class=\"profile-form\" action=\"\">\r\n\r\n      <app-image-loader formControlName=\"avatar\"\r\n                        [imageUrl]=\"url\"\r\n      ></app-image-loader>\r\n\r\n      <app-text-input formControlName=\"name\"\r\n                      [isRequired]=\"true\"\r\n                      [label]=\"'forms.placeholder.profileName' | transloco\"\r\n      ></app-text-input>\r\n\r\n      <app-mde-editor [isToolbarHidden]=\"false\"\r\n                      [height]=\"160\"\r\n                      [autoFocus]=\"true\"\r\n                      formControlName=\"about\"\r\n                      [placeholder]=\"'forms.placeholder.about' | transloco\"\r\n      ></app-mde-editor>\r\n\r\n      <div class=\"button-wp\">\r\n\r\n        <button (click)=\"resetForm()\"\r\n                mat-stroked-button\r\n                *transloco=\"let t; read: 'buttons'\"\r\n        >{{ isNew ? t('cancel') : t('resetForm')}}</button>\r\n\r\n        <app-tx-button *transloco=\"let t; read: 'buttons'\"\r\n                       [name]=\"isNew ?  t('createProfile') : t('save')\"\r\n                       (click)=\"onEditProfile()\"\r\n        ></app-tx-button>\r\n\r\n      </div>\r\n    </form>\r\n  </mat-card>\r\n</section>\r\n\r\n<ng-template #noPermission>\r\n  <div>No permission</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "EditSpaceComponent",
            "id": "component-EditSpaceComponent-5d5170039d5c2eb848db0ea0e9f7e0aa",
            "file": "src/app/space/edit-space/edit-space.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-space",
            "styleUrls": [
                "./edit-space.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-space.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "editSpaceForm",
                    "defaultValue": "new FormGroup({\n    image: new FormControl(''),\n    name: new FormControl('', {\n      validators: [Validators.required],\n    }),\n    about: new FormControl(''),\n    tags: new FormControl([]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "errors",
                    "defaultValue": "{\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EditSpaceFormErrors",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"edit\" | \"new\"",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleEditType",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onEditSpace",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BaseTxComponent } from '../../core/base-component/base-tx.component';\nimport { SubmittableResult } from '@polkadot/api';\nimport { TransactionService } from '../../shared/services/transaction.service';\nimport { AccountService } from '../../shared/services/account.service';\nimport { METHODS, PALLETS } from '../../core/constants/query.const';\nimport { SpaceService } from '../services/space.service';\nimport { SpaceFacade } from '../../state/space/space.facade';\nimport { SignInModalService } from '../../ui-lib/modal-dialogs/services/sign-in-modal.service';\nimport { FollowedSpaceIdsFacade } from '../../state/followed-space-ids/followed-space-ids.facade';\n\ntype EditSpaceFormErrors = {\n  name: string;\n};\n\n@Component({\n  selector: 'app-edit-space',\n  templateUrl: './edit-space.component.html',\n  styleUrls: ['./edit-space.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EditSpaceComponent extends BaseTxComponent implements OnInit {\n  type: 'edit' | 'new';\n  url = '';\n\n  editSpaceForm = new FormGroup({\n    image: new FormControl(''),\n    name: new FormControl('', {\n      validators: [Validators.required],\n    }),\n    about: new FormControl(''),\n    tags: new FormControl([]),\n  });\n\n  errors: EditSpaceFormErrors = {\n    name: '',\n  };\n\n  private spaceId: string | undefined;\n\n  constructor(\n    public transaction: TransactionService,\n    public account: AccountService,\n    public cd: ChangeDetectorRef,\n    private route: ActivatedRoute,\n    private router: Router,\n    private spaceService: SpaceService,\n    private spaceFacade: SpaceFacade,\n    public signIn: SignInModalService,\n    private followedSpaceIdsFacade: FollowedSpaceIdsFacade\n  ) {\n    super(transaction, account, signIn, cd);\n  }\n\n  async ngOnInit() {\n    const { type } = this.route.snapshot.params;\n    this.type = type;\n\n    await this.handleEditType();\n  }\n\n  onFailed(result: SubmittableResult | null): void {}\n\n  async onSuccess(result: SubmittableResult) {\n    if (this.type === 'edit') {\n      this.spaceFacade.loadSpace(this.spaceId!);\n    } else {\n      const ids = this.getNewIdsFromEvent(result);\n      if (ids?.length > 0) {\n        this.spaceId = ids[0];\n        await this.spaceService.getMyOwnSpaceIds();\n        this.followedSpaceIdsFacade.loadMyFollowedSpaceIds();\n      }\n    }\n\n    await this.router.navigate([`/${this.spaceId}`]);\n  }\n\n  validate(): boolean {\n    return this.editSpaceForm.valid;\n  }\n\n  async onEditSpace() {\n    this.checkErrors();\n\n    const isEdit = this.type === 'edit';\n\n    const pallet = PALLETS.spaces;\n    const method = isEdit ? METHODS.updateSpace : METHODS.createSpace;\n\n    const { about, name, tags, image } = this.editSpaceForm.value;\n\n    this.contentCid = await this.saveContent({\n      about,\n      image,\n      name,\n      tags,\n      links: [],\n      email: '',\n    });\n\n    if (!this.contentCid) return;\n\n    let params: any[];\n\n    if (!isEdit) {\n      params = [null, null, { IPFS: this.contentCid }, null];\n    } else {\n      params = [this.spaceId, { content: { IPFS: this.contentCid } }];\n    }\n\n    await this.initExtrinsic({ pallet, params, method });\n\n    await this.sentTransaction();\n  }\n\n  private async handleEditType() {\n    const { spaceId } = this.route.snapshot.params;\n\n    if (this.type === 'edit' && spaceId) {\n      this.spaceId = spaceId;\n      this.spaceFacade.loadSpace(spaceId);\n      const space = await this.spaceFacade.getSpaceOnce(spaceId).toPromise();\n\n      this.editSpaceForm.patchValue({\n        image: space?.image,\n        name: space?.name,\n        about: space?.about,\n        tags: space?.tags,\n      });\n    }\n  }\n\n  private checkErrors() {\n    const { name } = this.editSpaceForm.controls;\n\n    this.errors.name = name.errors?.['required']\n      ? 'Space name is required'\n      : '';\n  }\n\n  resetForm() {\n    this.editSpaceForm.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.edit-space-container {\r\n  width: 628px;\r\n  margin: 0 auto;\r\n  min-height: 60vh;\r\n  padding-bottom: $space_normal;\r\n\r\n  mat-card {\r\n    padding: 35px 23px 21px;\r\n  }\r\n\r\n  h2 {\r\n    margin: 19px 3px;\r\n  }\r\n\r\n  .space-form {\r\n    margin-top: $space_normal;\r\n    gap: 24px;\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n    gap: $space_normal;\r\n    margin-top: 5px;\r\n\r\n    button {\r\n      min-width: 110px;\r\n      font-size: $font_normal;\r\n      .mat-button-wrapper {\r\n        letter-spacing: 0.5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nform {\r\n  &>:not(:last-child) {\r\n    display: block;\r\n    margin-bottom: $space_normal;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .edit-space-container {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
                    "styleUrl": "./edit-space.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "followedSpaceIdsFacade",
                        "type": "FollowedSpaceIdsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "followedSpaceIdsFacade",
                        "type": "FollowedSpaceIdsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"edit-space-container\">\r\n  <mat-card>\r\n    <h2 class=\"title-medium\" *transloco=\"let t; read: 'general'\">{{t(type)}} {{t('space')}}</h2>\r\n\r\n\r\n    <form [formGroup]=\"editSpaceForm\"\r\n          class=\"space-form\" action=\"\"\r\n          *transloco=\"let t; read: 'forms.placeholder'\"\r\n    >\r\n\r\n      <app-image-loader formControlName=\"image\"\r\n                        [imageUrl]=\"url\"\r\n      ></app-image-loader>\r\n\r\n      <app-text-input  formControlName=\"name\"\r\n                       [isRequired]=\"true\"\r\n                       [label]=\"t('spaceName')\"\r\n                       [error]=\"errors.name\"\r\n      ></app-text-input>\r\n\r\n      <app-mde-editor [isToolbarHidden]=\"false\"\r\n                      formControlName=\"about\"\r\n                      [height]=\"160\"\r\n                      [autoFocus]=\"true\"\r\n                      [placeholder]=\"t('description')\"\r\n      ></app-mde-editor>\r\n\r\n      <app-tag-input [placeholder]=\"t('tags')\"\r\n                     formControlName=\"tags\"\r\n      ></app-tag-input>\r\n\r\n      <div class=\"button-wp\" *transloco=\"let t; read: 'buttons'\">\r\n        <button (click)=\"resetForm()\"\r\n                mat-stroked-button\r\n        >\r\n          {{ type === 'edit' ? t('cancel') : t('resetForm') }}\r\n        </button>\r\n\r\n        <app-tx-button [name]=\"type === 'edit' ? t('save') : t('createSpace')\"\r\n                       (click)=\"onEditSpace()\"\r\n                       [isSending]=\"isSending\"\r\n        ></app-tx-button>\r\n      </div>\r\n    </form>\r\n  </mat-card>\r\n</section>\r\n"
        },
        {
            "name": "EmbedVideoComponent",
            "id": "component-EmbedVideoComponent-9bb9a663282b3c916dcca50ed2b4d9ac",
            "file": "src/app/ui-lib/content/embed-video/embed-video.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-embed-video",
            "styleUrls": [
                "./embed-video.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./embed-video.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "videoUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "videoId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "extractVideoId",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | ",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-embed-video',\r\n  templateUrl: './embed-video.component.html',\r\n  styleUrls: ['./embed-video.component.scss'],\r\n})\r\nexport class EmbedVideoComponent implements OnInit, OnChanges {\r\n  @Input() videoUrl: string | undefined;\r\n  videoId: string | false = '';\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.videoUrl && changes.videoUrl.currentValue) {\r\n      this.videoId = this.extractVideoId(changes.videoUrl.currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  private extractVideoId(url: string): string | false {\r\n    const regExp =\r\n      /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n    const match = url.match(regExp);\r\n    return match && match[7].length == 11 ? match[7] : false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n  ::ng-deep {\r\n    iframe {\r\n      width: 100%;\r\n      height: 430px;\r\n    }\r\n\r\n    @media only screen and (max-width: 768px) {\r\n      iframe {\r\n        height: calc(100vw / 1.77);\r\n      }\r\n    }\r\n  }\r\n\r\n",
                    "styleUrl": "./embed-video.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"videoUrl && videoId\">\r\n  <youtube-player\r\n    [videoId]=\"videoId\"\r\n  ></youtube-player>\r\n</ng-container>\r\n"
        },
        {
            "name": "ExpandParagraphComponent",
            "id": "component-ExpandParagraphComponent-90450ccdebf5efafabf07790bf9f5f27",
            "file": "src/app/ui-lib/text/expand-paragraph/expand-paragraph.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-expand-paragraph",
            "styleUrls": [
                "./expand-paragraph.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expand-paragraph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expandedText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "isMore",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-expand-paragraph',\r\n  templateUrl: './expand-paragraph.component.html',\r\n  styleUrls: ['./expand-paragraph.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ExpandParagraphComponent {\r\n  @Input() expandedText: string;\r\n  @Input() text: string;\r\n  @Input() isMore: boolean = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span {\r\n  line-height: 24px;\r\n  font-size: 17px;\r\n}\r\n",
                    "styleUrl": "./expand-paragraph.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<span *ngIf=\"isMore\">{{ text }}</span>\r\n\r\n<markdown *ngIf=\"!isMore\" class=\"markdown-body\" ngPreserveWhitespaces>\r\n  {{ expandedText }}\r\n</markdown>\r\n\r\n<app-see-more (switch)=\"isMore = !isMore\" [isAutoExpand]=\"!isMore\" type=\"expand\"></app-see-more>\r\n"
        },
        {
            "name": "FeedComponent",
            "id": "component-FeedComponent-b363d2815a5c8b141aa92bebd2fe77c6",
            "file": "src/app/main/feed/feed.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feed",
            "styleUrls": [
                "./feed.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feed.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "feedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "loadMethod",
                    "defaultValue": "'offchain'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"blockchain\" | \"offchain\"",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "post$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Post[]>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "postIds$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "postIdsSet",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getUniqueIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadIdsFromBlockchain",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadPostsFromOffchain",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLoading",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackPostById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "Post",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { AccountService } from '../../shared/services/account.service';\r\nimport {\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  switchMap,\r\n  takeUntil,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { SubsocialApiService } from '../../shared/services/subsocial-api.service';\r\nimport {\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  forkJoin,\r\n  from,\r\n  Observable,\r\n  Subject,\r\n} from 'rxjs';\r\nimport { Activity, AnySpaceId } from '@subsocial/types';\r\nimport { PostId } from '@subsocial/definitions/interfaces/subsocial/types';\r\nimport { ScrollProps } from '../../core/classes/scroll-props.class';\r\nimport { Post } from '../../core/models/post/post-list-item.model';\r\nimport { ActivityService } from '../../shared/services/activity.service';\r\nimport { PostFacade } from '../../state/post/post.facade';\r\nimport { NotificationItem } from '../../notification/notification-page/notification-page.component';\r\n\r\n@Component({\r\n  selector: 'app-feed',\r\n  templateUrl: './feed.component.html',\r\n  styleUrls: ['./feed.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FeedComponent implements OnInit {\r\n  constructor(\r\n    private accountService: AccountService,\r\n    private api: SubsocialApiService,\r\n    private activityService: ActivityService,\r\n    private cd: ChangeDetectorRef,\r\n    private postFacade: PostFacade\r\n  ) {}\r\n\r\n  public scrollProps = new ScrollProps(20);\r\n  private scrollDownEventSource = new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  );\r\n  scrollDownEvent$ = this.scrollDownEventSource.asObservable();\r\n  public scrollDistance = 1;\r\n  loading: boolean;\r\n  isBlockInfinityScroll = false;\r\n  feedCount: number;\r\n\r\n  loadMethod: 'blockchain' | 'offchain' = 'offchain';\r\n\r\n  postIds$: Observable<string[]>;\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n\r\n  post$: Observable<Post[]>;\r\n\r\n  postIdsSet = new Set<string>();\r\n\r\n  ngOnInit(): void {\r\n    if (this.loadMethod === 'blockchain') {\r\n      this.loadIdsFromBlockchain();\r\n    } else {\r\n      this.loadPostsFromOffchain();\r\n    }\r\n  }\r\n\r\n  loadPostsFromOffchain() {\r\n    this.accountService.currentAccount$\r\n      .pipe(\r\n        filter((account) => !!account),\r\n        mergeMap((account) => this.activityService.getFeedCount(account!.id)),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe((count) => {\r\n        this.feedCount = Number.parseInt(count);\r\n        this.scrollProps.max = this.feedCount;\r\n        this.cd.markForCheck();\r\n      });\r\n\r\n    this.post$ = combineLatest([\r\n      this.accountService.currentAccount$,\r\n      this.scrollDownEvent$,\r\n    ]).pipe(\r\n      filter(\r\n        ([account, props]) =>\r\n          !!account && !props.isFinish && !this.isBlockInfinityScroll\r\n      ),\r\n      tap((_) => this.setLoading(true)),\r\n      mergeMap(([account, props]) =>\r\n        this.activityService\r\n          .getFeedActivities(account!.id, props.startIndex, props.limit)\r\n          .pipe(\r\n            map(\r\n              (activities) =>\r\n                activities\r\n                  .map((activity) => activity.post_id)\r\n                  .filter((id) => !!id) as string[]\r\n            )\r\n          )\r\n      ),\r\n      tap((ids) => this.postFacade.loadPosts(ids)),\r\n      map((ids) => this.getUniqueIds(ids)),\r\n      mergeMap((ids) =>\r\n        this.postFacade.getPosts(ids).pipe(filter((posts) => posts.length > 0))\r\n      ),\r\n      tap((_) => this.setLoading(false))\r\n    );\r\n  }\r\n\r\n  getUniqueIds(ids: string[]) {\r\n    ids.forEach((id) => this.postIdsSet.add(id));\r\n    return Array.from(this.postIdsSet);\r\n  }\r\n\r\n  loadIdsFromBlockchain() {\r\n    this.postIds$ = this.accountService.currentAccount$.pipe(\r\n      filter((account) => !!account),\r\n      switchMap((account) =>\r\n        this.api.api.subsocial.substrate.spaceIdsFollowedByAccount(account!.id)\r\n      ),\r\n      switchMap((spaceIds) => {\r\n        const postIdsArray$: Observable<PostId[]>[] = [];\r\n        spaceIds.forEach((id) => {\r\n          const postIds$ = from(\r\n            this.api.api.subsocial.substrate.postIdsBySpaceId(id)\r\n          );\r\n          postIdsArray$.push(postIds$);\r\n        });\r\n\r\n        return forkJoin(postIdsArray$);\r\n      }),\r\n      map((postIdsArray) =>\r\n        postIdsArray\r\n          .flat()\r\n          .sort((a, b) => b.sub(a).toNumber())\r\n          .map((postIds) => postIds.toString())\r\n      ),\r\n      filter((ids) => ids?.length > 0),\r\n      takeUntil(this.unsubscribe$)\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n\r\n  setLoading(status: boolean) {\r\n    this.isBlockInfinityScroll = status;\r\n    this.loading = status;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  trackPostById(index: number, item: Post) {\r\n    return item.id;\r\n  }\r\n\r\n  onScrollDown() {\r\n    if (!this.isBlockInfinityScroll) {\r\n      this.scrollProps.next();\r\n      this.scrollDownEventSource.next(this.scrollProps);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.post-item-wp {\r\n  margin-top: $space_normal;\r\n}\r\n",
                    "styleUrl": "./feed.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activityService",
                        "type": "ActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"loadMethod === 'blockchain'\">\r\n  <ng-container *ngIf=\"(postIds$ | async) as postIds; else noFeed\">\r\n    <app-post-list [ids]=\"postIds\"></app-post-list>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"loadMethod === 'offchain'\">\r\n  <ng-container *ngIf=\"!!feedCount; else noFeed\">\r\n    <div\r\n      infinite-scroll\r\n      [infiniteScrollThrottle]=\"50\"\r\n      [infiniteScrollDistance]=\"scrollDistance\"\r\n      (scrolled)=\"onScrollDown()\"\r\n      [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\r\n    >\r\n      <div class=\"post-item-wp\" *ngFor=\"let post of (post$ | async); trackBy: trackPostById\">\r\n        <ng-container *ngIf=\"!post.isSharedPost\">\r\n          <app-post-item [postItemData]=\"post\"\r\n          ></app-post-item>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"post.isSharedPost\">\r\n          <app-shared-post-item [postItemData]=\"post\"></app-shared-post-item>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n\r\n    <app-spinner [showSpinner]=\"loading\"></app-spinner>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #noFeed>\r\n  <app-no-content [text]=\"'content.noFeed' | transloco\"></app-no-content>\r\n</ng-template>\r\n\r\n"
        },
        {
            "name": "FollowButtonComponent",
            "id": "component-FollowButtonComponent-d882d053b59a2dbdd3336276ce1e2924",
            "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-follow-button",
            "styleUrls": [
                "./follow-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./follow-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "isFollow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": ""
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "FollowButtonSize"
                },
                {
                    "name": "type",
                    "defaultValue": "'space'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "FollowButtonType"
                },
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "FollowButtonWidth"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_isFollow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "label",
                    "defaultValue": "STATUS.FOLLOW",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseTxComponent } from '../../../core/base-component/base-tx.component';\nimport { TransactionService } from '../../../shared/services/transaction.service';\nimport { AccountService } from '../../../shared/services/account.service';\nimport { SubmittableResult } from '@polkadot/api';\nimport { METHODS, PALLETS } from '../../../core/constants/query.const';\nimport { SignInModalService } from '../../modal-dialogs/services/sign-in-modal.service';\n\nconst STATUS = {\n  FOLLOW: 'follow',\n  FOLLOWING: 'following',\n};\n\nconst TYPE = {\n  SPACE: 'space',\n  PROFILE: 'profile',\n};\n\ntype FollowButtonType = 'space' | 'profile';\ntype FollowButtonSize = 'medium' | 'large';\ntype FollowButtonWidth = 'full' | 'static';\n\n@Component({\n  selector: 'app-follow-button',\n  templateUrl: './follow-button.component.html',\n  styleUrls: ['./follow-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FollowButtonComponent extends BaseTxComponent implements OnInit {\n  @Input() type: FollowButtonType = 'space';\n  @Input() size: FollowButtonSize = 'medium';\n  @Input() width: FollowButtonWidth = 'static';\n  @Input() entityId: string;\n  @Input() set isFollow(value: boolean | null) {\n    this.label = value ? STATUS.FOLLOWING : STATUS.FOLLOW;\n    this._isFollow = !!value;\n  }\n\n  get isFollow() {\n    return this._isFollow;\n  }\n\n  label: string = STATUS.FOLLOW;\n  _isFollow: boolean = false;\n\n  constructor(\n    public transaction: TransactionService,\n    public account: AccountService,\n    public cd: ChangeDetectorRef,\n    public signIn: SignInModalService\n  ) {\n    super(transaction, account, signIn, cd);\n  }\n\n  async ngOnInit() {}\n\n  onFailed(result: SubmittableResult | null): void {}\n\n  onSuccess(result: SubmittableResult): void {\n    this._isFollow = !this._isFollow;\n    this.label = this._isFollow ? STATUS.FOLLOWING : STATUS.FOLLOW;\n    this.cd.markForCheck();\n  }\n\n  validate(): boolean {\n    return true;\n  }\n\n  async onClick() {\n    let pallet = '';\n    let method = '';\n\n    switch (this.type) {\n      case TYPE.SPACE:\n        pallet = PALLETS.spaceFollows;\n        method =\n          this.label === STATUS.FOLLOW\n            ? METHODS.followSpace\n            : METHODS.unfollowSpace;\n        break;\n      case TYPE.PROFILE:\n        pallet = PALLETS.profileFollows;\n        method =\n          this.label === STATUS.FOLLOW\n            ? METHODS.followAccount\n            : METHODS.unfollowAccount;\n        break;\n    }\n\n    await this.initExtrinsic({\n      pallet,\n      method,\n      params: [this.entityId],\n    });\n\n    await this.sentTransaction();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n",
                    "styleUrl": "./follow-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isFollow": {
                    "name": "isFollow",
                    "setSignature": {
                        "name": "isFollow",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isFollow",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "templateData": "<app-tx-button  (click)=\"onClick();\"\r\n                *transloco=\"let t; read: 'buttons'\"\r\n                [isSending]=\"isSending\"\r\n                [name]=\"t(label)\"\r\n                [type]=\"isFollow ? 'stroked' : 'flat'\"\r\n                [width]=\"width\"\r\n></app-tx-button>\r\n"
        },
        {
            "name": "FollowersModalDialogComponent",
            "id": "component-FollowersModalDialogComponent-d7a95d39beade042aaa21abccae3142c",
            "file": "src/app/ui-lib/modal-dialogs/followers-modal-dialog/followers-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-followers-modal-dialog",
            "styleUrls": [
                "./followers-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./followers-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowersModalData",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<FollowersModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "followersIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { from } from 'rxjs';\r\nimport {\r\n  ConnectionModalData,\r\n  FollowersModalData,\r\n} from '../../../core/types/dialog-modal-data.types';\r\nimport { SpaceService } from '../../../space/services/space.service';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-followers-modal-dialog',\r\n  templateUrl: './followers-modal-dialog.component.html',\r\n  styleUrls: ['./followers-modal-dialog.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FollowersModalDialogComponent implements OnInit {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FollowersModalDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: FollowersModalData,\r\n    private spaceService: SpaceService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  followersIds: string[] = [];\r\n\r\n  ngOnInit(): void {\r\n    from(this.spaceService.getFollowersIdsBySpaceId(this.data.spaceId))\r\n      .pipe(take(1))\r\n      .subscribe((ids) => {\r\n        this.followersIds = ids;\r\n        this.cd.markForCheck();\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./followers-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FollowersModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "FollowersModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FollowersModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "FollowersModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\r\n  <div class=\"modal-header\" *transloco=\"let t; read: 'general'\">\r\n\r\n    <h2 class=\"title-medium\">{{followersIds.length + ' ' + (followersIds.length | pluralize: t('follower')) }}</h2>\r\n    <app-close-button (onClose)=\"dialogRef.close()\"></app-close-button>\r\n  </div>\r\n\r\n  <div class=\"modal-body\">\r\n    <ng-container *ngIf=\"followersIds.length > 0; else noDownload\">\r\n      <app-vote-user-list [ids]=\"followersIds\"></app-vote-user-list>\r\n    </ng-container>\r\n  </div>\r\n\r\n</div>\r\n\r\n<ng-template #noDownload>\r\n  <app-row margin=\"16px 0 0\" h=\"center\">{{ 'content.noDownload' | transloco }}</app-row>\r\n</ng-template>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-d20543db8f7ec711dc0f229bce497d5f",
            "file": "src/app/shared/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appName",
                    "defaultValue": "environment.appName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "device",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabLinkClick",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { NavigationService } from '../../services/navigation.service';\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\nimport { DeviceService } from '../../services/device.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent implements OnInit {\n  appName = environment.appName;\n\n  constructor(\n    public navService: NavigationService,\n    public device: DeviceService\n  ) {}\n\n  onTabLinkClick(tab: TabLinkData) {\n    this.navService.switchTab(tab);\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n@import \"_mixins.scss\";\r\n\r\nheader {\r\n  background: #FFFFFF;\r\n  //box-shadow: $header-shadow;\r\n  @include fixed(0, 0, 0, 2);\r\n  border-bottom: 1px solid $color_light_border;\r\n\r\n\r\n  .header-wp {\r\n    position: relative;\r\n    height: $header_height;\r\n  }\r\n\r\n  app-icon-button {\r\n    margin: 0 $space_large 0 $space_small;\r\n  }\r\n\r\n  app-notification-icon-button {\r\n    margin: 0 10px;\r\n  }\r\n}\r\n\r\n.tabs-wp {\r\n  width: $container-width;\r\n  margin: 1px auto;\r\n  @include fixed($header_height, 0, 0, 1);\r\n  padding: 16px 16px 0;\r\n  background-color: #F2F2F2;\r\n\r\n  app-tabs {\r\n    ::ng-deep {\r\n      .mat-tab-link  {\r\n        height: $header_height !important;\r\n      }\r\n\r\n      .mat-tab-link-container {\r\n        background: white;\r\n        border-radius: 4px 4px 0 0;\r\n      }\r\n\r\n      .mat-tab-header {\r\n        box-shadow: $tabs-shadow;\r\n        border: none !important;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.framework-logo {\r\n  width: 30px;\r\n  height: 30px;\r\n  margin-left: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  header {\r\n    border-bottom: none;\r\n  }\r\n\r\n  .tabs-wp {\r\n    width: 100%;\r\n    margin: 0;\r\n    position: relative;\r\n    top: 53px;\r\n    right: 0;\r\n    padding: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n    background-color: #F2F2F2;\r\n\r\n    app-tabs {\r\n      ::ng-deep {\r\n        .mat-tab-link  {\r\n          height: 48px !important;\r\n          font-size: 14px;\r\n        }\r\n\r\n        .mat-tab-link-container {\r\n          background: white;\r\n          border-radius: 0;\r\n        }\r\n\r\n        .mat-tab-header {\r\n          box-shadow: $tabs-shadow;\r\n          border: none !important;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\r\n  <app-row [padding]=\"'0 16px 0 0'\"\r\n           [h]=\"'space-between'\"\r\n           [v]=\"'center'\"\r\n           class=\"header-wp\"\r\n  >\r\n    <app-row [v]=\"'center'\">\r\n      <app-header-menu-button ifMobile></app-header-menu-button>\r\n\r\n      <mat-icon [routerLink]=\"['/']\"\r\n                class=\"framework-logo\"\r\n                ifDesktop\r\n                svgIcon=\"angular-icon\"\r\n      ></mat-icon>\r\n\r\n      <app-title type=\"medium\"\r\n                 [link]=\"'/'\"\r\n                 [text]=\"'general.title' | transloco\"\r\n                 [style.margin-left]=\"(device.isMobile$ | async) ? '10px' : '12px'\"\r\n      ></app-title>\r\n    </app-row>\r\n\r\n    <app-row [h]=\"'center'\" [v]=\"'center'\">\r\n      <app-create-entity-button ifDesktop></app-create-entity-button>\r\n      <app-notification-icon-button></app-notification-icon-button>\r\n      <app-profile-button></app-profile-button>\r\n    </app-row>\r\n\r\n  </app-row>\r\n</header>\r\n\r\n<div class=\"tabs-wp\" *ngIf=\"navService.isShowTab$ | async\">\r\n  <app-tabs [tabLinks]=\"navService.tabLinks\"\r\n            (tabClick)=\"onTabLinkClick($event)\"\r\n            [activeLink]=\"(navService.activeTab$ | async)!\"\r\n  ></app-tabs>\r\n</div>\r\n\r\n<app-left-side-menu ifDesktop></app-left-side-menu>\r\n"
        },
        {
            "name": "HeaderMenuButtonComponent",
            "id": "component-HeaderMenuButtonComponent-32164cc2c60e0351a7a91669c76f4688",
            "file": "src/app/shared/components/header-menu-button/header-menu-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-menu-button",
            "styleUrls": [
                "./header-menu-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-menu-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { LeftSideMenuComponent } from '../../../ui-lib/menu/left-side-menu/left-side-menu.component';\n\n@Component({\n  selector: 'app-header-menu-button',\n  templateUrl: './header-menu-button.component.html',\n  styleUrls: ['./header-menu-button.component.scss'],\n})\nexport class HeaderMenuButtonComponent implements OnInit {\n  constructor() {}\n\n  isOpen: boolean;\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.menu-icon {\r\n  padding-left: 16px;\r\n  display: block;\r\n\r\n  ::ng-deep {\r\n    svg {\r\n      path {\r\n        fill: $color_black;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./header-menu-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-icon-button [iconSize]=\"isOpen ? 16 : 19\"\n                 [buttonSize]=\"36\"\n                 [iconName]=\"isOpen ? 'close-icon' : 'menu-icon'\"\n                 (click)=\"isOpen = !isOpen\"\n                 class=\"menu-icon\"\n>\n</app-icon-button>\n\n<app-left-side-menu (backdropClick)=\"isOpen = false\" *ngIf=\"isOpen\" [type]=\"'switch'\"></app-left-side-menu>\n"
        },
        {
            "name": "HiddenContentComponent",
            "id": "component-HiddenContentComponent-6fbaa339ac8ada779f4595a0dd8926be",
            "file": "src/app/ui-lib/content/hidden-content/hidden-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hidden-content",
            "styleUrls": [
                "./hidden-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hidden-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"post\" | \"space\" | \"comment\""
                }
            ],
            "outputsClass": [
                {
                    "name": "switchHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "hidden$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "spaceHidden$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibilityService",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibleOperationType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibleOperationType",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setupInitExtrinsic",
                    "args": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\nimport { BaseVisibleTxComponent } from '../../../core/base-component/base-visible-tx.component';\nimport { TransactionService } from '../../../shared/services/transaction.service';\nimport { AccountService } from '../../../shared/services/account.service';\nimport { PostService } from '../../../post/services/post.service';\nimport { SpaceService } from '../../../space/services/space.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../state/state';\nimport { VisibilityService } from '../../../shared/services/visibility.service';\nimport { filter, mergeMap } from 'rxjs/operators';\nimport { PermissionsService } from '../../../shared/services/permissions.service';\nimport { Observable } from 'rxjs';\nimport { SignInModalService } from '../../modal-dialogs/services/sign-in-modal.service';\n\n@Component({\n  selector: 'app-hidden-content',\n  templateUrl: './hidden-content.component.html',\n  styleUrls: ['./hidden-content.component.scss'],\n})\nexport class HiddenContentComponent\n  extends BaseVisibleTxComponent\n  implements OnInit\n{\n  @Input() type: 'post' | 'space' | 'comment';\n  @Input() id: string;\n\n  constructor(\n    public transaction: TransactionService,\n    public account: AccountService,\n    public cd: ChangeDetectorRef,\n    public visibility: VisibilityService,\n    public signIn: SignInModalService\n  ) {\n    super(transaction, account, cd, signIn, visibility);\n  }\n\n  hidden$: Observable<boolean>;\n  spaceHidden$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.entityId = this.id;\n    this.visibleOperationType = this.type === 'comment' ? 'post' : this.type;\n\n    if (this.visibleOperationType === 'post') {\n      this.hidden$ = this.visibility.getIsPostHidden(this.id);\n      this.spaceHidden$ = this.visibility.getIsSpaceHiddenByPostId(this.id);\n    } else if (this.visibleOperationType === 'space') {\n      this.hidden$ = this.visibility.getIsSpaceHidden(this.id);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hidden-wp {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: #FEFBE8;\r\n  border-bottom: 1px solid #F1E8B3;\r\n  border-radius: 4px 4px 0 0;\r\n  height: 40px;\r\n  margin: -16px -16px 8px;\r\n\r\n  mat-icon {\r\n    margin: 0 10px 0 16px;\r\n  }\r\n\r\n  .make-visible-btn {\r\n    margin-right: 16px;\r\n    padding: 3px 10px;\r\n    border: 1px solid #D9D9D9;\r\n    border-radius: 4px;\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 125%;\r\n  }\r\n\r\n  span {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .hidden-wp {\r\n    height: 55px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./hidden-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseVisibleTxComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"(hidden$ | async) || (spaceHidden$ | async)\" class=\"hidden-wp\">\r\n  <div class=\"center-vertical\" *transloco=\"let t; read: 'generalMessages'\">\r\n    <mat-icon  svgIcon=\"info-yellow-icon\"></mat-icon>\r\n    <span *ngIf=\"!(spaceHidden$ | async)\">{{ t('hiddenMessage', { type: type }) }}</span>\r\n    <span *ngIf=\"spaceHidden$ | async\">{{ t('hiddenPostBySpace') }}</span>\r\n  </div>\r\n  <button (click)=\"show()\"\r\n          *ngIf=\"!(spaceHidden$ | async)\"\r\n          mat-ripple\r\n          class=\"make-visible-btn\"\r\n  >{{'buttons.makeVisible' | transloco}}</button>\r\n</div>\r\n"
        },
        {
            "name": "IconButtonComponent",
            "id": "component-IconButtonComponent-a83e3d5c92589d8946fdcb7708cdffc2",
            "file": "src/app/ui-lib/buttons/icon-button/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon-button",
            "styleUrls": [
                "./icon-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonSize",
                    "defaultValue": "28",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number"
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "iconSize",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-icon-button',\r\n  templateUrl: './icon-button.component.html',\r\n  styleUrls: ['./icon-button.component.scss'],\r\n})\r\nexport class IconButtonComponent implements OnInit {\r\n  @Input() iconName: string;\r\n  @Input() buttonSize: number = 28;\r\n  @Input() iconSize: number = 16;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button, mat-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./icon-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button [style.width]=\"buttonSize + 'px'\"\r\n        [style.height]=\"buttonSize + 'px'\"\r\n        [style.line-height]=\"buttonSize + 'px'\"\r\n        mat-icon-button\r\n>\r\n  <mat-icon [style.width]=\"iconSize + 'px'\"\r\n            [style.height]=\"iconSize + 'px'\"\r\n            svgIcon=\"{{iconName}}\"\r\n  ></mat-icon>\r\n</button>\r\n"
        },
        {
            "name": "ImageLoaderComponent",
            "id": "component-ImageLoaderComponent-5ba37845ca242991932e5a01f3b7ab86",
            "file": "src/app/ui-lib/input/image-loader/image-loader.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ImageLoaderComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-image-loader",
            "styleUrls": [
                "./image-loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imageUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | undefined"
                },
                {
                    "name": "type",
                    "defaultValue": "'round'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "\"round\" | \"square\""
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "fileCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "fileInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileInput'"
                        }
                    ]
                },
                {
                    "name": "fileSizeLimit",
                    "defaultValue": "environment.loadImageLimitMb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "loadImage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeImage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { TransactionService } from '../../../shared/services/transaction.service';\nimport { environment } from '../../../../environments/environment';\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SnackBarService } from '../../../shared/services/snack-bar.service';\n\n@Component({\n  selector: 'app-image-loader',\n  templateUrl: './image-loader.component.html',\n  styleUrls: ['./image-loader.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ImageLoaderComponent),\n      multi: true,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImageLoaderComponent\n  extends BaseControlValueAccessorComponent\n  implements OnInit\n{\n  @Input() imageUrl: string | undefined = '';\n  @Input() type: 'round' | 'square' = 'round';\n\n  fileCid: string;\n  fileSizeLimit = environment.loadImageLimitMb;\n\n  @ViewChild('fileInput') fileInput: ElementRef<HTMLInputElement>;\n\n  constructor(\n    private transaction: TransactionService,\n    private cd: ChangeDetectorRef,\n    private snackBar: SnackBarService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {}\n\n  openFile() {\n    this.fileInput.nativeElement.click();\n  }\n\n  async removeImage() {\n    this.imageUrl = '';\n    this.value = '';\n    await this.transaction.removeContent(this.fileCid);\n  }\n\n  writeValue(obj: any) {\n    super.writeValue(obj);\n    obj ? (this.imageUrl = environment.ipfsUrl + obj) : null;\n    this.cd.markForCheck();\n  }\n\n  async loadImage(event: any) {\n    if (!event?.target?.files[0] || event.target.files[0].length == 0) {\n      return;\n    }\n    const file = event.target.files[0];\n\n    const mimeType = file.type;\n\n    if (mimeType.match(/image\\/*/) == null) {\n      return;\n    }\n\n    if (file.size > this.fileSizeLimit * 1024 * 1024) {\n      this.snackBar.showErrorMessage('Image should be less than 2 MB');\n      return;\n    }\n\n    this.fileCid = (await this.transaction.saveFile(file)) as string;\n\n    if (this.fileCid) this.value = this.fileCid;\n\n    this.imageUrl = environment.ipfsUrl + this.fileCid;\n\n    this.cd.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n@mixin background-image {\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n}\r\n\r\n.square-container {\r\n  border: 1px solid rgb(0, 0, 0, 0.12);\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    border: 1px solid $color_primary;\r\n  }\r\n\r\n  .image-loader-wp {\r\n    margin-top: 19px;\r\n\r\n    .image-loader {\r\n    }\r\n  }\r\n\r\n  .loader-alert {\r\n    margin-top: 5px;\r\n    margin-bottom: 16px;\r\n\r\n    .secondary-text {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n.square-container-loaded {\r\n  @include background-image;\r\n  width: 100%;\r\n  min-height: 100px;\r\n  height: 20vh;\r\n  border-radius: 3.5px;\r\n  position: relative;\r\n\r\n  .button-wp {\r\n    position: absolute;\r\n    display: flex;\r\n    border-radius: 30px;\r\n    background: #000000;\r\n    opacity: 0.3;\r\n    right: 10px;\r\n    top: 10px;\r\n    padding: 0 10px;\r\n\r\n    mat-icon[svgIcon=remove-white-icon] {\r\n      width: 15px;\r\n    }\r\n  }\r\n}\r\n\r\n.round-container {\r\n  .image-loader-wp {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .image-loader {\r\n      width: 80px;\r\n      height: 80px;\r\n      border-radius: 50%;\r\n      border: 1px dashed rgba(0, 0, 0, 0.38);\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        outline: 1px solid $color_primary;\r\n      }\r\n    }\r\n\r\n    .loaded {\r\n      @include background-image;\r\n      border: none;\r\n\r\n      mat-icon {\r\n        display: none;\r\n      }\r\n\r\n      &:hover {\r\n        mat-icon {\r\n          display: block;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  .loader-alert {\r\n    margin-top: 7px;\r\n  }\r\n\r\n  &:hover {\r\n    .remove-btn {\r\n      display: block;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n.remove-btn {\r\n  display: none;\r\n  position: absolute;\r\n  top: 20%;\r\n  right: 15px;\r\n\r\n  mat-icon {\r\n    width: 14px;\r\n  }\r\n}\r\n\r\n.label {\r\n  font-size: 14px;\r\n  line-height: 125%;\r\n}\r\n\r\n.center-column {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./image-loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<ng-container *ngIf=\"type === 'round'\">\r\n  <section class=\"center-column w100 round-container\">\r\n    <div class=\"image-loader-wp\">\r\n      <ng-container *ngIf=\"!imageUrl; else isLoaded\">\r\n\r\n        <div (click)=\"openFile()\" class=\"image-loader center-column\">\r\n          <mat-icon svgIcon=\"photo-icon\"></mat-icon>\r\n          <span class=\"label\">{{ 'buttons.upload' | transloco }}</span>\r\n        </div>\r\n\r\n      </ng-container>\r\n\r\n      <div class=\"loader-alert\">\r\n        <span class=\"secondary-text\">\r\n          {{ 'imageShouldBeLessThan' | transloco: { limit: fileSizeLimit } }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <ng-template #isLoaded>\r\n      <div (click)=\"openFile()\" class=\"image-loader loaded center-column\" [ngStyle]=\"{'background-image': 'url(' + imageUrl +')'}\">\r\n        <mat-icon svgIcon=\"photo-white-icon\"></mat-icon>\r\n      </div>\r\n      <button (click)=\"removeImage()\" class=\"remove-btn\" mat-icon-button>\r\n        <mat-icon svgIcon=\"remove-icon\"></mat-icon>\r\n      </button>\r\n    </ng-template>\r\n  </section>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"type === 'square'\">\r\n  <ng-container *ngIf=\"!imageUrl; else isLoaded\">\r\n    <section (click)=\"openFile()\" class=\"center-column w100 square-container\">\r\n      <div class=\"image-loader-wp\">\r\n        <div class=\"image-loader center-column\">\r\n          <mat-icon svgIcon=\"photo-icon\"></mat-icon>\r\n          <span class=\"label\">{{ 'buttons.uploadImage' | transloco }}</span>\r\n        </div>\r\n        <div class=\"loader-alert\">\r\n          <span class=\"secondary-text\">\r\n            {{ 'imageShouldBeLessThan' | transloco: { limit: fileSizeLimit } }}\r\n          </span>\r\n        </div>\r\n\r\n      </div>\r\n    </section>\r\n  </ng-container>\r\n  <ng-template #isLoaded>\r\n    <div class=\"square-container-loaded\" [ngStyle]=\"{'background-image': 'url(' + imageUrl +')'}\">\r\n      <div class=\"button-wp\">\r\n        <button (click)=\"openFile()\" mat-icon-button>\r\n          <mat-icon svgIcon=\"photo-white-icon\"></mat-icon>\r\n        </button>\r\n        <button (click)=\"removeImage()\" mat-icon-button>\r\n          <mat-icon svgIcon=\"remove-white-icon\"></mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</ng-container>\r\n\r\n<input #fileInput type=\"file\" (change)=\"loadImage($event)\" hidden>\r\n"
        },
        {
            "name": "LeftSideMenuComponent",
            "id": "component-LeftSideMenuComponent-c74124e7f9b031a1d3fe212072f3bc1e",
            "file": "src/app/ui-lib/menu/left-side-menu/left-side-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-left-side-menu",
            "styleUrls": [
                "./left-side-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./left-side-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "'hover'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"hover\" | \"switch\""
                }
            ],
            "outputsClass": [
                {
                    "name": "backdropClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "aside",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'aside'"
                        }
                    ]
                },
                {
                    "name": "iconItems",
                    "defaultValue": "[\r\n    {\r\n      type: 'icon',\r\n      icon: 'twitter-icon',\r\n      href: LINKS.twitter,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'icon',\r\n      icon: 'discord-icon',\r\n      href: LINKS.discord,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'icon',\r\n      icon: 'telegram-icon',\r\n      href: LINKS.telegram,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'icon',\r\n      icon: 'megaphone-icon',\r\n      href: LINKS.megaphone,\r\n      className: '',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "isOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[\r\n    {\r\n      type: 'item',\r\n      title: 'React app',\r\n      icon: 'react-icon',\r\n      href: LINKS.reactApp,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Vue app',\r\n      icon: 'vue-icon',\r\n      href: LINKS.vueApp,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'divider',\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Subsocial app',\r\n      icon: 'subsocial-logo-icon',\r\n      href: LINKS.subsocialApp,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Landing page',\r\n      icon: 'world-icon',\r\n      href: LINKS.vueApp,\r\n      className: 'icon-primary-hover',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Legal Documents',\r\n      icon: 'documents-icon',\r\n      href: LINKS.github,\r\n      className: 'icon-primary-hover',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Github',\r\n      icon: 'github-ls-icon',\r\n      href: LINKS.github,\r\n      className: 'icon-primary-hover',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'What is Subsocial?',\r\n      icon: 'question-icon',\r\n      href: '',\r\n      className: 'icon-primary-hover',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                },
                {
                    "name": "onLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 129
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { LINKS } from '../../../core/constants/links.const';\r\n\r\ntype MenuItem = {\r\n  type: 'item' | 'divider' | 'icon';\r\n  className: string;\r\n  title?: string;\r\n  icon?: string;\r\n  href?: string;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-left-side-menu',\r\n  templateUrl: './left-side-menu.component.html',\r\n  styleUrls: ['./left-side-menu.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LeftSideMenuComponent implements OnInit, AfterViewInit {\r\n  @Input() type: 'hover' | 'switch' = 'hover';\r\n  @Output() backdropClick = new EventEmitter();\r\n  @ViewChild('aside') aside: ElementRef;\r\n\r\n  constructor(private renderer: Renderer2, private cd: ChangeDetectorRef) {}\r\n\r\n  menuItems: MenuItem[] = [\r\n    {\r\n      type: 'item',\r\n      title: 'React app',\r\n      icon: 'react-icon',\r\n      href: LINKS.reactApp,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Vue app',\r\n      icon: 'vue-icon',\r\n      href: LINKS.vueApp,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'divider',\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Subsocial app',\r\n      icon: 'subsocial-logo-icon',\r\n      href: LINKS.subsocialApp,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Landing page',\r\n      icon: 'world-icon',\r\n      href: LINKS.vueApp,\r\n      className: 'icon-primary-hover',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Legal Documents',\r\n      icon: 'documents-icon',\r\n      href: LINKS.github,\r\n      className: 'icon-primary-hover',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'Github',\r\n      icon: 'github-ls-icon',\r\n      href: LINKS.github,\r\n      className: 'icon-primary-hover',\r\n    },\r\n    {\r\n      type: 'item',\r\n      title: 'What is Subsocial?',\r\n      icon: 'question-icon',\r\n      href: '',\r\n      className: 'icon-primary-hover',\r\n    },\r\n  ];\r\n\r\n  iconItems: MenuItem[] = [\r\n    {\r\n      type: 'icon',\r\n      icon: 'twitter-icon',\r\n      href: LINKS.twitter,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'icon',\r\n      icon: 'discord-icon',\r\n      href: LINKS.discord,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'icon',\r\n      icon: 'telegram-icon',\r\n      href: LINKS.telegram,\r\n      className: '',\r\n    },\r\n    {\r\n      type: 'icon',\r\n      icon: 'megaphone-icon',\r\n      href: LINKS.megaphone,\r\n      className: '',\r\n    },\r\n  ];\r\n\r\n  isOpen: boolean;\r\n\r\n  @HostListener('mouseenter') onEnter() {\r\n    if (this.type === 'hover') {\r\n      this.openMenu();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave') onLeave() {\r\n    if (this.type === 'hover') {\r\n      this.closeMenu();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.type === 'switch') {\r\n      this.openMenu();\r\n    }\r\n  }\r\n\r\n  openMenu() {\r\n    this.renderer.removeClass(this.aside.nativeElement, 'close');\r\n    this.renderer.addClass(this.aside.nativeElement, 'open');\r\n  }\r\n\r\n  closeMenu() {\r\n    this.renderer.removeClass(this.aside.nativeElement, 'open');\r\n    this.renderer.addClass(this.aside.nativeElement, 'close');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isOpen = this.type === 'hover';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n@import \"mixins\";\r\n\r\n$color_icon: #888;\r\n\r\n.open {\r\n  width: 230px;\r\n  transition: width 0.4s;\r\n\r\n  .option-icon {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.close {\r\n  width: 54px;\r\n  transition: width 0.4s;\r\n\r\n  .links a span {\r\n    opacity: 0;\r\n    transition: opacity 0.5s;\r\n  }\r\n\r\n  .social-links {\r\n    .title {\r\n      display: none;\r\n      animation: fadeOut 0.5s linear;\r\n    }\r\n\r\n    a:not(:first-child) {\r\n      display: none;\r\n      animation: fadeOut 0.5s linear;\r\n    }\r\n  }\r\n}\r\n\r\naside{\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: fixed;\r\n  z-index: 1;\r\n  height: calc(100vh - #{$header_height});\r\n  background: $color_white;\r\n  top: $header_height;\r\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\r\n\r\n  .links {\r\n    overflow: hidden;\r\n    margin-top: 8px;\r\n\r\n    a {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 14px 0;\r\n      cursor: pointer;\r\n      position: relative;\r\n      color: $color_icon;\r\n\r\n      &:hover {\r\n        background-color: $color_hover_primary;\r\n        transition: background-color 0.3s;\r\n        color: $color_primary;\r\n      }\r\n\r\n      span {\r\n        @include font($font_small, 500);\r\n        white-space: nowrap;\r\n        position: absolute;\r\n        left: 54px;\r\n        opacity: 1;\r\n        transition: opacity 0.5s;\r\n      }\r\n\r\n      mat-icon {\r\n        height: 20px;\r\n        width: 20px;\r\n        margin: 0 17px;\r\n        color: $color_icon;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  mat-divider {\r\n    margin: 8px 16px;\r\n  }\r\n\r\n  .social-links {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 30px;\r\n\r\n    .title {\r\n      animation: fadeIn 0.5s linear;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    div {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: $space_normal;\r\n      overflow: hidden;\r\n\r\n      a {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 28px;\r\n        height: 28px;\r\n        border-radius: 50%;\r\n        background-color: #f0f0f0;\r\n        animation: fadeIn 0.5s linear;\r\n        border: 1px solid #f0f0f0;\r\n\r\n        &:hover {\r\n          background-color: #eaeaea;\r\n          border: 1px solid #d9d9d9;\r\n          transition: background-color 0.3s;\r\n        }\r\n\r\n\r\n        mat-icon {\r\n          width: 18px;\r\n          height: 18px;\r\n          color: $color-icon;\r\n        }\r\n      }\r\n    }\r\n\r\n    .option-icon {\r\n      position: relative;\r\n      width: 3px;\r\n      height: 15px;\r\n      left: -8px;\r\n    }\r\n\r\n    span {\r\n      @include font($font_small);\r\n      color: $color_gray_secondary;\r\n      margin-bottom: $space_normal;\r\n    }\r\n  }\r\n}\r\n\r\n.icon-primary-hover {\r\n  &:hover {\r\n    ::ng-deep {\r\n      svg {\r\n        path {\r\n          fill: $color_primary;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.backdrop {\r\n  position: fixed;\r\n  top: $header_height;\r\n  left: 0;\r\n  right: 0;\r\n  height: calc(100vh - #{$header_height});\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n.border-top {\r\n  border-top: $border_light;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n@keyframes fadeOut {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    display: none;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./left-side-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<aside #aside class=\"close\" [ngClass]=\"{'shadow': type === 'hover', 'border-top': type === 'switch'}\">\n  <app-column class=\"links\">\n    <ng-container *ngFor=\"let item of menuItems\">\n      <ng-container *ngIf=\"item.type === 'item'; else divider\">\n        <a href=\"{{item.href}}\" target=\"_blank\" [ngClass]=\"item.className\">\n          <mat-icon svgIcon=\"{{item.icon}}\"></mat-icon>\n          <span>{{item.title}}</span>\n        </a>\n      </ng-container>\n      <ng-template #divider>\n        <mat-divider class=\"divider\"></mat-divider>\n      </ng-template>\n    </ng-container>\n  </app-column>\n  <section class=\"social-links\">\n    <span class=\"title\">Our social links:</span>\n    <div>\n      <ng-container *ngFor=\"let icon of iconItems\">\n        <a href=\"{{icon.href}}\"  target=\"_blank\">\n          <mat-icon svgIcon=\"{{icon.icon}}\"></mat-icon>\n        </a>\n      </ng-container>\n    </div>\n  </section>\n</aside>\n\n<div *ngIf=\"type === 'switch'\"\n     (click)=\"backdropClick.emit()\"\n     class=\"backdrop border-top\"\n></div>\n"
        },
        {
            "name": "LinkIconsComponent",
            "id": "component-LinkIconsComponent-777bc375e5f0192ffc3eb531460ec1cf",
            "file": "src/app/shared/components/link-icons/link-icons.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-link-icons",
            "styleUrls": [
                "./link-icons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./link-icons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_links",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { NamedLink } from '@subsocial/types';\r\n\r\n@Component({\r\n  selector: 'app-link-icons',\r\n  templateUrl: './link-icons.component.html',\r\n  styleUrls: ['./link-icons.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LinkIconsComponent implements OnInit {\r\n  @Input() set links(value: Array<string> | NamedLink[]) {\r\n    this._links = value as string[];\r\n  }\r\n\r\n  _links: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n@mixin flex-center {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n:host {\r\n  @include flex-center;\r\n}\r\n\r\ndiv {\r\n  @include flex-center;\r\n  margin-right: $space_small;\r\n\r\n  mat-icon {\r\n    height: $space_large;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./link-icons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "links": {
                    "name": "links",
                    "setSignature": {
                        "name": "links",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Array<string> | NamedLink[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Array<string> | NamedLink[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div *ngFor=\"let link of _links\"\r\n     matTooltipPosition=\"above\"\r\n     matTooltip=\"{{link}}\"\r\n>\r\n  <a target=\"_blank\" href=\"{{link}}\">\r\n    <mat-icon svgIcon=\"{{link | linkToIcon}}-icon\"></mat-icon>\r\n  </a>\r\n</div>\r\n\r\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-7f7eccccbe090405381b90f27b5668c0",
            "file": "src/app/main/main/main.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "./main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "postIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "spaceIds",
                    "defaultValue": "environment.recommendedSpaceIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigationService } from '../../shared/services/navigation.service';\nimport { environment } from '../../../environments/environment';\nimport { PostService } from '../../post/services/post.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { Activity } from '@subsocial/types';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MainComponent implements OnInit, OnDestroy {\n  private unsubscribe$: Subject<void> = new Subject();\n  spaceIds = environment.recommendedSpaceIds;\n  postIds: string[] = [];\n  constructor(\n    public navService: NavigationService,\n    private route: ActivatedRoute,\n    private postService: PostService,\n    private cd: ChangeDetectorRef,\n    private http: HttpClient\n  ) {}\n\n  ngOnInit(): void {\n    this.navService.showTab();\n    const initTab = this.route.snapshot.queryParams['tab'];\n    initTab\n      ? this.navService.switchTab(\n          this.navService.tabLinks.find((tab) => tab.tabName === initTab) ||\n            this.navService.tabLinks[0]\n        )\n      : this.navService.switchTab(this.navService.tabLinks[0]);\n\n    this.postService\n      .getSuggestedPostsIds()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((ids) => {\n        this.postIds = ids;\n        this.cd.markForCheck();\n      });\n\n    // this.http\n    //   .get<Activity[]>(\n    //     'https://app.subsocial.network/offchain/v1/offchain/feed/3t8GGfcxxXiTUmGiTKp2jS611wucGs4K7zvr2UmXrawoWYLD?offset=0&limit=20'\n    //   )\n    //   .subscribe(console.log);\n  }\n\n  ngOnDestroy(): void {\n    this.navService.hideTab();\n    this.unsubscribe$?.next();\n    this.unsubscribe$?.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n@import \"_mixins.scss\";\r\n\r\n.main-container{\r\n  margin-top: 148px;\r\n}\r\n\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .main-container{\r\n    margin-top: 72px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "navService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"main-container\">\r\n  <ng-container *ngIf=\"(navService.activeTab$ | async)?.tabName === 'posts'\">\r\n    <ng-container *ngIf=\"postIds.length > 0\">\r\n      <app-post-list [ids]=\"postIds\"></app-post-list>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"(navService.activeTab$ | async)?.tabName  === 'spaces'\">\r\n    <ng-container *ngIf=\"spaceIds.length > 0\">\r\n      <app-space-list [ids]=\"spaceIds\"></app-space-list>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"(navService.activeTab$ | async)?.tabName  === 'feed'\">\r\n    <app-feed></app-feed>\r\n  </ng-container>\r\n</div>\r\n\r\n"
        },
        {
            "name": "MdeEditorComponent",
            "id": "component-MdeEditorComponent-a1d97ee7ae3b4a06d6d65f9ffc1f39a0",
            "file": "src/app/ui-lib/input/mde-editor/mde-editor.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MdeEditorComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-mde-editor",
            "styleUrls": [
                "./mde-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mde-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "height",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number"
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean"
                },
                {
                    "name": "isToolbarHidden",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "focus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "codemirror",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "simplemde",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "textArea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textarea'"
                        }
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_getWin",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getElementByClass",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettings",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ element: any; placeholder: string; status: boolean; autofocus: boolean; spellChecker: boolean; previewRender: (text: string) => any; }",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initSimpleMDE",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "listenEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setInitView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport sanitizeHtml from 'sanitize-html';\n\n@Component({\n  selector: 'app-mde-editor',\n  templateUrl: './mde-editor.component.html',\n  styleUrls: ['./mde-editor.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MdeEditorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class MdeEditorComponent\n  extends BaseControlValueAccessorComponent\n  implements OnInit, AfterViewInit, OnChanges\n{\n  @Input() placeholder: string = '';\n  @Input() isToolbarHidden: boolean = true;\n  @Input() autoFocus: boolean = false;\n  @Input() isRequired: boolean = false;\n  @Input() height: number = 20;\n  @Output() focus = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @ViewChild('textarea') textArea: ElementRef;\n\n  codemirror: HTMLElement;\n  simplemde: any;\n\n  constructor(\n    @Inject(DOCUMENT) private doc: any,\n    private renderer: Renderer2,\n    private el: ElementRef\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.isRequired && !changes.isRequired.firstChange) {\n      this.handleRequired();\n    }\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit(): void {\n    this.initSimpleMDE();\n    this.listenEvents();\n    this.setHeight();\n    this.handleRequired();\n  }\n\n  private initSimpleMDE() {\n    if (this.isToolbarHidden && !this.autoFocus) {\n      this.setInitView();\n    }\n\n    const element = <HTMLElement>this.textArea.nativeElement;\n    const win = this._getWin();\n\n    if (typeof win.SimpleMDE === 'undefined') {\n      throw new Error(`Could not find SimpleMDE object.`);\n    }\n\n    this.simplemde = new win.SimpleMDE(this.getSettings(element));\n\n    if (this.value) {\n      this.simplemde.value(this.value);\n    }\n  }\n\n  private listenEvents() {\n    this.simplemde.codemirror.on('change', () => {\n      this.value = sanitizeHtml(this.simplemde.value());\n    });\n\n    this.simplemde.codemirror.on('focus', () => {\n      this.focus.emit();\n    });\n\n    this.simplemde.codemirror.on('blur', () => {\n      this.blur.emit();\n    });\n\n    this.codemirror = this.getElementByClass('.CodeMirror-empty');\n\n    if (this.codemirror) {\n      this.renderer.listen(this.codemirror, 'click', () => {\n        this.renderer.removeClass(this.el.nativeElement, 'init');\n      });\n    }\n  }\n\n  setInitView() {\n    this.renderer.addClass(this.el.nativeElement, 'init');\n  }\n\n  writeValue(obj: any) {\n    super.writeValue(obj);\n    this.isToolbarHidden = !obj;\n    this.simplemde?.value(obj || '');\n  }\n\n  private setHeight() {\n    const codemirror = this.getElementByClass('.CodeMirror');\n    const codemirrorScroll = this.getElementByClass('.CodeMirror-scroll');\n\n    this.renderer.setStyle(codemirror, 'min-height', this.height + 'px');\n    this.renderer.setStyle(codemirrorScroll, 'min-height', this.height + 'px');\n  }\n\n  private getSettings(element: HTMLElement) {\n    return {\n      element,\n      placeholder: this.placeholder,\n      status: false,\n      autofocus: this.autoFocus,\n      spellChecker: false,\n      previewRender: (text: string) => sanitizeHtml(text),\n    };\n  }\n\n  private getElementByClass(className: string) {\n    return <HTMLElement>this.el.nativeElement.querySelector(className);\n  }\n\n  private _getWin(): any {\n    return this.doc.defaultView || window;\n  }\n\n  private handleRequired() {\n    const codemirror = this.getElementByClass('.CodeMirror');\n    if (this.isRequired) {\n      this.renderer.addClass(codemirror, 'required');\n    } else {\n      this.renderer.removeClass(codemirror, 'required');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var\";\r\n\r\n.init {\r\n  .editor-toolbar {\r\n    display: none;\r\n  }\r\n\r\n  .CodeMirror {\r\n    padding: 4px 10px;\r\n    border-radius: $space_mini;\r\n\r\n    &:hover {\r\n      border-color: $color_primary;\r\n    }\r\n  }\r\n}\r\n\r\n.editor-toolbar {\r\n  opacity: 1;\r\n  border: 1px solid #ddd;\r\n  border-bottom: none;\r\n\r\n  a {\r\n    color: $color_black !important;\r\n  }\r\n}\r\n\r\n.CodeMirror .CodeMirror-placeholder {\r\n  opacity: 1;\r\n  color: $color_gray_dark;\r\n}\r\n\r\n.CodeMirror {\r\n  z-index: 0;\r\n\r\n  &:hover {\r\n    border-color: $color_primary;\r\n  }\r\n}\r\n\r\n.CodeMirror-fullscreen {\r\n z-index: 9 !important;\r\n}\r\n\r\n.required {\r\n  .CodeMirror-placeholder {\r\n    &::before {\r\n      content: \"*\";\r\n      color: $color_red;\r\n      font-weight: 500;\r\n      font-size: 17px;\r\n      margin-right: 2px;\r\n  }\r\n  }\r\n}\r\n\r\n.mde-error {\r\n  top: 5px;\r\n}\r\n",
                    "styleUrl": "./mde-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "doc",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "doc",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<textarea #textarea></textarea>\n<div *ngIf=\"error\"\n     class=\"error-wp mde-error\"\n     [@errorsAnimations]\n>\n  <span>{{error}}</span>\n</div>\n"
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-8a881106bf198e25369417a3b0443ede",
            "file": "src/app/ui-lib/menu/menu-item/menu-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu-item",
            "styleUrls": [
                "./menu-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "iconSize",
                    "defaultValue": "22",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-menu-item',\n  templateUrl: './menu-item.component.html',\n  styleUrls: ['./menu-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuItemComponent implements OnInit {\n  @Input() title: string;\n  @Input() iconName: string;\n  @Input() iconSize: number = 22;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\nspan {\r\n  font-size: $font_normal;\r\n  color: $color_gray_dark;\r\n}\r\n\r\nbutton {\r\n  ::ng-deep {\r\n    mat-icon {\r\n      svg {\r\n        path {\r\n          fill: $color_gray_dark;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./menu-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button mat-menu-item>\n\n  <mat-icon [style.width]=\"'22px'\"\n            [style.height]=\"iconSize + 'px'\"\n            [svgIcon]=\"iconName\"\n  ></mat-icon>\n\n  <span>{{ title }}</span>\n\n</button>\n"
        },
        {
            "name": "NoContentComponent",
            "id": "component-NoContentComponent-16b4f8d91ea44b46ab2a2185306543c5",
            "file": "src/app/ui-lib/content/no-content/no-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-no-content",
            "styleUrls": [
                "./no-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./no-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-no-content',\r\n  templateUrl: './no-content.component.html',\r\n  styleUrls: ['./no-content.component.scss'],\r\n})\r\nexport class NoContentComponent implements OnInit {\r\n  @Input() text: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 70px;\r\n}\r\n",
                    "styleUrl": "./no-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\r\n  <span>{{ text }}</span>\r\n</mat-card>\r\n"
        },
        {
            "name": "NotificationIconButtonComponent",
            "id": "component-NotificationIconButtonComponent-17b9184c2a088c4ccba1f2297ec9b386",
            "file": "src/app/ui-lib/buttons/notification-icon-button/notification-icon-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-icon-button",
            "styleUrls": [
                "./notification-icon-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-icon-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentAccount$",
                    "defaultValue": "this.account.currentAccount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "notificationCount$",
                    "defaultValue": "this.notificationService.notificationCount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "notificationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NotificationService } from '../../../notification/services/notification.service';\nimport { AccountService } from '../../../shared/services/account.service';\n\n@Component({\n  selector: 'app-notification-icon-button',\n  templateUrl: './notification-icon-button.component.html',\n  styleUrls: ['./notification-icon-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationIconButtonComponent {\n  notificationCount$ = this.notificationService.notificationCount$;\n  currentAccount$ = this.account.currentAccount$;\n\n  constructor(\n    public notificationService: NotificationService,\n    public account: AccountService\n  ) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 8px;\r\n}\r\n",
                    "styleUrl": "./notification-icon-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-icon-button *ngIf=\"currentAccount$ | async\"\n                 matBadge=\"{{ notificationCount$ | async }}\"\n                 matBadgeColor=\"warn\"\n                 [matBadgeHidden]=\"!( notificationCount$ | async )\"\n                 [iconSize]=\"24\"\n                 [buttonSize]=\"26\"\n                 [iconName]=\"'bell-icon'\"\n                 [routerLink]=\"['/notifications']\"\n></app-icon-button>\n"
        },
        {
            "name": "NotificationItemComponent",
            "id": "component-NotificationItemComponent-566d86ca78ec30744919fceac85c1f27",
            "file": "src/app/notification/notification-item/notification-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-item",
            "styleUrls": [
                "./notification-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "notification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "NotificationItem"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { NotificationItem } from '../notification-page/notification-page.component';\r\n\r\n@Component({\r\n  selector: 'app-notification-item',\r\n  templateUrl: './notification-item.component.html',\r\n  styleUrls: ['./notification-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NotificationItemComponent implements OnInit {\r\n  @Input() notification: NotificationItem;\r\n\r\n  constructor() {}\r\n\r\n  async ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n:host {\r\n  width: 100%;\r\n  max-width: 100%;\r\n}\r\n\r\n.notification-item {\r\n  height: 77px;\r\n}\r\n\r\n.description {\r\n  display: flex;\r\n  height: 20px;\r\n  overflow: hidden;\r\n  max-width: 617px;\r\n\r\n  &>*:not(:last-child) {\r\n    padding-right: 4px;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  a {\r\n    font-weight: 500;\r\n    text-overflow: ellipsis;\r\n\r\n    &:hover {\r\n      color: $color_primary;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n\r\n.date {\r\n  font-size: $font_small;\r\n  color: $color_gray_dark;\r\n}\r\n\r\n.ellipsis {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .notification-item {\r\n    height: auto;\r\n    padding: 8px 0;\r\n  }\r\n\r\n  .ellipsis {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: inline;\r\n  }\r\n\r\n  .description {\r\n    display: block;\r\n    height: auto;\r\n    overflow: hidden;\r\n    max-width: none;\r\n    width: 100%;\r\n\r\n    &>*:not(:last-child) {\r\n      padding-right: 4px;\r\n      white-space: normal;\r\n    }\r\n\r\n    a {\r\n      font-weight: 500;\r\n      text-overflow: inherit;\r\n      white-space: normal;\r\n\r\n\r\n      &:hover {\r\n        color: $color_primary;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./notification-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"notification\">\n\n  <app-row v=\"center\" h=\"space-between\" class=\"notification-item\">\n\n    <app-row>\n\n      <app-avatar [jdentityValue]=\"notification.profileId\"\n                  [src]=\"notification.avatar\"\n                  [routerLink]=\"notification.profileLink\"\n                  [size]=\"46\"\n      ></app-avatar>\n\n      <app-column [margin]=\"'0 0 0 8px'\" h=\"space-between\">\n\n        <div class=\"description\" *transloco=\"let t; read: 'notifications'\">\n\n          <a [routerLink]=\"notification.profileLink\">\n            {{notification.profileName || (notification.profileId | addressHidden)}}\n          </a>\n\n          <span *ngIf=\"notification.aggregate\">\n            {{t('aggregate', {count: notification.aggregate.toString()}) }}\n          </span>\n\n          <span>{{t(notification.event)}}</span>\n\n          <div class=\"ellipsis\">\n            <a [routerLink]=\"notification.contentLink\">\n              {{notification.name}}\n            </a>\n          </div>\n\n        </div>\n\n\n        <div class=\"date\">{{notification.date | day}}</div>\n\n      </app-column>\n\n    </app-row>\n\n    <app-post-image type=\"notification\"\n                    [image]=\"notification.image\"\n                    [link]=\"notification.contentLink\"\n    ></app-post-image>\n\n  </app-row>\n\n</ng-container>\n"
        },
        {
            "name": "NotificationPageComponent",
            "id": "component-NotificationPageComponent-b37b26453279a5164bf9d29068721953",
            "file": "src/app/notification/notification-page/notification-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-page",
            "styleUrls": [
                "./notification-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "isFirstNotifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationItem[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\n    this.scrollProps\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "wsSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebSocketSubject<>",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "accountFollowedHandle",
                    "args": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearNotificationsCount",
                    "args": [
                        {
                            "name": "activities",
                            "type": "Activity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activities",
                            "type": "Activity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createItem",
                    "args": [
                        {
                            "name": "props",
                            "type": "NotificationInfoProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "NotificationInfoProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotification",
                    "args": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleActivityWithPost",
                    "args": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleActivityWithSpace",
                    "args": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activity",
                            "type": "Activity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initWebsocketConnection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadActivitiesEntityData",
                    "args": [
                        {
                            "name": "activities",
                            "type": "Activity[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activities",
                            "type": "Activity[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLoading",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "NotificationItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "NotificationItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { NotificationService } from '../services/notification.service';\nimport { AccountService } from '../../shared/services/account.service';\nimport {\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\nimport { Activity } from '@subsocial/types';\nimport { AppState } from '../../state/state';\nimport { Store } from '@ngrx/store';\nimport { PostFacade } from '../../state/post/post.facade';\nimport { ProfileFacade } from '../../state/profile/profile.facade';\nimport { SpaceFacade } from '../../state/space/space.facade';\nimport { ScrollProps } from '../../core/classes/scroll-props.class';\nimport { BehaviorSubject, forkJoin, Subject } from 'rxjs';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { environment } from '../../../environments/environment';\n\nexport type NotificationItem = {\n  id: string;\n  profileId: string;\n  profileName: string;\n  profileLink: string;\n  aggregate: number;\n  event: string;\n  name: string;\n  contentLink: string;\n  date: string;\n  avatar: string;\n  image: string;\n};\n\ntype NotificationInfoProps = {\n  contentLink?: string;\n  image?: string;\n  name?: string;\n};\n\n@Component({\n  selector: 'app-notification-page',\n  templateUrl: './notification-page.component.html',\n  styleUrls: ['./notification-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPageComponent implements OnInit, OnDestroy {\n  constructor(\n    private notificationService: NotificationService,\n    private accountService: AccountService,\n    private cd: ChangeDetectorRef,\n    private store: Store<AppState>,\n    private postFacade: PostFacade,\n    private profileFacade: ProfileFacade,\n    private spaceFacade: SpaceFacade\n  ) {}\n\n  wsSubject: WebSocketSubject<unknown>;\n  notifications: NotificationItem[] = [];\n  public scrollProps = new ScrollProps(20);\n  private scrollDownEventSource = new BehaviorSubject<ScrollProps>(\n    this.scrollProps\n  );\n  scrollDownEvent$ = this.scrollDownEventSource.asObservable();\n  public scrollDistance = 1;\n  loading: boolean;\n  isBlockInfinityScroll = false;\n  isFirstNotifications: boolean;\n\n  private unsubscribe$: Subject<void> = new Subject();\n\n  ngOnInit(): void {\n    this.notificationService.getNotificationCount().subscribe((count) => {\n      this.scrollProps.max = count;\n    });\n\n    this.initWebsocketConnection();\n\n    this.scrollProps.max = Number.MAX_SAFE_INTEGER;\n    this.scrollDownEvent$\n      .pipe(\n        mergeMap((props) =>\n          this.accountService.currentAccount$.pipe(\n            filter((account) => !!account),\n            map((account) => {\n              return { id: account!.id, props };\n            }),\n            tap((account) => this.wsSubject.next(account.id))\n          )\n        ),\n        filter(({ id, props }) => !props.isFinish),\n        tap((_) => this.setLoading(true)),\n        tap(\n          ({ id, props }) =>\n            (this.isFirstNotifications = props.startIndex === 0)\n        ),\n        switchMap(({ id, props }) => {\n          this.isBlockInfinityScroll = true;\n          return this.notificationService.loadNotificationActivity(\n            id,\n            props.startIndex,\n            this.scrollProps.limit\n          );\n        }),\n        tap((activities) => this.loadActivitiesEntityData(activities)),\n        // tap((activities) => this.clearNotificationsCount(activities)),\n        switchMap((activities) =>\n          forkJoin(activities.map((activity) => this.getNotification(activity)))\n        ),\n        takeUntil(this.unsubscribe$)\n      )\n      .subscribe((notifications) => {\n        this.notifications = [...this.notifications, ...notifications];\n        this.setLoading(false);\n        this.isBlockInfinityScroll = false;\n        this.cd.markForCheck();\n      });\n  }\n\n  setLoading(status: boolean) {\n    this.loading = status;\n    this.cd.markForCheck();\n  }\n\n  clearNotificationsCount(activities: Activity[]) {\n    const lastActivity = activities[0];\n    if (\n      environment.enableSessionKey &&\n      lastActivity &&\n      this.isFirstNotifications\n    ) {\n      const accountId = this.accountService.getCurrentAccountId();\n      accountId &&\n        this.notificationService.readAllNotifications(\n          lastActivity.block_number,\n          lastActivity.event_index,\n          accountId,\n          this.wsSubject\n        );\n    }\n  }\n\n  initWebsocketConnection() {\n    this.wsSubject = webSocket(environment.offchainWs);\n\n    this.wsSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(\n      (count) => this.notificationService.setNotificationCount(count as string),\n      (err) => console.error('Unexpected Websocket Error:', err)\n    );\n  }\n\n  loadActivitiesEntityData(activities: Activity[]) {\n    const spaceIdsSet = new Set<string>();\n    const postIdsSet = new Set<string>();\n    const profileIdsSet = new Set<string>();\n\n    activities.forEach((activity) => {\n      activity.space_id ? spaceIdsSet.add(activity.space_id) : null;\n      activity.post_id ? postIdsSet.add(activity.post_id) : null;\n      activity.comment_id ? postIdsSet.add(activity.comment_id) : null;\n      activity.account ? profileIdsSet.add(activity.account) : null;\n    });\n\n    const spaceIds = Array.from(spaceIdsSet);\n    const postIds = Array.from(postIdsSet);\n    const profileIds = Array.from(profileIdsSet);\n\n    this.postFacade.loadPosts(postIds, 'all');\n    this.spaceFacade.loadSpaces(spaceIds);\n    this.profileFacade.loadProfiles(profileIds);\n  }\n\n  getNotification(activity: Activity) {\n    switch (activity.event) {\n      case 'AccountFollowed':\n        return this.accountFollowedHandle(activity);\n      case 'SpaceFollowed':\n        return this.handleActivityWithSpace(activity);\n      case 'SpaceCreated':\n        return this.handleActivityWithSpace(activity);\n      case 'CommentCreated':\n        return this.handleActivityWithPost(activity);\n      case 'CommentReplyCreated':\n        return this.handleActivityWithPost(activity);\n      case 'PostShared':\n        return this.handleActivityWithPost(activity);\n      case 'CommentShared':\n        return this.handleActivityWithPost(activity);\n      case 'PostReactionCreated':\n        return this.handleActivityWithPost(activity);\n      case 'CommentReactionCreated':\n        return this.handleActivityWithPost(activity);\n      case 'PostCreated':\n        return this.handleActivityWithPost(activity);\n    }\n  }\n\n  handleActivityWithPost(activity: Activity) {\n    return this.postFacade.getPostOnce(activity.post_id!).pipe(\n      switchMap((post) =>\n        this.createItem(\n          {\n            image: post?.imageUrl,\n            name: post?.title || 'link',\n            contentLink: post?.postLink,\n          },\n          activity\n        )\n      )\n    );\n  }\n\n  handleActivityWithSpace(activity: Activity) {\n    return this.spaceFacade.getSpaceOnce(activity.space_id!).pipe(\n      switchMap((space) =>\n        this.createItem(\n          {\n            image: space?.image,\n            name: space?.name,\n            contentLink: '/' + space?.id,\n          },\n          activity\n        )\n      )\n    );\n  }\n\n  accountFollowedHandle(activity: Activity) {\n    return this.profileFacade.getProfileOnce(activity.following_id!).pipe(\n      switchMap((profile) =>\n        this.createItem(\n          {\n            image: profile?.avatar,\n            name: profile?.name || profile?.id,\n            contentLink: '/accounts/' + profile?.id,\n          },\n          activity\n        )\n      )\n    );\n  }\n\n  createItem(props: NotificationInfoProps, activity: Activity) {\n    return this.profileFacade.getProfileOnce(activity.account).pipe(\n      map((profile) => {\n        return {\n          id: profile!.id + activity.date,\n          profileName: profile!.name,\n          profileId: profile!.id,\n          aggregate: activity.agg_count,\n          event: activity.event,\n          name: props.name,\n          date: activity.date,\n          avatar: profile!.avatar || '',\n          image: props.image || '',\n          contentLink: props.contentLink,\n\n          profileLink: '/accounts/' + profile!.id,\n        } as NotificationItem;\n      })\n    );\n  }\n\n  onScrollDown() {\n    if (!this.isBlockInfinityScroll) {\n      this.scrollProps.next();\n      this.scrollDownEventSource.next(this.scrollProps);\n    }\n  }\n\n  trackById(index: number, item: NotificationItem) {\n    return item.id;\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$?.next();\n    this.unsubscribe$?.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.notification-wp {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid $color_border_list;\r\n}\r\n\r\napp-title {\r\n  margin-top: 8px;\r\n}\r\n",
                    "styleUrl": "./notification-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileFacade",
                        "type": "ProfileFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileFacade",
                        "type": "ProfileFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card>\r\n  <app-title type=\"medium\" [text]=\"'notifications.title' | transloco\"></app-title>\r\n\r\n    <div\r\n      infinite-scroll\r\n      [infiniteScrollThrottle]=\"50\"\r\n      [infiniteScrollDistance]=\"scrollDistance\"\r\n      (scrolled)=\"onScrollDown()\"\r\n      [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\r\n    >\r\n      <div class=\"notification-wp\" *ngFor=\"let notification of notifications; trackBy: trackById\">\r\n        <app-notification-item [notification]=\"notification\"></app-notification-item>\r\n      </div>\r\n    </div>\r\n\r\n  <app-spinner [showSpinner]=\"loading\"></app-spinner>\r\n</mat-card>\r\n"
        },
        {
            "name": "ParagraphComponent",
            "id": "component-ParagraphComponent-186a5a2dd779a00dc9467e5af1fabae6",
            "file": "src/app/ui-lib/text/paragraph/paragraph.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-paragraph",
            "styleUrls": [
                "./paragraph.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paragraph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isAutoExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "isShowMore",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "marginBottom",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "marginTop",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-paragraph',\r\n  templateUrl: './paragraph.component.html',\r\n  styleUrls: ['./paragraph.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ParagraphComponent implements OnInit {\r\n  @Input() text: string | undefined;\r\n  @Input() isShowMore: boolean = false;\r\n  @Input() link: string = '';\r\n  @Input() marginTop: number = 0;\r\n  @Input() marginBottom: number = 0;\r\n  @Input() isAutoExpand: boolean;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\r\n\r\n}\r\n",
                    "styleUrl": "./paragraph.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p\r\n  [ngStyle]=\"{\r\n  'margin-block-start': marginTop + 'px',\r\n  'margin-block-end': marginBottom + 'px'\r\n  }\"\r\n>{{text}}\r\n  <app-see-more [link]=\"link\" [isAutoExpand]=\"isAutoExpand\" *ngIf=\"isShowMore\"></app-see-more>\r\n</p>\r\n"
        },
        {
            "name": "PostComponent",
            "id": "component-PostComponent-7bbec56705de194b4eab6aeb5ccc8df1",
            "file": "src/app/post/post/post.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post",
            "styleUrls": [
                "./post.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commentData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommentItemData[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "commentPostData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommentPostData",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "isHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isSharedPostHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "post$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Post | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "repliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "sharedPost$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Post | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "space$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Space | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleIfPostIsComment",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ]
                },
                {
                    "name": "handleSharedPost",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onSwitchHidden",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onViewReaction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnDestroy,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { LinkService } from '../../shared/services/link.service';\r\nimport {\r\n  concatMap,\r\n  filter,\r\n  map,\r\n  shareReplay,\r\n  switchMap,\r\n  takeUntil,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { Post } from '../../core/models/post/post-list-item.model';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../state/state';\r\nimport { CommentItemData } from '../../core/types/comment-data.type';\r\nimport { CommentService } from '../../shared/services/comment.service';\r\nimport { Space } from '../../state/space/space.state';\r\nimport { PostFacade } from '../../state/post/post.facade';\r\nimport { SpaceFacade } from '../../state/space/space.facade';\r\n\r\ntype CommentPostData = {\r\n  postTitle: string;\r\n  link: string;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-post',\r\n  templateUrl: './post.component.html',\r\n  styleUrls: ['./post.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class PostComponent implements OnInit, OnDestroy {\r\n  post$: Observable<Post | undefined>;\r\n  space$: Observable<Space | undefined>;\r\n  sharedPost$: Observable<Post | undefined>;\r\n\r\n  commentData: CommentItemData[] = [];\r\n  commentPostData: CommentPostData;\r\n  isSharedPostHidden: boolean;\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n  isHidden: boolean;\r\n  repliesCount: number;\r\n\r\n  constructor(\r\n    private store: Store<AppState>,\r\n    private route: ActivatedRoute,\r\n    private linkService: LinkService,\r\n    private cd: ChangeDetectorRef,\r\n    private commentService: CommentService,\r\n    private postFacade: PostFacade,\r\n    private spaceFacade: SpaceFacade,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    const ids$ = this.route.params.pipe(\r\n      map((params) => {\r\n        const slug = params['slug'];\r\n        const spaceId = params['spaceId'];\r\n        return [this.linkService.getPostIdFromLink(slug), spaceId];\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n\r\n    this.post$ = ids$.pipe(\r\n      tap(([postId]) => this.postFacade.loadPost(postId)),\r\n      switchMap(([postId]) => this.postFacade.getPost(postId)),\r\n      filter((post) => !!post)\r\n    );\r\n\r\n    this.space$ = ids$.pipe(\r\n      tap(([, spaceId]) => this.spaceFacade.loadSpace(spaceId)),\r\n      switchMap(([, spaceId]) => this.spaceFacade.getSpace(spaceId))\r\n    );\r\n\r\n    this.handleSharedPost();\r\n  }\r\n\r\n  private async handleIfPostIsComment() {\r\n    // if (this.postData.isComment && this.postData.rootPostId) {\r\n    //   const parentPostData = (await this.postService.getOrLoadPost(\r\n    //     this.postData.rootPostId\r\n    //   )) as Post;\r\n    //   this.commentPostData = {\r\n    //     postTitle: parentPostData.title,\r\n    //     link: parentPostData.postLink,\r\n    //   };\r\n    //   this.postData.spaceName = parentPostData.spaceName;\r\n    //   this.postData.spaceId = parentPostData.spaceId;\r\n    // }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n\r\n  onSwitchHidden() {\r\n    this.isHidden = !this.isHidden;\r\n  }\r\n\r\n  handleSharedPost() {\r\n    this.sharedPost$ = this.post$.pipe(\r\n      concatMap((post) => {\r\n        if (post?.isSharedPost && post.sharedPostId) {\r\n          return this.postFacade.fetchPost(post.sharedPostId);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  onViewReaction() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.post-image {\r\n  margin-bottom: $space_normal;\r\n}\r\n\r\n.action-panel-wp {\r\n  display: block;\r\n  margin-top: $space_tiny;\r\n  margin-bottom: -$space_tiny !important;\r\n}\r\n\r\n.comment-card {\r\n  padding-bottom: $space_mini;\r\n  margin-top: $space_normal;\r\n}\r\n\r\napp-title {\r\n  margin-bottom: $space_normal;\r\n}\r\n\r\napp-post-item {\r\n  margin-top: 10px;\r\n}\r\n",
                    "styleUrl": "./post.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "linkService",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkService",
                        "type": "LinkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"(post$ | async) as post\">\r\n    <mat-card>\r\n\r\n      <app-hidden-content [id]=\"post.id\"\r\n                          [type]=\"'post'\"\r\n      ></app-hidden-content>\r\n\r\n      <app-column  [margin]=\"'0 0 16px 0'\">\r\n        <app-row [h]=\"'space-between'\"\r\n                 [v]=\"'center'\"\r\n                 [margin]=\"'0 0 16px 0'\"\r\n        >\r\n\r\n          <app-post-info [userName]=\"post.ownerName\"\r\n                         [spaceName]=\"post.spaceName\"\r\n                         [imageUrl]=\"post.ownerImageUrl\"\r\n                         [createdAtTime]=\"post.createdAtTime\"\r\n                         [ownerId]=\"post.ownerId\"\r\n                         [spaceLink]=\"post.spaceLink\"\r\n          ></app-post-info>\r\n\r\n          <app-post-menu [post]=\"post\"\r\n                         (onClickViewReaction)=\"onViewReaction()\"\r\n          ></app-post-menu>\r\n\r\n        </app-row>\r\n\r\n        <app-embed-video [videoUrl]=\"post.link\"></app-embed-video>\r\n\r\n        <app-title *ngIf=\"!post.isComment && post.title\" type=\"large\" [text]=\"post.title\"></app-title>\r\n\r\n        <app-comment-post-title *ngIf=\"post.isComment\"\r\n                                [postTitle]=\"commentPostData?.postTitle\"\r\n                                [link]=\"commentPostData?.link\"\r\n        ></app-comment-post-title>\r\n\r\n        <app-post-image class=\"post-image\"\r\n                        type=\"full\"\r\n                        *ngIf=\"post.imageUrl\"\r\n                        [image]=\"post.imageUrl\"\r\n        ></app-post-image>\r\n\r\n        <markdown class=\"markdown-body\" ngPreserveWhitespaces>\r\n          {{post.body}}\r\n        </markdown>\r\n\r\n        <app-row *ngIf=\"post.tags && post.tags.length > 0\" [margin]=\"'4px 0 16px 0'\">\r\n          <app-tag [tagName]=\"tag\" *ngFor=\"let tag of post.tags\"></app-tag>\r\n        </app-row>\r\n\r\n        <ng-container *ngIf=\"(sharedPost$ | async) as sharedPost\">\r\n          <app-post-item [isSharedPost]=\"true\"\r\n                         [postItemData]=\"sharedPost\">\r\n          </app-post-item>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"isSharedPostHidden\">\r\n          <div class=\"post-not-found\">{{'content.postNotFound' | transloco}}</div>\r\n        </ng-container>\r\n\r\n      </app-column>\r\n\r\n      <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n      <app-action-panel class=\"action-panel-wp\"\r\n                        [isShowShare]=\"true\"\r\n                        [isShowLabel]=\"true\"\r\n                        [upvoteCount]=\"post.upvotesCount\"\r\n                        [downvoteCount]=\"post.downvotesCount\"\r\n                        [commentCount]=\"post.repliesCount\"\r\n                        [postId]=\"post.id\"\r\n      ></app-action-panel>\r\n\r\n    </mat-card>\r\n\r\n    <ng-container *ngIf=\"(space$ | async) as space\">\r\n      <app-space-item [space]=\"space\"></app-space-item>\r\n    </ng-container>\r\n\r\n    <mat-card class=\"comment-card\">\r\n      <app-comments [repliesCount]=\"post.repliesCount\" [rootPost]=\"post\"></app-comments>\r\n    </mat-card>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "PostImageComponent",
            "id": "component-PostImageComponent-1686ee6cdce72412140d87611e007ae8",
            "file": "src/app/ui-lib/content/post-image/post-image.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-image",
            "styleUrls": [
                "./post-image.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-image.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'square'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ImageType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageSrc",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<string>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ImageType } from '../../../core/types/image.type';\nimport { environment } from '../../../../environments/environment';\nimport { KeyValuePair } from '../../../core/models/key-value-pair.model';\n\n@Component({\n  selector: 'app-post-image',\n  templateUrl: './post-image.component.html',\n  styleUrls: ['./post-image.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PostImageComponent implements OnInit {\n  @Input() set image(value: string) {\n    this.imageSrc = value ? environment.ipfsUrl + value : '';\n    this.style = {\n      backgroundImage: 'url(' + this.imageSrc + ')',\n    };\n  }\n  @Input() link: string = '';\n  @Input() type: ImageType = 'square';\n\n  imageSrc = '';\n\n  constructor() {}\n\n  style: KeyValuePair<string>;\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".post-image {\r\n  width: 174px;\r\n  height: 174px;\r\n  margin-left: 16px;\r\n  border-radius: 4px;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  cursor: pointer;\r\n\r\n  &-full{\r\n    display: block;\r\n    width: 100%;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  &-notification {\r\n    width: 46px;\r\n    height: 46px;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./post-image.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "image": {
                    "name": "image",
                    "setSignature": {
                        "name": "image",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"imageSrc\">\r\n\r\n  <ng-container [ngSwitch]=\"type\">\r\n\r\n    <ng-template ngSwitchCase=\"square\">\r\n      <a [routerLink]=\"link\">\r\n        <div class=\"post-image\"\r\n             [ngStyle]=\"style\"\r\n        ></div>\r\n      </a>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"notification\">\r\n      <a [routerLink]=\"link\">\r\n        <div class=\"post-image-notification\"\r\n             [ngStyle]=\"style\"\r\n        ></div>\r\n      </a>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"full\">\r\n      <a [routerLink]=\"link\">\r\n        <img class=\"post-image-full\" [src]=\"imageSrc\">\r\n      </a>\r\n    </ng-template>\r\n\r\n  </ng-container>\r\n\r\n</ng-container>\r\n\r\n\r\n"
        },
        {
            "name": "PostInfoComponent",
            "id": "component-PostInfoComponent-6a7f27996ebe3e66742f8ee9b2874aa5",
            "file": "src/app/ui-lib/post-ui/post-info/post-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-info",
            "styleUrls": [
                "./post-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "createdAtTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "postLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "spaceLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string | undefined"
                },
                {
                    "name": "spaceName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-post-info',\n  templateUrl: './post-info.component.html',\n  styleUrls: ['./post-info.component.scss'],\n})\nexport class PostInfoComponent implements OnInit {\n  @Input() imageUrl: string;\n  @Input() userName: string;\n  @Input() spaceName: string;\n  @Input() createdAtTime: number;\n  @Input() ownerId: string;\n  @Input() spaceLink: string | undefined;\n  @Input() postLink: string;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../shared/styles/_var.scss\";\r\n\r\n:host {\r\n  display: flex;\r\n}\r\n\r\n.info {\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  letter-spacing: 0.25px;\r\n  color: $color_gray_dark;\r\n\r\n  &>*:first-child {\r\n    text-transform: capitalize;\r\n  }\r\n\r\n  a {\r\n    margin-right: 4px;\r\n    &:hover {\r\n      text-decoration: underline;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n\r\n  span {\r\n    margin-right: 4px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./post-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-avatar [jdentityValue]=\"ownerId\"\r\n            [src]=\"imageUrl\"\r\n></app-avatar>\r\n\r\n<app-column [margin]=\"'0 0 0 13px'\">\r\n\r\n  <app-title [type]=\"'small'\"\r\n             [link]=\"'/accounts/' + ownerId\"\r\n             [text]=\"userName || (ownerId | addressHidden)\"\r\n  ></app-title>\r\n\r\n  <app-row class=\"info\">\r\n\r\n    <a *ngIf=\"spaceName\" [routerLink]=\"spaceLink\">{{ spaceName }}</a>\r\n    <span *ngIf=\"spaceName\">·</span>\r\n    <a [routerLink]=\"postLink\">{{ createdAtTime | day }}</a>\r\n\r\n  </app-row>\r\n\r\n</app-column>\r\n\r\n"
        },
        {
            "name": "PostItemComponent",
            "id": "component-PostItemComponent-57975b6f3751490944a6c8e085180f55",
            "file": "src/app/ui-lib/post-ui/post-item/post-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-item",
            "styleUrls": [
                "./post-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isSharedPost",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "postItemData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "Post | null"
                },
                {
                    "name": "showHiddenContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isCommentOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "skip$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCommentButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onShareClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onViewReaction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareModalConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { Post } from '../../../core/models/post/post-list-item.model';\r\nimport { OnViewReaction } from '../../../core/interfaces/on-view-reaction';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { VoteModalDialogComponent } from '../../modal-dialogs/vote-modal-dialog/vote-modal-dialog.component';\r\nimport { DeviceService } from '../../../shared/services/device.service';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { SharePostModalDialogComponent } from '../../modal-dialogs/share-post-modal-dialog/share-post-modal-dialog.component';\r\nimport { AccountService } from '../../../shared/services/account.service';\r\nimport { VisibilityService } from '../../../shared/services/visibility.service';\r\n\r\n@Component({\r\n  selector: 'app-post-item',\r\n  templateUrl: './post-item.component.html',\r\n  styleUrls: ['./post-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PostItemComponent implements OnInit, OnDestroy, OnViewReaction {\r\n  @Input() postItemData: Post | null;\r\n  @Input() isSharedPost = false;\r\n  @Input() showHiddenContent: boolean | null;\r\n\r\n  isCommentOpen: boolean;\r\n\r\n  skip$: Observable<boolean>;\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n  private modalConfig: MatDialogConfig = {};\r\n\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    public deviceService: DeviceService,\r\n    private account: AccountService,\r\n    private visibility: VisibilityService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.prepareModalConfig();\r\n\r\n    this.skip$ = this.account.currentAccount$.pipe(\r\n      mergeMap((_) =>\r\n        this.visibility\r\n          .getIsPostHidden(this.postItemData!.id)\r\n          .pipe(map((hidden) => hidden && !this.showHiddenContent))\r\n      )\r\n    );\r\n  }\r\n\r\n  async onCommentButtonClick() {\r\n    this.isCommentOpen = !this.isCommentOpen;\r\n  }\r\n\r\n  onShareClick() {\r\n    const config: MatDialogConfig = {\r\n      data: this.postItemData,\r\n      width: '780px',\r\n      panelClass: 'modal-overflow',\r\n    };\r\n\r\n    this.dialog.open(SharePostModalDialogComponent, config);\r\n  }\r\n\r\n  private prepareModalConfig() {\r\n    this.deviceService\r\n      .getResponsiveModalData()\r\n      .pipe(takeUntil(this.unsubscribe$))\r\n      .subscribe(\r\n        (responsiveData) => (this.modalConfig = { ...responsiveData })\r\n      );\r\n  }\r\n\r\n  onViewReaction(): void {\r\n    const data = {\r\n      postId: this.postItemData?.id || '',\r\n      upvotesCount: this.postItemData?.upvotesCount || 0,\r\n      downvotesCount: this.postItemData?.downvotesCount || 0,\r\n    };\r\n\r\n    this.modalConfig.data = data;\r\n\r\n    this.dialog.open(VoteModalDialogComponent, this.modalConfig);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //check for storybook\r\n    if (typeof this.unsubscribe$ !== 'string') {\r\n      this.unsubscribe$?.next();\r\n      this.unsubscribe$?.complete();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\napp-embed-video {\r\n  margin-top: $space_tiny;\r\n}\r\n\r\n.shared-post-card {\r\n  box-shadow: none !important;\r\n  border: $shared_post_border;\r\n  padding-bottom: $space_normal;\r\n}\r\n\r\n.common-post-card {\r\n  padding-bottom: $space_mini;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .post-main-wp {\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./post-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnViewReaction"
            ],
            "templateData": "<ng-container *ngIf=\"postItemData && !(skip$ | async)\">\r\n\r\n  <mat-card [ngClass]=\"{'shared-post-card' : isSharedPost, 'common-post-card': !isSharedPost}\">\r\n\r\n    <app-hidden-content [id]=\"postItemData.id\"\r\n                        [type]=\"'post'\"\r\n    ></app-hidden-content>\r\n\r\n    <app-row [ngClass]=\"['post-main-wp']\">\r\n\r\n      <app-column class=\"w100\">\r\n\r\n        <app-row [v]=\"'start'\"\r\n                 [h]=\"'space-between'\"\r\n        >\r\n          <app-post-info [userName]=\"postItemData.ownerName\"\r\n                         [spaceName]=\"postItemData.spaceName\"\r\n                         [imageUrl]=\"postItemData.ownerImageUrl\"\r\n                         [createdAtTime]=\"postItemData.createdAtTime\"\r\n                         [ownerId]=\"postItemData.ownerId\"\r\n                         [postLink]=\"postItemData.postLink\"\r\n                         [spaceLink]=\"postItemData.spaceLink\"\r\n          ></app-post-info>\r\n\r\n          <app-post-menu [post]=\"postItemData\"\r\n                         (onClickViewReaction)=\"onViewReaction()\"\r\n          ></app-post-menu>\r\n\r\n        </app-row>\r\n\r\n        <app-embed-video [videoUrl]=\"postItemData.link\"></app-embed-video>\r\n\r\n        <app-title [text]=\"postItemData.title\"\r\n                   [link]=\"postItemData.postLink\"\r\n                   [style.margin-top]=\"'7px'\"\r\n        ></app-title>\r\n\r\n        <app-paragraph [marginTop]=\"5\"\r\n                       [link]=\"postItemData.postLink\"\r\n                       [text]=\"postItemData.summary\"\r\n                       [isShowMore]=\"postItemData.isShowMore\"\r\n        ></app-paragraph>\r\n\r\n      </app-column>\r\n\r\n      <app-post-image [link]=\"postItemData.postLink\"\r\n                      [type]=\"(deviceService.isMobile$ | async) ? 'full' : 'square'\"\r\n                      [image]=\"postItemData.imageUrl\"\r\n                      [style.margin-top]=\"(deviceService.isMobile$ | async) ? '8px' : '0'\"\r\n      ></app-post-image>\r\n\r\n    </app-row>\r\n\r\n    <mat-divider *ngIf=\"!isSharedPost\"\r\n                 [style.margin]=\"'12px 0 4px 0'\"\r\n                 [inset]=\"true\"\r\n    ></mat-divider>\r\n\r\n    <app-action-panel [isShowComment]=\"true\"\r\n                      [postId]=\"postItemData.id\"\r\n                      [upvoteCount]=\"postItemData.upvotesCount\"\r\n                      [downvoteCount]=\"postItemData.downvotesCount\"\r\n                      [commentCount]=\"postItemData.repliesCount\"\r\n                      [isShowShare]=\"true\"\r\n                      (commentClick)=\"onCommentButtonClick()\"\r\n                      (shareClick)=\"onShareClick()\"\r\n                      *ngIf=\"!isSharedPost\"\r\n    ></app-action-panel>\r\n\r\n    <ng-container *ngIf=\"isCommentOpen\">\r\n\r\n      <mat-divider [inset]=\"true\" [style.margin]=\"'4px 0 16px 0'\"></mat-divider>\r\n\r\n      <app-comments [rootPost]=\"postItemData\"\r\n                    [repliesCount]=\"postItemData.repliesCount\"\r\n      ></app-comments>\r\n\r\n    </ng-container>\r\n\r\n  </mat-card>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "PostListComponent",
            "id": "component-PostListComponent-db8dcf0aca1065ea50693b3f7cc66190",
            "file": "src/app/post/post-list/post-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-list",
            "styleUrls": [
                "./post-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string[] | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "showHiddenContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"public\" | \"all\"",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "idsSet",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "items$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "getUniqueIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../state/state';\r\nimport { loadPostsByIds } from '../../state/post/post.actions';\r\nimport { selectPostsByIds } from '../../state/post/post.selectors';\r\nimport { Post } from '../../core/models/post/post-list-item.model';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { BaseInfinityScrollComponent } from '../../core/base-component/base-infinity-scroll.component';\r\nimport { Actions } from '@ngrx/effects';\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  templateUrl: './post-list.component.html',\r\n  styleUrls: ['./post-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PostListComponent\r\n  extends BaseInfinityScrollComponent<Post>\r\n  implements OnInit\r\n{\r\n  constructor(\r\n    public store: Store<AppState>,\r\n    public cd: ChangeDetectorRef,\r\n    public action$: Actions,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    super(store, cd, action$);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.getScrollableData(loadPostsByIds, selectPostsByIds);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.post-item-wp {\r\n  margin-top: $space_normal;\r\n}\r\n\r\n.viewport {\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./post-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfinityScrollComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container>\r\n  <div\r\n    infinite-scroll\r\n    [infiniteScrollThrottle]=\"50\"\r\n    [infiniteScrollDistance]=\"scrollDistance\"\r\n    (scrolled)=\"onScrollDown()\"\r\n    [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\r\n  >\r\n    <div class=\"post-item-wp\" *ngFor=\"let postData of (items$ | async); trackBy: trackById\">\r\n      <ng-container *ngIf=\"!postData.isSharedPost\">\r\n        <app-post-item [showHiddenContent]=\"showHiddenContent\"\r\n                       [postItemData]=\"postData\"\r\n        ></app-post-item>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"postData.isSharedPost\">\r\n        <app-shared-post-item [postItemData]=\"postData\"></app-shared-post-item>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <app-spinner [showSpinner]=\"isLoading\" [text]=\"'content.morePost' | transloco\"></app-spinner>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "PostMenuComponent",
            "id": "component-PostMenuComponent-e5d08898fd3c9eee15a57acbef710599",
            "file": "src/app/ui-lib/menu/post-menu/post-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-menu",
            "styleUrls": [
                "./post-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "post",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Post"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickViewReaction",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "switchHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isHidden$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isOwner$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibilityService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibleOperationType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibleOperationType",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setupInitExtrinsic",
                    "args": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { TransactionService } from '../../../shared/services/transaction.service';\r\nimport { AccountService } from '../../../shared/services/account.service';\r\nimport { BaseVisibleTxComponent } from '../../../core/base-component/base-visible-tx.component';\r\nimport { Post } from '../../../core/models/post/post-list-item.model';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../state/state';\r\nimport { Observable } from 'rxjs';\r\nimport { PermissionsService } from '../../../shared/services/permissions.service';\r\nimport { filter, mergeMap } from 'rxjs/operators';\r\nimport { VisibilityService } from '../../../shared/services/visibility.service';\r\nimport { SignInModalService } from '../../modal-dialogs/services/sign-in-modal.service';\r\n\r\n@Component({\r\n  selector: 'app-post-menu',\r\n  templateUrl: './post-menu.component.html',\r\n  styleUrls: ['./post-menu.component.scss'],\r\n})\r\nexport class PostMenuComponent\r\n  extends BaseVisibleTxComponent\r\n  implements OnInit\r\n{\r\n  @Input() post: Post;\r\n  @Output() onClickViewReaction = new EventEmitter();\r\n\r\n  isOwner$: Observable<boolean>;\r\n  isHidden$: Observable<boolean>;\r\n\r\n  constructor(\r\n    public transaction: TransactionService,\r\n    public account: AccountService,\r\n    public cd: ChangeDetectorRef,\r\n    public visibility: VisibilityService,\r\n    private permission: PermissionsService,\r\n    public signIn: SignInModalService\r\n  ) {\r\n    super(transaction, account, cd, signIn, visibility);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.entityId = this.post.id;\r\n    this.visibleOperationType = 'post';\r\n\r\n    this.isHidden$ = this.visibility.getIsPostHidden(this.entityId);\r\n\r\n    this.isOwner$ = this.account.currentAccount$.pipe(\r\n      filter((account) => !!account),\r\n      mergeMap((account) =>\r\n        this.permission.checkIfPostOwner(account!.id, this.post.id)\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./post-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseVisibleTxComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<app-icon-button [iconSize]=\"16\"\r\n                 [matMenuTriggerFor]=\"menu\"\r\n                 [iconName]=\"'option-icon'\"\r\n></app-icon-button>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n\r\n  <app-menu-item *ngIf=\"isOwner$ | async\"\r\n                 [routerLink]=\"['/posts', post.id, 'edit']\"\r\n                 [title]=\"'buttons.editPost' | transloco\"\r\n                 [iconName]=\"'edit-icon'\"\r\n                 [iconSize]=\"18\"\r\n  ></app-menu-item>\r\n\r\n  <app-menu-item [title]=\"'buttons.makeVisible' | transloco\"\r\n                 [iconName]=\"'visible-icon'\"\r\n                 (click)=\"show()\"\r\n                 *ngIf=\"(isHidden$ | async) && (isOwner$ | async)\"\r\n  ></app-menu-item>\r\n\r\n  <app-menu-item [title]=\"'buttons.hidePost' | transloco\"\r\n                 [iconName]=\"'hide-icon'\"\r\n                 (click)=\"hide()\"\r\n                 *ngIf=\"!(isHidden$ | async) && (isOwner$ | async)\"\r\n  ></app-menu-item>\r\n\r\n  <app-menu-item [title]=\"'buttons.viewReactions' | transloco\"\r\n                 [iconName]=\"'view-reaction-icon'\"\r\n                 (click)=\"onClickViewReaction.emit()\"\r\n  ></app-menu-item>\r\n\r\n  <app-menu-item [title]=\"'buttons.viewOnIPFS' | transloco\"\r\n                 [iconName]=\"'ipfs-icon'\"\r\n  ></app-menu-item>\r\n\r\n</mat-menu>\r\n"
        },
        {
            "name": "ProfileButtonComponent",
            "id": "component-ProfileButtonComponent-bdfc48a9a046133e6ed8e4bbf9668bdb",
            "file": "src/app/ui-lib/buttons/profile-button/profile-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-button",
            "styleUrls": [
                "./profile-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<SignInModalDialogComponent | AccountData>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isAuthorized$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "profileData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Profile | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sideNavService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SideNavService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSignInModal",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SideNavService } from '../../../shared/services/side-nav.service';\nimport { Store } from '@ngrx/store';\nimport { AppState } from '../../../state/state';\nimport { Observable } from 'rxjs';\nimport { selectMyAccountProfileData } from '../../../state/profile/profile.selectors';\nimport { AccountService } from '../../../shared/services/account.service';\nimport { filter, map } from 'rxjs/operators';\nimport { Profile } from '../../../state/profile/profile.state';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { SignInModalDialogComponent } from '../../modal-dialogs/sign-in-modal-dialog/sign-in-modal-dialog.component';\nimport { AccountData } from '../../../core/types/account.types';\nimport { SignInModalService } from '../../modal-dialogs/services/sign-in-modal.service';\n\n@Component({\n  selector: 'app-profile-button',\n  templateUrl: './profile-button.component.html',\n  styleUrls: ['./profile-button.component.scss'],\n})\nexport class ProfileButtonComponent implements OnInit {\n  constructor(\n    public sideNavService: SideNavService,\n    private store: Store<AppState>,\n    public accountService: AccountService,\n    private dialog: MatDialog,\n    private signInModalService: SignInModalService\n  ) {}\n\n  isAuthorized$: Observable<boolean>;\n\n  profileData$: Observable<Profile | undefined>;\n  dialogRef: MatDialogRef<SignInModalDialogComponent, AccountData>;\n\n  ngOnInit(): void {\n    this.profileData$ = this.store.select(selectMyAccountProfileData);\n\n    this.isAuthorized$ = this.accountService.currentAccount$.pipe(\n      map((currentAccount) => !!currentAccount)\n    );\n  }\n\n  async openSignInModal() {\n    await this.signInModalService.openModal();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '_var.scss';\r\n@import \"mixins\";\r\n\r\n.profile-button-wp {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n  cursor: pointer;\r\n}\r\n\r\n.sign-in-btn {\r\n  font-size: $font_normal;\r\n}\r\n.mat-stroked-button {\r\n  border: $border_primary !important;\r\n}\r\n\r\n.profile-name {\r\n  @include font($font_small, 500)\r\n}\r\n",
                    "styleUrl": "./profile-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signInModalService",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "sideNavService",
                        "type": "SideNavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signInModalService",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"(isAuthorized$ | async) && (profileData$ | async) as profileData\">\r\n\r\n  <div (click)=\"sideNavService.openAccountSideNav()\"\r\n       class=\"profile-button-wp\"\r\n  >\r\n    <app-avatar [src]=\"profileData.avatar\"\r\n                [jdentityValue]=\"profileData.id\"\r\n                [size]=\"36\"\r\n    ></app-avatar>\r\n\r\n    <app-column [margin]=\"'0 0 0 8px'\">\r\n\r\n      <span class=\"profile-name\">{{profileData.name || (profileData.id | addressHidden)}}</span>\r\n\r\n      <app-tokens type=\"primary\" [tokens]=\"accountService.balance$ | async\"></app-tokens>\r\n\r\n    </app-column>\r\n\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"!(isAuthorized$ | async)\">\r\n\r\n  <button mat-stroked-button\r\n          (click)=\"openSignInModal()\"\r\n          class=\"sign-in-btn\"\r\n          color=\"primary\">\r\n    {{ 'buttons.signIn' | transloco }}\r\n  </button>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-47082f91f4ac4efdac5f4c4f3e87a9e5",
            "file": "src/app/account/profile/profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabLinks[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "device",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFollow$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "isMyProfile$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "postIds$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "profileData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Profile | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "spaceIds$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "spaceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceService",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\n    { tabName: 'posts' },\n    { tabName: 'spaces' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokens$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "tabData",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tabData",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { TabLinkData } from '../../core/models/tab-link-data.model';\nimport { DeviceService } from '../../shared/services/device.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { filter, map, mergeMap, switchMap, tap } from 'rxjs/operators';\nimport { combineLatest, EMPTY, from, Observable, Subject } from 'rxjs';\nimport { SpaceService } from '../../space/services/space.service';\nimport { PostService } from '../../post/services/post.service';\nimport { AccountService } from '../../shared/services/account.service';\nimport { FollowerService } from '../../shared/services/follower.service';\nimport { Profile } from '../../state/profile/profile.state';\nimport { ProfileFacade } from '../../state/profile/profile.facade';\nimport { of } from 'rxjs';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfileComponent implements OnInit, OnDestroy {\n  public tabLinks: TabLinkData[] = [\n    { tabName: 'posts' },\n    { tabName: 'spaces' },\n  ];\n\n  activeTab = this.tabLinks[0];\n  spaceIds$: Observable<string[] | null>;\n  postIds$: Observable<string[] | null>;\n  tokens$: Observable<string>;\n  profileData$: Observable<Profile | undefined>;\n  isFollow$: Observable<boolean>;\n  isMyProfile$: Observable<boolean>;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    public device: DeviceService,\n    public spaceService: SpaceService,\n    private cd: ChangeDetectorRef,\n    private route: ActivatedRoute,\n    private postService: PostService,\n    private profileFacade: ProfileFacade,\n    private accountService: AccountService,\n    private followerService: FollowerService,\n    public router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n    const userId$ = this.route.paramMap.pipe(\n      map((params) => params.get('userId') as string),\n      tap((id) => this.profileFacade.loadProfile(id))\n    );\n\n    this.profileData$ = userId$.pipe(\n      mergeMap((id) => this.profileFacade.getProfile(id))\n    );\n\n    this.tokens$ = this.profileData$.pipe(\n      switchMap((profile) =>\n        from(this.accountService.loadFormattedBalance(profile!.id))\n      )\n    );\n\n    this.spaceIds$ = this.profileData$.pipe(\n      switchMap((profile) =>\n        from(this.spaceService.getSpaceIdsByAccount(profile!.id))\n      ),\n      filter((ids) => ids.length > 0)\n    );\n\n    this.postIds$ = this.spaceIds$.pipe(\n      filter((ids) => !!ids),\n      switchMap((spaceIds) => this.postService.getPostIdsBySpaceIds(spaceIds!)),\n      filter((ids) => ids.length > 0)\n    );\n\n    this.isMyProfile$ = combineLatest([\n      this.profileData$,\n      this.accountService.currentAccount$,\n    ]).pipe(\n      filter(([profile, account]) => !!profile && !!account),\n      map(([profile, account]) => profile!.id === account!.id)\n    );\n\n    this.isFollow$ = this.profileData$.pipe(\n      switchMap((profile) =>\n        this.followerService.checkIfFollowAccount(profile?.id)\n      )\n    );\n  }\n\n  onTabClick(tabData: TabLinkData) {\n    this.activeTab = tabData;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n@import \"_mixins.scss\";\r\n\r\n::ng-deep {\r\n  .mat-tab-link {\r\n    width: 50% !important;\r\n  }\r\n}\r\n\r\napp-qr-button {\r\n  margin-left: 52px;\r\n  width: 20px;\r\n  margin-top: -3px;\r\n}\r\n\r\n.mat-card {\r\n  padding-bottom: 0;\r\n  border-bottom-left-radius: 1px;\r\n  border-bottom-right-radius: 1px;\r\n}\r\n\r\n.tabs-wp {\r\n  width: calc(100% + 32px);\r\n  box-sizing: border-box;\r\n  margin: 0 -16px;\r\n\r\n  ::ng-deep {\r\n    .mat-tab-link {\r\n      font-size: 16px;\r\n    }\r\n\r\n    .mat-tab-link-container {\r\n      z-index: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.buttons-wp {\r\n  margin: 22px 0 16px;\r\n  gap: $space_normal;\r\n\r\n  &>* {\r\n    flex: 1;\r\n  }\r\n}\r\n",
                    "styleUrl": "./profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileFacade",
                        "type": "ProfileFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "device",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileFacade",
                        "type": "ProfileFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"(profileData$ | async) as profileData\">\r\n  <mat-card>\r\n\r\n      <app-column class=\"w100\">\r\n\r\n        <app-row>\r\n          <app-profile-info [address]=\"profileData.id\"\r\n                            [profileName]=\"profileData.name\"\r\n                            [avatarSrc]=\"profileData.avatar\"\r\n                            [followersCount]=\"profileData.followersCount\"\r\n                            [followingCount]=\"profileData.followingAccountsCount\"\r\n                            [type]=\"(device.isMobile$ | async) ? 'small' : 'medium'\"\r\n                            class=\"w100\"\r\n          ></app-profile-info>\r\n\r\n          <app-row [v]=\"'center'\">\r\n\r\n            <app-edit-button [id]=\"profileData.id\"\r\n                             [type]=\"'profile'\"\r\n                             ifDesktop\r\n                             *ngIf=\"isMyProfile$ | async\"\r\n            ></app-edit-button>\r\n\r\n            <app-profile-menu></app-profile-menu>\r\n\r\n          </app-row>\r\n\r\n        </app-row>\r\n\r\n        <app-column [margin]=\"'14px 0 0 0'\">\r\n\r\n          <app-paragraph [text]=\"profileData.summary\"></app-paragraph>\r\n\r\n          <app-row [margin]=\"'10px 0 8px'\">\r\n\r\n            <app-address size=\"medium\"\r\n                         [showIcon]=\"true\"\r\n                         [showCopyButton]=\"true\"\r\n                         [address]=\"profileData.id\"\r\n            ></app-address>\r\n\r\n            <app-qr-button [address]=\"profileData.id\"></app-qr-button>\r\n\r\n          </app-row>\r\n\r\n          <app-tokens size=\"medium\" [tokens]=\"tokens$ | async\" [showIcon]=\"true\"></app-tokens>\r\n\r\n\r\n          <app-row class=\"buttons-wp w100\">\r\n\r\n            <ng-container *ngIf=\"isMyProfile$ | async; else sendTipsBtn\">\r\n              <app-create-space-button width=\"full\"\r\n                                       [color]=\"(spaceService.myOwnSpaceIds$ | async) ? 'gray' : 'primary'\"\r\n              ></app-create-space-button>\r\n\r\n              <app-write-post-button [width]=\"'full'\" [disabled]=\"!(spaceService.myOwnSpaceIds$ | async)\"></app-write-post-button>\r\n            </ng-container>\r\n\r\n            <ng-template #sendTipsBtn>\r\n              <app-send-tips-button [width]=\"'full'\"></app-send-tips-button>\r\n\r\n            <app-follow-button [entityId]=\"profileData.id\"\r\n                               [isFollow]=\"isFollow$ | async\"\r\n                               size=\"large\"\r\n                               type=\"profile\"\r\n                               width=\"full\"\r\n            ></app-follow-button>\r\n            </ng-template>\r\n\r\n\r\n          </app-row>\r\n\r\n        </app-column>\r\n      </app-column>\r\n\r\n      <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n      <div class=\"tabs-wp\">\r\n        <app-tabs (tabClick)=\"onTabClick($event)\"\r\n                  [activeLink]=\"activeTab\"\r\n                  [tabLinks]=\"tabLinks\"\r\n        ></app-tabs>\r\n      </div>\r\n  </mat-card>\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'posts'\">\r\n      <ng-container *ngIf=\"(postIds$ | async) as postIds; else noPost\">\r\n        <app-post-list [ids]=\"postIds\"></app-post-list>\r\n      </ng-container>\r\n\r\n      <ng-template #noPost>\r\n        <app-no-content [text]=\"'content.noPosts' | transloco\"></app-no-content>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'spaces'\">\r\n      <ng-container *ngIf=\"(spaceIds$ | async) as spaceIds; else noSpaces\">\r\n        <app-space-list [showHidden]=\"true\" [ids]=\"spaceIds\"></app-space-list>\r\n      </ng-container>\r\n\r\n      <ng-template #noSpaces>\r\n        <app-no-content [text]=\"'content.noSpaces' | transloco\"></app-no-content>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"!(profileData$ | async)\">\r\n  <app-spinner [showSpinner]=\"true\"></app-spinner>\r\n</ng-container>\r\n"
        },
        {
            "name": "ProfileInfoComponent",
            "id": "component-ProfileInfoComponent-6ab4c5f637ab8e885e01a6e2a2bf9163",
            "file": "src/app/ui-lib/profile/profile-info/profile-info.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-info",
            "styleUrls": [
                "./profile-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "avatarSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string | undefined"
                },
                {
                    "name": "followersCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number"
                },
                {
                    "name": "followingCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number"
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "profileId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "profileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string | undefined"
                },
                {
                    "name": "type",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"small\" | \"medium\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "AVATAR_SIZE",
                    "defaultValue": "AVATAR_SIZE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "connectionModalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionModalData",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConnectionDialog",
                    "args": [
                        {
                            "name": "activeTab",
                            "type": "\"followers\" | \"following\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeTab",
                            "type": "\"followers\" | \"following\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { takeUntil } from 'rxjs/operators';\nimport { DeviceService } from '../../../shared/services/device.service';\nimport { Subject } from 'rxjs';\nimport { ConnectionsModalDialogComponent } from '../../modal-dialogs/connections-modal-dialog/connections-modal-dialog.component';\nimport { ConnectionModalData } from '../../../core/types/dialog-modal-data.types';\nimport { AVATAR_SIZE } from '../../../core/constants/size.const';\n\n@Component({\n  selector: 'app-profile-info',\n  templateUrl: './profile-info.component.html',\n  styleUrls: ['./profile-info.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfileInfoComponent implements OnInit, OnDestroy {\n  private unsubscribe$: Subject<void> = new Subject();\n  @Input() avatarSrc: string | undefined;\n  @Input() profileName: string | undefined;\n  @Input() type: 'small' | 'medium' = 'small';\n  @Input() followingCount = 0;\n  @Input() followersCount = 0;\n  @Input() profileId = '';\n  @Input() link = '';\n  @Input() address = '';\n\n  AVATAR_SIZE = AVATAR_SIZE;\n\n  constructor(public dialog: MatDialog, public deviceService: DeviceService) {}\n\n  connectionModalData: ConnectionModalData;\n  private modalConfig: MatDialogConfig = {};\n\n  ngOnInit(): void {\n    this.deviceService\n      .getResponsiveModalData()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((data) => (this.modalConfig = { ...data }));\n  }\n\n  openConnectionDialog(activeTab: 'followers' | 'following') {\n    this.connectionModalData = {\n      activeTab,\n      address: this.address,\n      followerCount: this.followersCount,\n      followingCount: this.followingCount,\n    };\n\n    this.modalConfig.data = this.connectionModalData;\n\n    this.dialog.open(ConnectionsModalDialogComponent, this.modalConfig);\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".profile-info-wp {\r\n  display: flex;\r\n  &>div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    margin-left: 13px;\r\n  }\r\n}\r\n\r\n.profile-name-wp {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  mat-icon {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n}\r\n\r\n.small {\r\n  font-size: 14px;\r\n}\r\n\r\n.medium {\r\n  font-size: 16px;\r\n}\r\n\r\n.profile-stats-wp {\r\n  margin-top: 4px;\r\n\r\n  &>span {\r\n    margin-right: 8px;\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n      cursor: pointer;\r\n    }\r\n\r\n    strong {\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./profile-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"profile-info-wp\">\r\n  <app-avatar\r\n    [src]=\"avatarSrc\"\r\n    [size]=\"type === 'small' ? AVATAR_SIZE.SMALL : AVATAR_SIZE.MEDIUM\"\r\n    [name]=\"profileName || (address | addressHidden )\"\r\n    [jdentityValue]=\"address\"\r\n  ></app-avatar>\r\n  <div>\r\n    <div class=\"profile-name-wp\">\r\n      <app-title\r\n        [text]=\"profileName || (address | addressHidden)\"\r\n        [type]=\"'medium'\"\r\n        [link]=\"'/accounts/' + address\"\r\n      >\r\n      </app-title>\r\n    </div>\r\n\r\n    <div class=\"profile-stats-wp\" [ngClass]=\"type\" *transloco=\"let t; read: 'general'\">\r\n      <span (click)=\"openConnectionDialog('following')\">\r\n        <strong class=\"count\">{{followingCount | numeral}}</strong>\r\n        <span>{{ t('following') }}</span>\r\n      </span>\r\n      <span (click)=\"openConnectionDialog('followers')\">\r\n        <strong class=\"count\">{{followersCount | numeral}}</strong>\r\n        <span>{{followersCount | pluralize: t('follower')}}</span>\r\n      </span>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProfileMenuComponent",
            "id": "component-ProfileMenuComponent-6ca62968020a71d91a7b5e7e38bba632",
            "file": "src/app/ui-lib/menu/profile-menu/profile-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-menu",
            "styleUrls": [
                "./profile-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-profile-menu',\n  templateUrl: './profile-menu.component.html',\n  styleUrls: ['./profile-menu.component.scss']\n})\nexport class ProfileMenuComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./profile-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-icon-button [iconSize]=\"16\"\n                 [matMenuTriggerFor]=\"menu\"\n                 [iconName]=\"'option-icon'\"\n></app-icon-button>\n\n<mat-menu #menu=\"matMenu\">\n\n\n</mat-menu>\n"
        },
        {
            "name": "QrButtonComponent",
            "id": "component-QrButtonComponent-fa732da4bcd96a997446e33b9c331576",
            "file": "src/app/ui-lib/buttons/qr-button/qr-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-qr-button",
            "styleUrls": [
                "./qr-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./qr-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { QrModalDialogComponent } from '../../modal-dialogs/qr-modal-dialog/qr-modal-dialog.component';\n\n@Component({\n  selector: 'app-qr-button',\n  templateUrl: './qr-button.component.html',\n  styleUrls: ['./qr-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class QrButtonComponent implements OnInit {\n  @Input() address: string;\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit(): void {}\n\n  onClick() {\n    this.dialog.open(QrModalDialogComponent, {\n      data: this.address,\n      maxWidth: '328px',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-icon {\r\n  width: 16px;\r\n}\r\n\r\nbutton {\r\n  width: 30px;\r\n  height: 30px;\r\n  line-height: 30px;\r\n}\r\n",
                    "styleUrl": "./qr-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button (click)=\"onClick()\" mat-icon-button>\r\n  <mat-icon svgIcon=\"qr-icon\"></mat-icon>\r\n</button>\r\n"
        },
        {
            "name": "QrModalDialogComponent",
            "id": "component-QrModalDialogComponent-0ed662d4c79715443f5980277b33b8cf",
            "file": "src/app/ui-lib/modal-dialogs/qr-modal-dialog/qr-modal-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-qr-modal-dialog",
            "styleUrls": [
                "./qr-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./qr-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<QrModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCopy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SnackBarService } from '../../../shared/services/snack-bar.service';\n\n@Component({\n  selector: 'app-qr-modal-dialog',\n  templateUrl: './qr-modal-dialog.component.html',\n  styleUrls: ['./qr-modal-dialog.component.scss'],\n})\nexport class QrModalDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: MatDialogRef<QrModalDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: string,\n    private snackBarService: SnackBarService\n  ) {}\n\n  ngOnInit(): void {}\n\n  onCopy() {\n    this.snackBarService.openSimpleSnackBar({\n      message: 'Address copied!',\n      isShowCloseButton: true,\n      duration: 1000,\n      iconName: 'info-icon',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/app/shared/styles/var';\r\n@import \"src/app/shared/styles/mixins\";\r\n\r\napp-close-button {\r\n  margin-right: -5px;\r\n}\r\n\r\n.address-wp {\r\n  display: flex;\r\n\r\n  span {\r\n    @include font(14px, 500);\r\n    word-break: break-all;\r\n    text-align: center;\r\n  }\r\n}\r\n.button-wp {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: $space_normal;\r\n  margin-top: $space_normal;\r\n\r\n  button {\r\n    width: 100%;\r\n    font-size: $font_normal;\r\n  }\r\n\r\n  button[mat-stroked-button] {\r\n    color: $color_primary;\r\n  }\r\n\r\n  button[mat-flat-button] {\r\n\r\n    mat-icon {\r\n      width: 16px;\r\n      margin-right: 12px;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-stroked-button {\r\n  border: $border_primary !important;\r\n\r\n}\r\n\r\n",
                    "styleUrl": "./qr-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QrModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QrModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-column padding=\"16px\">\r\n\r\n  <app-row [margin]=\"'-6px 0 0 0'\"\r\n           [h]=\"'space-between'\"\r\n           [v]=\"'center'\"\r\n  >\r\n    <span class=\"title-medium\">{{ 'modals.qrCode.title' | transloco }}</span>\r\n\r\n    <app-close-button (onClose)=\"dialogRef.close()\"></app-close-button>\r\n  </app-row>\r\n  <app-column [v]=\"'center'\">\r\n\r\n    <qrcode [qrdata]=\"data\"\r\n            [width]=\"256\"\r\n            [errorCorrectionLevel]=\"'M'\">\r\n    </qrcode>\r\n\r\n    <div class=\"address-wp\">\r\n      <span class=\"address-text\">{{data}}</span>\r\n    </div>\r\n\r\n  </app-column>\r\n\r\n  <div class=\"button-wp\">\r\n    <button mat-stroked-button (click)=\"dialogRef.close()\">\r\n      {{ 'buttons.close' | transloco }}\r\n    </button>\r\n\r\n    <button\r\n      mat-flat-button\r\n      [cdkCopyToClipboard]=\"data\"\r\n      (click)=\"onCopy()\"\r\n      color=\"primary\">\r\n      <mat-icon svgIcon=\"copy-white-icon\"></mat-icon>\r\n      <span>{{ 'buttons.copy' | transloco }}</span>\r\n    </button>\r\n  </div>\r\n\r\n\r\n</app-column>\r\n"
        },
        {
            "name": "ReplyButtonComponent",
            "id": "component-ReplyButtonComponent-d88d2387d01b5d088cb041a14e82cbab",
            "file": "src/app/ui-lib/buttons/reply-button/reply-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reply-button",
            "styleUrls": [
                "./reply-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reply-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-reply-button',\r\n  templateUrl: './reply-button.component.html',\r\n  styleUrls: ['./reply-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ReplyButtonComponent {\r\n  @Input() isShowLabel: boolean = false;\r\n  @Output() click = new EventEmitter();\r\n\r\n  onClick(event: any) {\r\n    event.stopPropagation();\r\n    this.click.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./reply-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-icon-button [buttonSize]=\"32\"\r\n                 [iconSize]=\"22\"\r\n                 [iconName]=\"'reply-icon'\"\r\n                 (click)=\"onClick($event)\"\r\n></app-icon-button>\r\n\r\n<span [ngClass]=\"['action-panel-label']\"\r\n      *ngIf=\"isShowLabel\"\r\n>{{ 'buttons.Reply' | transloco }}</span>\r\n"
        },
        {
            "name": "RowComponent",
            "id": "component-RowComponent-acb3fd976a3db812d750de195b07fd7b",
            "file": "src/app/ui-lib/containers/row/row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-row",
            "styleUrls": [
                "./row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "v",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.margin'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "_padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.padding'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "alignItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.align-items'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "flex",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.display'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "justifyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.justify-content'"
                        }
                    ],
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.align-items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.display",
                    "defaultValue": "'flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.justify-content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.margin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                },
                {
                    "name": "style.padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string | undefined",
                    "inheritance": {
                        "file": "BoxComponent"
                    }
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\r\nimport { BoxComponent } from '../../../core/base-component/box.component';\r\n\r\n@Component({\r\n  selector: 'app-row',\r\n  templateUrl: './row.component.html',\r\n  styleUrls: ['./row.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RowComponent extends BoxComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n}\r\n",
                    "styleUrl": "./row.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BoxComponent",
            "templateData": "<ng-content></ng-content>\r\n\r\n"
        },
        {
            "name": "ScrollComponent",
            "id": "component-ScrollComponent-5f9e0ac2a6edf0cda89e0ea7e2406499",
            "file": "src/app/ui-lib/containers/scroll/scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scroll",
            "styleUrls": [
                "./scroll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scroll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.height'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-scroll',\r\n  templateUrl: './scroll.component.html',\r\n  styleUrls: ['./scroll.component.scss'],\r\n})\r\nexport class ScrollComponent {\r\n  @Input() set height(value: string) {\r\n    this._height = value;\r\n  }\r\n\r\n  @HostBinding('style.height') _height: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  overflow-y: auto;\r\n\r\n  &::-webkit-scrollbar {\r\n    margin-top: 20px;\r\n    width: 7px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background: transparent;\r\n\r\n    //margin-top: 16px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #C1C1C1;\r\n    border-radius: 18px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: #b6b6b6;\r\n  }\r\n}\r\n",
                    "styleUrl": "./scroll.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 9,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "SeeMoreComponent",
            "id": "component-SeeMoreComponent-985faca9f7095e66f75cf8086d9eeb07",
            "file": "src/app/ui-lib/text/see-more/see-more.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-see-more",
            "styleUrls": [
                "./see-more.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./see-more.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isAutoExpand",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "'link'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"link\" | \"expand\""
                }
            ],
            "outputsClass": [
                {
                    "name": "switch",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isMore",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "routerData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "goToSpacePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwitch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-see-more',\r\n  templateUrl: './see-more.component.html',\r\n  styleUrls: ['./see-more.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SeeMoreComponent implements OnInit {\r\n  @Input() link: string;\r\n  @Input() type: 'link' | 'expand' = 'link';\r\n  @Input() isAutoExpand: boolean = false;\r\n  @Output() switch = new EventEmitter();\r\n\r\n  routerData: {\r\n    isAutoExpand: boolean;\r\n  };\r\n\r\n  isMore: boolean = true;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isMore = !this.isAutoExpand;\r\n\r\n    this.routerData = {\r\n      isAutoExpand: this.isAutoExpand,\r\n    };\r\n  }\r\n\r\n  onSwitch() {\r\n    this.isMore = !this.isMore;\r\n    this.switch.emit();\r\n  }\r\n\r\n  goToSpacePage() {\r\n    this.router.navigate([this.link], { queryParams: this.routerData });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n@import \"_mixins.scss\";\r\n\r\nspan {\r\n  letter-spacing: 0.25px;\r\n  @include font($font_normal, 500, 20px);\r\n  color: #EB2F96;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  white-space: nowrap;\r\n}\r\n",
                    "styleUrl": "./see-more.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *transloco=\"let t; read: 'general'\">\r\n  <a *ngIf=\"type === 'link'\" (click)=\"goToSpacePage()\">\r\n    <span>{{ t('seeMore') }}</span>\r\n  </a>\r\n\r\n  <span *ngIf=\"type === 'expand'\" (click)=\"onSwitch()\" >\r\n    {{ isMore ? t('seeMore') : t('seeLess')  }}\r\n  </span>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "SendButtonComponent",
            "id": "component-SendButtonComponent-a9eff21dc5493d1d2fa8ba9c58b07eb9",
            "file": "src/app/ui-lib/buttons/send-button/send-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-send-button",
            "styleUrls": [
                "./send-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./send-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"edit\" | \"create\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onSendBtnClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-send-button',\n  templateUrl: './send-button.component.html',\n  styleUrls: ['./send-button.component.scss'],\n})\nexport class SendButtonComponent implements OnInit {\n  @Input() isDisabled: boolean;\n  @Input() type: 'edit' | 'create';\n  @Output() onSendBtnClick = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button:disabled {\r\n  background: #F597CA !important;\r\n  color: white !important;\r\n}\r\n",
                    "styleUrl": "./send-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\r\n  [disabled]=\"isDisabled\"\r\n  (click)=\"onSendBtnClick.emit()\"\r\n  *transloco=\"let t; read: 'buttons'\"\r\n  class=\"send-button\"\r\n  mat-flat-button\r\n  color=\"primary\">\r\n  {{ type === 'edit'  ? t('update') : t('send') }}\r\n</button>\r\n"
        },
        {
            "name": "SendTipsButtonComponent",
            "id": "component-SendTipsButtonComponent-5ee0740766cafe486b764d299d0fb121",
            "file": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-send-tips-button",
            "styleUrls": [
                "./send-tips-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./send-tips-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-send-tips-button',\r\n  templateUrl: './send-tips-button.component.html',\r\n  styleUrls: ['./send-tips-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SendTipsButtonComponent {\r\n  @Input() width: 'full' | 'static' = 'static';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\nbutton {\r\n  font-size: 17px;\r\n  color: $color_black;\r\n  border: $border_light;\r\n\r\n  &:active {\r\n    border: $border_light;\r\n  }\r\n}\r\n",
                    "styleUrl": "./send-tips-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button mat-flat-button\r\n        [ngClass]=\"width\"\r\n>\r\n  {{ 'buttons.sendTips' | transloco }}\r\n</button>\r\n"
        },
        {
            "name": "SendTokensButtonComponent",
            "id": "component-SendTokensButtonComponent-8682c0ebda70ce356ad091a0db347044",
            "file": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-send-tokens-button",
            "styleUrls": [
                "./send-tokens-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./send-tokens-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-send-tokens-button',\r\n  templateUrl: './send-tokens-button.component.html',\r\n  styleUrls: ['./send-tokens-button.component.scss'],\r\n})\r\nexport class SendTokensButtonComponent implements OnInit {\r\n  @Input() width: 'full' | 'static' = 'static';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.static {\r\n}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\n.mat-stroked-button {\r\n  border: $border_primary !important;\r\n\r\n}\r\n\r\nbutton {\r\n  font-size: $font_normal;\r\n}\r\n",
                    "styleUrl": "./send-tokens-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\r\n  [ngClass]=\"width\"\r\n  mat-stroked-button\r\n  color=\"primary\"\r\n>\r\n  Send tokens\r\n</button>\r\n"
        },
        {
            "name": "SharedButtonComponent",
            "id": "component-SharedButtonComponent-9d3921ee7e4ae24c578c884f389a5cd2",
            "file": "src/app/ui-lib/buttons/shared-button/shared-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shared-button",
            "styleUrls": [
                "./shared-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shared-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-shared-button',\r\n  templateUrl: './shared-button.component.html',\r\n  styleUrls: ['./shared-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SharedButtonComponent {\r\n  @Input() isShowLabel: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./shared-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-icon-button [buttonSize]=\"32\"\r\n                 [iconSize]=\"22\"\r\n                 [iconName]=\"'share-icon'\"\r\n></app-icon-button>\r\n\r\n<span [ngClass]=\"['action-panel-label']\"\r\n      *ngIf=\"isShowLabel\"\r\n> {{ 'buttons.share' | transloco }}</span>\r\n"
        },
        {
            "name": "SharedPostItemComponent",
            "id": "component-SharedPostItemComponent-64828958ccc8e301229dfe7d0d885b3b",
            "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shared-post-item",
            "styleUrls": [
                "./shared-post-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shared-post-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "postItemData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "Post"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isCommentOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isSharedPostHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "repliesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sharedPostItemData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "onCommentButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwitchHidden",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onViewReaction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { Post } from '../../../core/models/post/post-list-item.model';\r\nimport { Subject } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../state/state';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { CommentService } from '../../../shared/services/comment.service';\r\nimport { PostService } from '../../../post/services/post.service';\r\n\r\n@Component({\r\n  selector: 'app-shared-post-item',\r\n  templateUrl: './shared-post-item.component.html',\r\n  styleUrls: ['./shared-post-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SharedPostItemComponent implements OnInit, OnChanges {\r\n  @Input() postItemData: Post;\r\n  sharedPostItemData: Post | undefined;\r\n  isHidden: boolean;\r\n  isCommentOpen: boolean;\r\n  repliesCount: number;\r\n  isSharedPostHidden: boolean;\r\n\r\n  private unsubscribe$: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    private store: Store<AppState>,\r\n    private commentService: CommentService,\r\n    private postService: PostService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.postItemData && changes.postItemData.currentValue) {\r\n      this.repliesCount = this.postItemData!.repliesCount;\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.isHidden = this.postItemData.hidden;\r\n\r\n    const sharedPostId = this.postItemData.sharedPostId;\r\n\r\n    if (sharedPostId) {\r\n      this.sharedPostItemData = await this.postService.loadPostById(\r\n        sharedPostId\r\n      );\r\n\r\n      this.isSharedPostHidden =\r\n        !this.sharedPostItemData || this.sharedPostItemData.spaceHidden;\r\n\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  onViewReaction() {}\r\n\r\n  onCommentButtonClick() {\r\n    this.isCommentOpen = !this.isCommentOpen;\r\n  }\r\n\r\n  onSwitchHidden() {\r\n    this.isHidden = !this.isHidden;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$?.next();\r\n    this.unsubscribe$?.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".shared-post-item-wp {\r\n  .post-main-wp {\r\n    .post-data {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .post-item-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .action-panel-wp {\r\n    margin-top: 7px;\r\n  }\r\n}\r\n\r\n.mat-card {\r\n  padding-bottom: 7px;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .post-main-wp {\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./shared-post-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commentService",
                        "type": "CommentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"shared-post-item-wp\">\r\n  <mat-card>\r\n\r\n    <app-hidden-content [type]=\"'post'\"\r\n                        [id]=\"postItemData.id\"\r\n    ></app-hidden-content>\r\n\r\n    <div class=\"post-main-wp\">\r\n      <div class=\"post-data\">\r\n        <div class=\"post-item-header\">\r\n\r\n          <app-post-info [userName]=\"postItemData.ownerName\"\r\n                         [spaceName]=\"postItemData.spaceName\"\r\n                         [imageUrl]=\"postItemData.ownerImageUrl\"\r\n                         [createdAtTime]=\"postItemData.createdAtTime\"\r\n                         [ownerId]=\"postItemData.ownerId\"\r\n                         [postLink]=\"postItemData.postLink\"\r\n          ></app-post-info>\r\n\r\n          <app-post-menu [post]=\"postItemData\"\r\n                         (onClickViewReaction)=\"onViewReaction()\"\r\n          ></app-post-menu>\r\n        </div>\r\n\r\n        <app-paragraph [text]=\"postItemData.summary\"\r\n                       [isShowMore]=\"postItemData.isShowMore\"\r\n                       [marginBottom]=\"10\"\r\n        ></app-paragraph>\r\n\r\n        <ng-container *ngIf=\"sharedPostItemData;\">\r\n          <app-post-item [isSharedPost]=\"true\"\r\n                         [postItemData]=\"sharedPostItemData\">\r\n          </app-post-item>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"isSharedPostHidden\">\r\n          <div class=\"post-not-found\">Post not found</div>\r\n        </ng-container>\r\n\r\n      </div>\r\n\r\n      <div class=\"action-panel-wp\">\r\n        <app-action-panel [isShowComment]=\"true\"\r\n                          [postId]=\"postItemData.id\"\r\n                          [upvoteCount]=\"postItemData.upvotesCount\"\r\n                          [downvoteCount]=\"postItemData.downvotesCount\"\r\n                          [commentCount]=\"postItemData.repliesCount\"\r\n                          [isShowShare]=\"true\"\r\n                          (commentClick)=\"onCommentButtonClick()\"\r\n        ></app-action-panel>\r\n\r\n        <ng-container *ngIf=\"isCommentOpen\">\r\n\r\n          <mat-divider [inset]=\"true\" [style.margin]=\"'4px 0 16px 0'\"></mat-divider>\r\n\r\n          <app-comments [rootPost]=\"postItemData\"\r\n                        [repliesCount]=\"repliesCount\"\r\n          ></app-comments>\r\n\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "SharePostModalDialogComponent",
            "id": "component-SharePostModalDialogComponent-89a13ef3e6cedf907f3a0b4586bb7833",
            "file": "src/app/ui-lib/modal-dialogs/share-post-modal-dialog/share-post-modal-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-share-post-modal-dialog",
            "styleUrls": [
                "./share-post-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./share-post-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<SharePostModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sharedPostForm",
                    "defaultValue": "new FormGroup({\r\n    spaceId: new FormControl(''),\r\n    body: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "createSharePost",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Post } from '../../../core/models/post/post-list-item.model';\r\nimport { BaseTxComponent } from '../../../core/base-component/base-tx.component';\r\nimport { TransactionService } from '../../../shared/services/transaction.service';\r\nimport { AccountService } from '../../../shared/services/account.service';\r\nimport { SubmittableResult } from '@polkadot/api';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { SharedPostContent } from '@subsocial/types';\r\nimport { METHODS, PALLETS } from '../../../core/constants/query.const';\r\nimport { PostFacade } from '../../../state/post/post.facade';\r\nimport { Router } from '@angular/router';\r\nimport { pipe, Subject } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { takeValueOnce } from '../../../core/rxjs-custom/operators';\r\nimport { SignInModalService } from '../services/sign-in-modal.service';\r\n\r\n@Component({\r\n  selector: 'app-share-post-modal-dialog',\r\n  templateUrl: './share-post-modal-dialog.component.html',\r\n  styleUrls: ['./share-post-modal-dialog.component.scss'],\r\n})\r\nexport class SharePostModalDialogComponent\r\n  extends BaseTxComponent\r\n  implements OnInit\r\n{\r\n  constructor(\r\n    public dialogRef: MatDialogRef<SharePostModalDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: Post,\r\n    public transaction: TransactionService,\r\n    public account: AccountService,\r\n    public cd: ChangeDetectorRef,\r\n    private postFacade: PostFacade,\r\n    private router: Router,\r\n    public signIn: SignInModalService\r\n  ) {\r\n    super(transaction, account, signIn, cd);\r\n  }\r\n\r\n  sharedPostForm = new FormGroup({\r\n    spaceId: new FormControl(''),\r\n    body: new FormControl(''),\r\n  });\r\n\r\n  ngOnInit(): void {}\r\n\r\n  async createSharePost() {\r\n    const pallet = PALLETS.posts;\r\n    const method = METHODS.createPost;\r\n\r\n    const { spaceId, body } = this.sharedPostForm.value;\r\n\r\n    const content: SharedPostContent = {\r\n      body,\r\n    };\r\n\r\n    this.contentCid = await this.saveContent(content);\r\n\r\n    const params = [\r\n      spaceId,\r\n      { SharedPost: this.data.id },\r\n      { IPFS: this.contentCid },\r\n    ];\r\n\r\n    await this.initExtrinsic({ pallet, params, method });\r\n\r\n    await this.sentTransaction();\r\n  }\r\n\r\n  onFailed(result: SubmittableResult | null): void {}\r\n\r\n  onSuccess(result: SubmittableResult) {\r\n    const ids = this.getNewIdsFromEvent(result);\r\n    if (ids?.length > 0) {\r\n      this.postFacade\r\n        .fetchPost(ids[0])\r\n        .pipe(takeValueOnce)\r\n        .subscribe((post) => {\r\n          this.router.navigate(['/' + post.postLink]);\r\n          this.dialogRef.close();\r\n        });\r\n    }\r\n  }\r\n\r\n  validate(): boolean {\r\n    return true;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.share-post {\r\n  padding: 16px;\r\n\r\n  .modal-header {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .share-post-body {\r\n    &>* {\r\n      display: block;\r\n      margin-bottom: 16px;\r\n    }\r\n  }\r\n}\r\n\r\n.button-wp {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: $space_normal;\r\n  margin-top: $space_normal;\r\n\r\n  button {\r\n    font-size: $font_normal;\r\n  }\r\n}\r\n",
                    "styleUrl": "./share-post-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SharePostModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "Post",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SharePostModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "Post",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postFacade",
                        "type": "PostFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseTxComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp share-post\">\n  <div class=\"modal-header\">\n    <h2 class=\"title-medium\">{{ 'post.sharePost' | transloco }}</h2>\n    <app-close-button (onClose)=\"dialogRef.close()\"></app-close-button>\n  </div>\n\n  <form [formGroup]=\"sharedPostForm\" action=\"\" class=\"share-post-body\"\n        *transloco=\"let t; read: 'forms.placeholder'\"\n  >\n    <app-space-select formControlName=\"spaceId\"></app-space-select>\n\n    <app-mde-editor [height]=\"80\"\n                    [autoFocus]=\"true\"\n                    [placeholder]=\"t('comment')\"\n                    formControlName=\"body\"\n    ></app-mde-editor>\n\n    <app-post-item [isSharedPost]=\"true\"\n                   [postItemData]=\"data\"\n    ></app-post-item>\n  </form>\n\n  <div class=\"button-wp\" *transloco=\"let t; read: 'buttons'\">\n    <button mat-stroked-button (click)=\"dialogRef.close()\">{{ t('cancel') }}</button>\n\n    <app-tx-button [isSending]=\"isSending\"\n                   (click)=\"createSharePost()\"\n                   [name]=\"t('createPost')\"\n    ></app-tx-button>\n  </div>\n\n</div>\n\n"
        },
        {
            "name": "ShowCommentsButtonComponent",
            "id": "component-ShowCommentsButtonComponent-2d3c6fd5058822e2385b6ddc97e0b8e0",
            "file": "src/app/ui-lib/comment/show-comments-button/show-comments-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-show-comments-button",
            "styleUrls": [
                "./show-comments-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./show-comments-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isShowReplyComments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean | null"
                },
                {
                    "name": "replyCommentCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "showMore",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-show-comments-button',\n  templateUrl: './show-comments-button.component.html',\n  styleUrls: ['./show-comments-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShowCommentsButtonComponent implements OnInit {\n  @Input() isShowReplyComments: boolean | null;\n  @Input() replyCommentCount: number | null;\n  @Output() showMore = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.reply-comment-title {\r\n  margin-left: $space_normal;\r\n  display: flex;\r\n  align-items: center;\r\n  color: #F759AB;\r\n\r\n  mat-icon {\r\n    margin-left: 3px;\r\n  }\r\n\r\n  .reply-count {\r\n    font-weight: 500;\r\n    font-size: 14px;\r\n    line-height: 24px;\r\n    letter-spacing: 0.1px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n.rotate-up {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.rotate-down {\r\n  transform: rotate(0deg);\r\n}\r\n\r\n@keyframes rotate-up {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(180deg);\r\n  }\r\n}\r\n\r\n@keyframes rotate-down {\r\n  0% {\r\n    transform: rotate(180deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n",
                    "styleUrl": "./show-comments-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"!!replyCommentCount\">\n  <div class=\"reply-comment-title\"\n       [style.margin-bottom]=\"isShowReplyComments ? '0' : '9px'\"\n  >\n    <a class=\"reply-count\"\n       *transloco=\"let t; read: 'buttons'\"\n       (click)=\"showMore.emit()\" >\n      {{ (isShowReplyComments\n             ?  t('hide') : t('show')) + ' ' + replyCommentCount\n             + ' ' + (replyCommentCount | pluralize : t('reply'))\n      }}\n    </a>\n    <mat-icon svgIcon=\"arrow-icon\"\n              [style.width]=\"'10px'\"\n              [ngClass]=\"{ 'rotate-up': isShowReplyComments, 'rotate-down': !isShowReplyComments }\"\n    ></mat-icon>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "SidenavMenuComponent",
            "id": "component-SidenavMenuComponent-06614665b5720e0d0b5ca05ad6679265",
            "file": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidenav-menu",
            "styleUrls": [
                "./sidenav-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "profileId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableLanguage",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LanguageMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "currentLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isLangMenuOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectMenu",
                    "args": [
                        {
                            "name": "lang",
                            "type": "LanguageMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "LanguageMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { AvailableLangs, TranslocoService } from '@ngneat/transloco';\r\nimport { SnackBarService } from '../../../shared/services/snack-bar.service';\r\nimport { KeyValuePair } from '../../../core/models/key-value-pair.model';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { StorageService } from '../../../shared/services/storage.service';\r\n\r\nconst LANG_LABELS: KeyValuePair<string> = {\r\n  en: 'English',\r\n  ru: 'Русский',\r\n};\r\n\r\ntype LanguageMenuItem = {\r\n  id: string;\r\n  label: string;\r\n  isActive: boolean;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-sidenav-menu',\r\n  templateUrl: './sidenav-menu.component.html',\r\n  styleUrls: ['./sidenav-menu.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SidenavMenuComponent implements OnInit {\r\n  @Input() profileId: string;\r\n  currentLanguage: string;\r\n  availableLanguage: LanguageMenuItem[] = [];\r\n  isLangMenuOpen: boolean;\r\n\r\n  constructor(\r\n    private snackBarService: SnackBarService,\r\n    private transloco: TranslocoService,\r\n    private storageService: StorageService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const lang = this.transloco.getActiveLang();\r\n    const availableLang = this.transloco.getAvailableLangs() as string[];\r\n    this.currentLanguage = LANG_LABELS[lang];\r\n\r\n    availableLang.map((id) => {\r\n      this.availableLanguage.push({\r\n        id: id,\r\n        label: LANG_LABELS[id],\r\n        isActive: id === lang,\r\n      });\r\n    });\r\n  }\r\n\r\n  selectMenu(lang: LanguageMenuItem) {\r\n    this.transloco.setActiveLang(lang.id);\r\n    this.currentLanguage = lang.label;\r\n    this.availableLanguage = this.availableLanguage.map((langItem) => ({\r\n      id: langItem.id,\r\n      label: langItem.label,\r\n      isActive: lang.id === langItem.id,\r\n    }));\r\n    this.storageService.setLang(lang.id);\r\n  }\r\n\r\n  onSettings() {\r\n    this.snackBarService.openSimpleSnackBar({\r\n      message: 'Settings must be implemented',\r\n      iconName: 'info-icon',\r\n      isShowCloseButton: true,\r\n      duration: 6000,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../shared/styles/_var.scss\";\r\n\r\nbutton {\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 40px;\r\n  font-size: 17px;\r\n  line-height: 125%;\r\n\r\n\r\n  mat-icon {\r\n    width: 16px;\r\n    height: 16px;\r\n    margin: 0 30px 0 5px;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: $hover_color_light;\r\n  }\r\n}\r\n\r\n.lang-name {\r\n  padding-left: 4px;\r\n}\r\n\r\n.lang-list-item {\r\n  mat-icon {\r\n    position: absolute;\r\n    left: 13px;\r\n    width: 24px;\r\n    height: 24px;\r\n  }\r\n\r\n  padding-right: 55px;\r\n  padding-left: 55px;\r\n\r\n  &-active {\r\n    color: $color_primary;\r\n  }\r\n}\r\n\r\n.lang-btn {\r\n  ::ng-deep {\r\n    .arrow{\r\n      position: absolute;\r\n      right: 0;\r\n\r\n      svg {\r\n        path {\r\n          fill: $color_gray_dark;\r\n        }\r\n      }\r\n    }\r\n\r\n    .world-icon {\r\n      svg {\r\n        path {\r\n          fill: $color_black;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.arrow-up {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.arrow-down {\r\n  transform: rotate(0deg);\r\n}\r\n",
                    "styleUrl": "./sidenav-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "snackBarService",
                        "type": "SnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transloco",
                        "type": "TranslocoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-column [v]=\"'start'\" [padding]=\"'14px 0'\">\r\n  <button mat-ripple [routerLink]=\"['/accounts', profileId]\">\r\n    <mat-icon svgIcon=\"profile-icon\"></mat-icon>\r\n    <span>{{ 'buttons.myProfile' | transloco }}</span>\r\n  </button>\r\n\r\n  <button mat-ripple [routerLink]=\"['/accounts', profileId, 'profile','edit']\">\r\n    <mat-icon svgIcon=\"edit-icon\"></mat-icon>\r\n    <span>{{ 'buttons.editMyProfile' | transloco }}</span>\r\n  </button>\r\n\r\n\r\n  <button mat-ripple\r\n          [matMenuTriggerFor]=\"langMenu\"\r\n          class=\"lang-btn\"\r\n          (menuOpened)=\"isLangMenuOpen = true\"\r\n          (menuClosed)=\"isLangMenuOpen = false\"\r\n  >\r\n    <mat-icon class=\"world-icon\" svgIcon=\"world-icon\"></mat-icon>\r\n    <span>{{ 'buttons.Language' | transloco }}:</span>\r\n    <span class=\"lang-name\">{{ currentLanguage}}</span>\r\n    <mat-icon class=\"arrow\"\r\n              svgIcon=\"arrow-icon\"\r\n              [ngClass]=\"{\r\n                'arrow-up': isLangMenuOpen,\r\n                'arrow-down': !isLangMenuOpen\r\n              }\"\r\n    ></mat-icon>\r\n  </button>\r\n\r\n  <mat-menu #langMenu=\"matMenu\" xPosition=\"before\">\r\n    <button mat-menu-item\r\n            *ngFor=\"let lang of availableLanguage\"\r\n            class=\"lang-list-item\"\r\n            [ngClass]=\"{'lang-list-item-active': lang.isActive }\"\r\n            (click)=\"selectMenu(lang)\"\r\n    >\r\n      <mat-icon svgIcon=\"check-icon\" *ngIf=\"lang.isActive\"></mat-icon>\r\n      <span>{{ lang.label }}</span>\r\n    </button>\r\n  </mat-menu>\r\n\r\n  <button mat-ripple (click)=\"onSettings()\">\r\n    <mat-icon svgIcon=\"setting-icon\"></mat-icon>\r\n    <span>{{ 'buttons.settings' | transloco }}</span>\r\n  </button>\r\n</app-column>\r\n\r\n\r\n\r\n\r\n"
        },
        {
            "name": "SignInModalDialogComponent",
            "id": "component-SignInModalDialogComponent-e3b4ab088867e310268580938ad53a91",
            "file": "src/app/ui-lib/modal-dialogs/sign-in-modal-dialog/sign-in-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in-modal-dialog",
            "styleUrls": [
                "./sign-in-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "ACCOUNT_STATUS"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ACCOUNT_STATUS",
                    "defaultValue": "ACCOUNT_STATUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalData",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<SignInModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ipfsUrl",
                    "defaultValue": "environment.ipfsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "LINKS",
                    "defaultValue": "LINKS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectAccount",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {\n  ACCOUNT_STATUS,\n  AccountService,\n} from '../../../shared/services/account.service';\nimport { SignInModalData } from '../../../core/types/dialog-modal-data.types';\nimport { environment } from '../../../../environments/environment';\nimport { AccountData } from '../../../core/types/account.types';\nimport { LINKS } from '../../../core/constants/links.const';\nimport { SignInModalService } from '../services/sign-in-modal.service';\n\n@Component({\n  selector: 'app-sign-in-modal-dialog',\n  templateUrl: './sign-in-modal-dialog.component.html',\n  styleUrls: ['./sign-in-modal-dialog.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignInModalDialogComponent implements OnInit {\n  @Input() status: ACCOUNT_STATUS;\n\n  ACCOUNT_STATUS = ACCOUNT_STATUS;\n  ipfsUrl = environment.ipfsUrl;\n\n  LINKS = LINKS;\n\n  constructor(\n    public dialogRef: MatDialogRef<SignInModalDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: SignInModalData\n  ) {}\n\n  ngOnInit(): void {}\n\n  selectAccount(account: AccountData) {\n    this.dialogRef.close(account);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/app/shared/styles/var\";\r\n@import \"src/app/shared/styles/mixins\";\r\n\r\n.modal-header {\r\n  position: relative;\r\n  text-align: center;\r\n\r\n  .header-title {\r\n    color: #A0A0A0;\r\n    width: 100%;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n\r\n.close-btn {\r\n  position: absolute;\r\n  right: -5px;\r\n  top: -6px;\r\n}\r\n\r\n.ext-not-found {\r\n  padding: 0 $space_big;\r\n  align-items: center;\r\n\r\n  span {\r\n    white-space: nowrap;\r\n  }\r\n\r\n  .message {\r\n    text-align: center;\r\n    padding: $space_small 0;\r\n\r\n    a {\r\n      padding-right: $space_mini;\r\n    }\r\n  }\r\n\r\n  .link-wp {\r\n    width: 230px;\r\n\r\n    a {\r\n      @include font($font_normal, 500);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: #262626;\r\n      border: 1px solid #D9D9D9;\r\n      border-radius: 4px;\r\n      padding: $space_tiny $space_big;\r\n\r\n      &:hover {\r\n        transition: background-color 300ms;\r\n        background-color: #f3f3f3;\r\n      }\r\n\r\n      img {\r\n        margin-right: $space_mini;\r\n      }\r\n    }\r\n  }\r\n\r\n  .footer-not-ext-wp {\r\n    font-size: $font_small;\r\n    margin-top: $space_large;\r\n    padding: $space_mini 0 $space_large;\r\n\r\n    span {\r\n      color: #8C8C8C;\r\n    }\r\n  }\r\n}\r\n\r\n.account-not-found {\r\n  p {\r\n    font-size: $font-normal;\r\n    padding: 21px 28px;\r\n    text-align: center;\r\n    white-space: pre;\r\n    background: #FFFAD5;\r\n    border-radius: 5px;\r\n  };\r\n}\r\n\r\n.footer-wp {\r\n  @include font($font_small, 500);\r\n  padding: $space_mini 0 $space_large;\r\n  color: #A0A0A0;\r\n  text-align: center;\r\n\r\n  a {\r\n    padding: 0 $space_normal;\r\n\r\n    &:first-child {\r\n      border-right: 1px solid #EEECEC;\r\n    }\r\n  }\r\n}\r\n\r\n.link{\r\n  color: $color_primary;\r\n  font-weight: 500;\r\n}\r\n\r\n.unauthorized {\r\n  &>span {\r\n    padding: 8px 0 5px;\r\n    font-size: $font_normal;\r\n  }\r\n\r\n  .account-list {\r\n    width: 400px;\r\n    margin-bottom: $space_large;\r\n    max-height: 244px;\r\n    overflow-y: auto;\r\n    margin-right: -$space_mini;\r\n\r\n    .account-item {\r\n      border-bottom: 1px solid #EEECEC;\r\n      padding: 8px 0 5px;\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        background-color: #f6f6f6;\r\n      }\r\n\r\n      .account-info-wp {\r\n        width: 100%;\r\n        margin-left: $space_normal;\r\n        padding-right: $space_mini;\r\n\r\n        .name {\r\n          @include font($font_normal, 500);\r\n          display: block;\r\n          padding-bottom: $space_mini;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./sign-in-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SignInModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "SignInModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SignInModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "SignInModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container>\r\n  <app-column [padding]=\"'16px 16px 0 16px'\">\r\n\r\n    <section class=\"modal-header\">\r\n\r\n      <app-close-button class=\"close-btn\"\r\n                        (onClose)=\"dialogRef.close()\"\r\n      ></app-close-button>\r\n\r\n      <div class=\"header-title title-large\" *transloco=\"let t; read: 'modals.login'\">\r\n        {{ data.isTx ? t('title-wait') : t('title') }}\r\n      </div>\r\n\r\n    </section>\r\n\r\n    <ng-container [ngSwitch]=\"data.status\">\r\n\r\n      <ng-template [ngSwitchCase]=\"ACCOUNT_STATUS.EXTENSION_NOT_FOUND\">\r\n        <app-column class=\"ext-not-found\" *transloco=\"let t; read: 'modals.login.noExtension'\">\r\n          <span class=\"message normal\">\r\n            <span>\r\n              <a class=\"link\"\r\n                 target=\"_blank\"\r\n                 href=\"{{LINKS.polkadotExt}}\">\r\n                Polkadot Extension\r\n              </a>\r\n\r\n              <span>{{ t('wasNotFound') }}</span>\r\n            </span>\r\n            <br>\r\n            <span>{{ t('installExt') }}</span>\r\n          </span>\r\n\r\n          <app-column class=\"link-wp\">\r\n            <a matRipple\r\n               target=\"_blank\"\r\n               href=\"{{LINKS.chromeExt}}\"\r\n            >\r\n              <img src=\"../../../../assets/img/chrome.png\" alt=\"\">\r\n              <span>{{ t('installForChrome') }}</span>\r\n            </a>\r\n\r\n            <a matRipple\r\n               class=\"mt-16\"\r\n               target=\"_blank\"\r\n               href=\"{{LINKS.firefoxExt}}\"\r\n            >\r\n              <img src=\"../../../../assets/img/firefox.png\" alt=\"\">\r\n              <span>{{ t('installForFirefox') }}</span>\r\n            </a>\r\n          </app-column>\r\n\r\n          <div class=\"footer-not-ext-wp\">\r\n            <span>\r\n              {{ t('needHelp') }}\r\n              <a class=\"link\"> {{ t('signInGuide') }}</a>\r\n            </span>\r\n          </div>\r\n        </app-column>\r\n\r\n      </ng-template>\r\n\r\n      <ng-template [ngSwitchCase]=\"ACCOUNT_STATUS.ACCOUNTS_NOT_FOUND\">\r\n        <div class=\"account-not-found\" *transloco=\"let t; read: 'modals.login.noAccountScreen'\">\r\n          <p>\r\n            {{ t('noAccountFound') }}\r\n            <br>\r\n            <b>Polkadot extension</b>\r\n            {{ t('createNew') }}\r\n            <br>\r\n            {{ t('importExisting') }}\r\n          </p>\r\n\r\n          <div class=\"footer-wp\">\r\n            <a href=\"\">{{ t('privacyPolicy') }}</a>\r\n            <a href=\"\">{{ t('termOfUse') }}</a>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n\r\n      <ng-template [ngSwitchCase]=\"ACCOUNT_STATUS.UNAUTHORIZED\">\r\n\r\n        <app-column v=\"center\" class=\"unauthorized\" *transloco=\"let t; read: 'modals.login.accountScreen'\">\r\n\r\n          <span>{{ t('message') }}</span>\r\n\r\n          <app-scroll class=\"account-list\">\r\n\r\n            <app-row v=\"center\"\r\n                     (click)=\"selectAccount(account)\"\r\n                     class=\"account-item\"\r\n                     *ngFor=\"let account of data.accounts\"\r\n            >\r\n\r\n              <app-avatar [size]=\"40\"\r\n                          [jdentityValue]=\"account.id\"\r\n                          [src]=\"account.avatar\">\r\n              </app-avatar>\r\n\r\n              <app-row h=\"space-between\" class=\"account-info-wp\">\r\n\r\n                <app-column>\r\n\r\n                  <span class=\"name\">{{account.name || (account.id | addressHidden)}}</span>\r\n\r\n                  <app-tokens [size]=\"'small'\"\r\n                              [showIcon]=\"false\"\r\n                              [tokens]=\"account.balance\"\r\n                  ></app-tokens>\r\n\r\n                </app-column>\r\n\r\n                <app-address size=\"small\"\r\n                             [address]=\"account.id\"\r\n                ></app-address>\r\n\r\n              </app-row>\r\n\r\n            </app-row>\r\n          </app-scroll>\r\n\r\n          <app-row h=\"center\" class=\"footer-wp\" *transloco=\"let t; read: 'modals.login.noAccountScreen'\">\r\n            <a href=\"\">{{ t('privacyPolicy') }}</a>\r\n            <a href=\"\">{{ t('termOfUse') }}</a>\r\n          </app-row>\r\n        </app-column>\r\n\r\n      </ng-template>\r\n\r\n    </ng-container>\r\n  </app-column>\r\n</ng-container>\r\n"
        },
        {
            "name": "SignOutButtonComponent",
            "id": "component-SignOutButtonComponent-9297bbd07ba36cd0692943abf4147bb6",
            "file": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-out-button",
            "styleUrls": [
                "./sign-out-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-out-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sign-out-button',\r\n  templateUrl: './sign-out-button.component.html',\r\n  styleUrls: ['./sign-out-button.component.scss']\r\n})\r\nexport class SignOutButtonComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.sign-out-button {\r\n  width: 100%;\r\n}\r\n\r\n.mat-stroked-button {\r\n  border: $border_primary !important;\r\n}\r\n",
                    "styleUrl": "./sign-out-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button class=\"sign-out-button\" mat-stroked-button color=\"primary\">\r\n  {{ 'buttons.signOut' | transloco }}\r\n</button>\r\n"
        },
        {
            "name": "SimpleSnackBarComponent",
            "id": "component-SimpleSnackBarComponent-1535b7fcc9ea47061fae5c3de01cfe58",
            "file": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-simple-snack-bar",
            "styleUrls": [
                "./simple-snack-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./simple-snack-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimpleSnackBarOption",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimpleSnackBarOption",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "snackBarRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarRef<SimpleSnackBarComponent>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string | undefined"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Inject,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport {\r\n  MatSnackBarRef,\r\n  MAT_SNACK_BAR_DATA,\r\n} from '@angular/material/snack-bar';\r\n\r\nexport type SimpleSnackBarOption = {\r\n  message: string;\r\n  iconName?: string;\r\n  isShowCloseButton?: boolean;\r\n  duration?: number;\r\n  isWait?: boolean;\r\n  className?: string;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-simple-snack-bar',\r\n  templateUrl: './simple-snack-bar.component.html',\r\n  styleUrls: ['./simple-snack-bar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SimpleSnackBarComponent implements OnInit {\r\n  options: SimpleSnackBarOption;\r\n\r\n  constructor(\r\n    @Inject(MAT_SNACK_BAR_DATA) public data: SimpleSnackBarOption,\r\n    public snackBarRef: MatSnackBarRef<SimpleSnackBarComponent>\r\n  ) {\r\n    this.options = data;\r\n  }\r\n\r\n  @HostBinding('class') class: string | undefined;\r\n\r\n  ngOnInit(): void {\r\n    this.class = this.data.className;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n:host {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nmat-icon, mat-spinner {\r\n  margin-right: $space_normal;\r\n}\r\n\r\nmat-icon {\r\n  width: 20px;\r\n}\r\n",
                    "styleUrl": "./simple-snack-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "SimpleSnackBarOption",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<SimpleSnackBarComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "SimpleSnackBarOption",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<SimpleSnackBarComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-row [v]=\"'center'\">\r\n\r\n  <mat-icon *ngIf=\"options.iconName\"\r\n            svgIcon=\"{{ options.iconName }}\"\r\n  ></mat-icon>\r\n  <mat-spinner *ngIf=\"options.isWait\"\r\n               [diameter]=\"25\"></mat-spinner>\r\n\r\n  <span>{{ options.message }}</span>\r\n\r\n</app-row>\r\n\r\n<app-close-button (onClose)=\"snackBarRef.dismiss()\" *ngIf=\"options.isShowCloseButton\"></app-close-button>\r\n"
        },
        {
            "name": "SpaceComponent",
            "id": "component-SpaceComponent-15487ce0e48cb3365270282895151bb6",
            "file": "src/app/space/space/space.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space",
            "styleUrls": [
                "./space.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAutoExpandSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isMySpace$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "postIds$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "space$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Space | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SpaceService } from '../services/space.service';\r\nimport { PostService } from '../../post/services/post.service';\r\nimport { Space } from '../../state/space/space.state';\r\nimport { from, Observable } from 'rxjs';\r\nimport { SpaceFacade } from '../../state/space/space.facade';\r\nimport {\r\n  filter,\r\n  map,\r\n  shareReplay,\r\n  switchMap,\r\n  tap,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { PermissionsService } from '../../shared/services/permissions.service';\r\nimport { AccountService } from '../../shared/services/account.service';\r\n\r\n@Component({\r\n  selector: 'app-space',\r\n  templateUrl: './space.component.html',\r\n  styleUrls: ['./space.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceComponent implements OnInit {\r\n  postIds$: Observable<string[]>;\r\n  space$: Observable<Space | undefined>;\r\n  isMySpace$: Observable<boolean>;\r\n  isAutoExpandSummary: boolean;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private spaceService: SpaceService,\r\n    private postService: PostService,\r\n    private spaceFacade: SpaceFacade,\r\n    private permission: PermissionsService,\r\n    private accountService: AccountService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    const spaceId$ = this.route.params.pipe(\r\n      map((params) => params['spaceId']),\r\n      shareReplay(1)\r\n    );\r\n\r\n    this.space$ = spaceId$.pipe(\r\n      tap((id) => this.spaceFacade.loadSpace(id)),\r\n      switchMap((id) => this.spaceFacade.getSpace(id)),\r\n      filter((space) => !!space)\r\n    );\r\n\r\n    this.postIds$ = this.space$.pipe(\r\n      switchMap((space) =>\r\n        from(this.postService.getPostIdsBySpaceId(space!.id))\r\n      ),\r\n      filter((ids) => ids?.length > 0)\r\n    );\r\n\r\n    this.isMySpace$ = this.accountService.currentAccount$.pipe(\r\n      withLatestFrom(this.space$),\r\n      filter(([account]) => !!account),\r\n      switchMap(([account, space]) =>\r\n        this.permission.checkIfSpaceOwner(account!.id, space!.id)\r\n      )\r\n    );\r\n\r\n    this.isAutoExpandSummary = this.route.snapshot.queryParams['isAutoExpand'];\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.space-wp {\r\n  margin-bottom: $space_normal;\r\n}\r\n\r\n",
                    "styleUrl": "./space.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-space-profile *ngIf=\"(space$ | async) as space\"\r\n                    [space]=\"space\"\r\n                   [isMySpace]=\"isMySpace$ | async\"\r\n                   [isAutoExpandSummary]=\"isAutoExpandSummary\"\r\n                   class=\"space-wp\"\r\n></app-space-profile>\r\n\r\n<ng-container *ngIf=\"(postIds$ | async) as postIds; else noPost\">\r\n\r\n  <app-post-list [type]=\"'all'\"\r\n                 [ids]=\"postIds\"\r\n                 [showHiddenContent]=\"isMySpace$ | async\"\r\n  ></app-post-list>\r\n\r\n</ng-container>\r\n\r\n<ng-template #noPost>\r\n\r\n  <app-no-content [text]=\"'content.noPosts' | transloco\"></app-no-content>\r\n\r\n</ng-template>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "SpaceInfoComponent",
            "id": "component-SpaceInfoComponent-b898f8e58fbc3e72d5b2e037a75547cb",
            "file": "src/app/ui-lib/space-ui/space-info/space-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-info",
            "styleUrls": [
                "./space-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "avatarSrc",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "followersCount",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number"
                },
                {
                    "name": "itemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "\"list\" | \"single\""
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "postsCount",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "spaceId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "spaceName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "AVATAR_SIZE",
                    "defaultValue": "AVATAR_SIZE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "deviceService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "modalConfig",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "configModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { DeviceService } from '../../../shared/services/device.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { FollowersModalDialogComponent } from '../../modal-dialogs/followers-modal-dialog/followers-modal-dialog.component';\nimport { isPlatformBrowser } from '@angular/common';\nimport { AVATAR_SIZE } from '../../../core/constants/size.const';\n\n@Component({\n  selector: 'app-space-info',\n  templateUrl: './space-info.component.html',\n  styleUrls: ['./space-info.component.scss'],\n})\nexport class SpaceInfoComponent implements OnInit, OnDestroy {\n  @Input() link = '';\n  @Input() spaceId = '';\n  @Input() postsCount = 1;\n  @Input() avatarSrc = '';\n  @Input() spaceName = '';\n  @Input() followersCount = 1;\n  @Input() itemType: 'list' | 'single';\n\n  AVATAR_SIZE = AVATAR_SIZE;\n\n  private unsubscribe$: Subject<void> = new Subject();\n  private modalConfig: MatDialogConfig = {};\n\n  constructor(\n    public dialog: MatDialog,\n    public deviceService: DeviceService,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit(): void {\n    this.configModalDialog();\n  }\n\n  onOpenModal() {\n    this.dialog.open(FollowersModalDialogComponent, this.modalConfig);\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$?.next();\n    this.unsubscribe$?.complete();\n  }\n\n  private configModalDialog() {\n    const data = {\n      spaceId: this.spaceId,\n    };\n\n    if (isPlatformBrowser(this.platformId)) {\n      this.deviceService\n        ?.getResponsiveModalData()\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (responsiveData) => (this.modalConfig = { ...responsiveData, data })\n        );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n:host {\r\n  display: flex;\r\n}\r\n\r\n.info {\r\n  font-size: $font_small;\r\n\r\n  .dot {\r\n    margin-right: $space_mini;\r\n  }\r\n\r\n  a:hover {\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n\r\n.single {\r\n  color: $color_black;\r\n\r\n  .count {\r\n    font-weight: 500;\r\n  }\r\n}\r\n\r\n.list {\r\n  color: $color_gray_dark;\r\n}\r\n\r\n.count {\r\n  padding-right: $space_mini;\r\n}\r\n",
                    "styleUrl": "./space-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-avatar [src]=\"avatarSrc\"\r\n            [size]=\"itemType === 'list' ? AVATAR_SIZE.SMALL : AVATAR_SIZE.MEDIUM\"\r\n            [name]=\"spaceName\"\r\n            [jdentityValue]=\"spaceId\"\r\n></app-avatar>\r\n\r\n<app-column [margin]=\"'0 0 0 8px'\" [h]=\"'space-between'\">\r\n\r\n  <app-title [text]=\"spaceName\"\r\n             [type]=\"itemType === 'list' ? 'small' : 'medium'\"\r\n             [link]=\"'/' + link\"\r\n  ></app-title>\r\n\r\n  <app-row [ngClass]=\"[itemType, 'info']\" *transloco=\"let t; read: 'general'\">\r\n\r\n    <span [style.margin-right]=\"itemType === 'single' ? '12px' : '4px'\">\r\n      <span class=\"count\">{{postsCount | numeral}}</span>\r\n      <span>{{postsCount | pluralize:  t('Post')}}</span>\r\n    </span>\r\n\r\n    <span  *ngIf=\"itemType === 'list'\" class=\"dot\">·</span>\r\n\r\n    <a (click)=\"onOpenModal()\">\r\n      <span class=\"count\">{{followersCount | numeral}}</span>\r\n      <span>{{followersCount | pluralize: t('follower')}}</span>\r\n    </a>\r\n\r\n  </app-row>\r\n\r\n</app-column>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "SpaceItemComponent",
            "id": "component-SpaceItemComponent-c477d02d8378bb18a64db44ffd6f09a2",
            "file": "src/app/ui-lib/space-ui/space-item/space-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-item",
            "styleUrls": [
                "./space-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemType",
                    "defaultValue": "'list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"list\" | \"single\""
                },
                {
                    "name": "showHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean | undefined"
                },
                {
                    "name": "space",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Space | undefined | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFollowed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "skip$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { FollowerService } from '../../../shared/services/follower.service';\r\nimport { AccountService } from '../../../shared/services/account.service';\r\nimport { Space } from '../../../state/space/space.state';\r\nimport { SpaceFacade } from '../../../state/space/space.facade';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-space-item',\r\n  templateUrl: './space-item.component.html',\r\n  styleUrls: ['./space-item.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceItemComponent implements OnInit {\r\n  @Input() space: Space | undefined | null;\r\n  @Input() itemType: 'list' | 'single' = 'list';\r\n  @Input() showHidden: boolean | undefined;\r\n  isFollowed$: Observable<boolean>;\r\n  skip$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private followerService: FollowerService,\r\n    private cd: ChangeDetectorRef,\r\n    private accountService: AccountService,\r\n    private spaceFacade: SpaceFacade\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isFollowed$ = this.followerService.checkIfFollowSpace(this.space?.id);\r\n\r\n    this.skip$ = combineLatest([\r\n      this.accountService.currentAccount$,\r\n      this.spaceFacade.getSpace(this.space!.id),\r\n    ]).pipe(\r\n      filter(([account, space]) => !!account && !!space),\r\n      map(([account, space]) => {\r\n        const isOwner = account!.id === space!.ownerId;\r\n        return space!.isHidden\r\n          ? isOwner\r\n            ? !this.showHidden\r\n            : true\r\n          : space!.isHidden;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".space-item-wp {\r\n  width: 100%;\r\n  margin-top: 16px;\r\n\r\n  .space-item-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .button-wp {\r\n    display: flex;\r\n    align-items: flex-start;\r\n\r\n    &>div {\r\n      display: flex;\r\n      align-items: center;\r\n      >*:first-child {\r\n        margin-right: 8px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .link-icons-wp {\r\n    margin: 12px 0 8px;\r\n  }\r\n}\r\n\r\n.tags-wp {\r\n  margin-bottom: 16px;\r\n}\r\n",
                    "styleUrl": "./space-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"space && !(skip$ | async)\" class=\"space-item-wp\">\r\n  <mat-card>\r\n    <app-hidden-content [id]=\"space.id\"\r\n                        [type]=\"'space'\"\r\n    ></app-hidden-content>\r\n\r\n    <app-row [v]=\"'start'\"\r\n             [h]=\"'space-between'\"\r\n    >\r\n      <app-space-info [spaceName]=\"space.name\"\r\n                      [avatarSrc]=\"space.image\"\r\n                      [followersCount]=\"space.followersCount\"\r\n                      [postsCount]=\"space.postsCount\"\r\n                      [link]=\"space.spaceLink\"\r\n                      [itemType]=\"itemType\"\r\n                      [spaceId]=\"space.id\"\r\n      ></app-space-info>\r\n\r\n      <app-row [v]=\"'center'\">\r\n\r\n        <app-follow-button [size]=\"'large'\"\r\n                           ifDesktop\r\n                           [isFollow]=\"isFollowed$ | async\"\r\n                           [style.margin-right]=\"'9px'\"\r\n                           [entityId]=\"space.id\"\r\n        ></app-follow-button>\r\n\r\n        <app-space-menu [spaceId]=\"space.id\"\r\n        ></app-space-menu>\r\n\r\n      </app-row>\r\n\r\n    </app-row>\r\n\r\n    <app-paragraph [marginTop]=\"10\"\r\n                   [link]=\"space.spaceLink\"\r\n                   [text]=\"space.summary\"\r\n                   [isAutoExpand]=\"true\"\r\n                   [isShowMore]=\"space.isShowMore\"\r\n    ></app-paragraph>\r\n\r\n    <app-tag *ngFor=\"let tag of space.tags\" [tagName]=\"tag\"></app-tag>\r\n\r\n    <app-follow-button width=\"full\"\r\n                       size=\"large\"\r\n                       ifMobile\r\n                       [style.margin-top]=\"'16px'\"\r\n                       [isFollow]=\"isFollowed$ | async\"\r\n                       [entityId]=\"space.id\"\r\n    ></app-follow-button>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "SpaceListComponent",
            "id": "component-SpaceListComponent-60c5527e41b0a57422d3bd5b82206d90",
            "file": "src/app/space/space-list/space-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-list",
            "styleUrls": [
                "./space-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string[] | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "showHiddenContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"public\" | \"all\"",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "idsSet",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "items$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "getUniqueIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { SpaceListItemData } from '../../core/models/space/space-list-item.model';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../state/state';\r\n\r\nimport {\r\n  selectSpaceEntitiesByIds,\r\n  selectSpacesByIds,\r\n} from '../../state/space/space.selectors';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  loadSpacesByIds,\r\n  loadSpaceSuccess,\r\n} from '../../state/space/space.actions';\r\nimport { BaseInfinityScrollComponent } from '../../core/base-component/base-infinity-scroll.component';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { Space } from '../../state/space/space.state';\r\n\r\n@Component({\r\n  selector: 'app-space-list',\r\n  templateUrl: './space-list.component.html',\r\n  styleUrls: ['./space-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceListComponent\r\n  extends BaseInfinityScrollComponent<Space>\r\n  implements OnInit\r\n{\r\n  @Input() showHidden: boolean;\r\n\r\n  constructor(\r\n    public store: Store<AppState>,\r\n    public cd: ChangeDetectorRef,\r\n    public action$: Actions,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    super(store, cd, action$);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      this.getScrollableData(loadSpacesByIds, selectSpacesByIds);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".space-list-wp {\r\n  width: 100%;\r\n}\r\n\r\n",
                    "styleUrl": "./space-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfinityScrollComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  infinite-scroll\r\n  [infiniteScrollThrottle]=\"50\"\r\n  [infiniteScrollDistance]=\"scrollDistance\"\r\n  (scrolled)=\"onScrollDown()\"\r\n  [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\r\n  class=\"space-list-wp\">\r\n  <ng-container *ngFor=\"let space of items$ | async; trackBy: trackById\">\r\n    <app-space-item [showHidden]=\"showHidden\" [space]=\"space\"></app-space-item>\r\n  </ng-container>\r\n\r\n  <app-spinner [showSpinner]=\"isLoading\"\r\n               [text]=\"'content.moreSpaces' | transloco\"\r\n  ></app-spinner>\r\n</div>\r\n"
        },
        {
            "name": "SpaceMenuComponent",
            "id": "component-SpaceMenuComponent-f0ec0bf75fcb8d5dd0746396d8d9c871",
            "file": "src/app/ui-lib/menu/space-menu/space-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-menu",
            "styleUrls": [
                "./space-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClickViewReaction",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "switchHidden",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isOwner$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "signIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SignInModalService",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transaction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibilityService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "visibleOperationType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisibleOperationType",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "accountService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountService",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "contentCid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpfsCid | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "extrinsic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isAuthRequired",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isFreeTx",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "isSending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "signer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "transactionService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionService",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "txUnsub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "onFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setupInitExtrinsic",
                    "args": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "hidden",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseVisibleTxComponent"
                    }
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnFailed",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "doOnSuccess",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "getNewIdsFromEvent",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "initExtrinsic",
                    "args": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ExtrinsicProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onFailedHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "onSuccessHandler",
                    "args": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "SubmittableResult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "saveContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "CommonContent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendSignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sendUnsignedTx",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "sentTransaction",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsAuthRequired",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsFreeTx",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "setIsSending",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseTxComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { BaseVisibleTxComponent } from '../../../core/base-component/base-visible-tx.component';\r\nimport { TransactionService } from '../../../shared/services/transaction.service';\r\nimport { AccountService } from '../../../shared/services/account.service';\r\nimport { PermissionsService } from '../../../shared/services/permissions.service';\r\nimport { filter, mergeMap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { VisibilityService } from '../../../shared/services/visibility.service';\r\nimport { SignInModalService } from '../../modal-dialogs/services/sign-in-modal.service';\r\n\r\n@Component({\r\n  selector: 'app-space-menu',\r\n  templateUrl: './space-menu.component.html',\r\n  styleUrls: ['./space-menu.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceMenuComponent\r\n  extends BaseVisibleTxComponent\r\n  implements OnInit\r\n{\r\n  @Input() spaceId: string;\r\n  @Input() isHidden: boolean;\r\n  @Output() onClickViewReaction = new EventEmitter();\r\n  @Output() edit = new EventEmitter();\r\n\r\n  isOwner$: Observable<boolean>;\r\n\r\n  constructor(\r\n    public transaction: TransactionService,\r\n    public account: AccountService,\r\n    public cd: ChangeDetectorRef,\r\n    public visibility: VisibilityService,\r\n    private permission: PermissionsService,\r\n    public signIn: SignInModalService\r\n  ) {\r\n    super(transaction, account, cd, signIn, visibility);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.visibleOperationType = 'space';\r\n    this.entityId = this.spaceId;\r\n\r\n    this.isOwner$ = this.account.currentAccount$.pipe(\r\n      filter((account) => !!account),\r\n      mergeMap((account) =>\r\n        this.permission.checkIfSpaceOwner(account!.id, this.spaceId)\r\n      )\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./space-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "transaction",
                        "type": "TransactionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "account",
                        "type": "AccountService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "visibility",
                        "type": "VisibilityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "permission",
                        "type": "PermissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "signIn",
                        "type": "SignInModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseVisibleTxComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<app-icon-button [iconSize]=\"16\"\r\n                 [matMenuTriggerFor]=\"menu\"\r\n                 [iconName]=\"'option-icon'\"\r\n></app-icon-button>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n\r\n  <app-menu-item *ngIf=\"isOwner$ | async\"\r\n                 (click)=\"edit.emit()\"\r\n                 [title]=\"'buttons.editSpace' | transloco\"\r\n                 [iconName]=\"'edit-icon'\"\r\n                 [routerLink]=\"['/spaces', spaceId, 'edit']\"\r\n                 [iconSize]=\"18\"\r\n  ></app-menu-item>\r\n\r\n  <app-menu-item [title]=\"'buttons.hideSpace' | transloco\"\r\n                 [iconName]=\"'hide-icon'\"\r\n                 (click)=\"hide()\"\r\n                 *ngIf=\"!isHidden && (isOwner$ | async)\"\r\n  ></app-menu-item>\r\n\r\n  <app-menu-item [title]=\"'buttons.makeVisible' | transloco\"\r\n                 [iconName]=\"'visible-icon'\"\r\n                 (click)=\"show()\"\r\n                 *ngIf=\"isHidden && (isOwner$ | async)\"\r\n  ></app-menu-item>\r\n\r\n  <app-menu-item [title]=\"'buttons.viewOnIPFS' | transloco\"\r\n                 [iconName]=\"'ipfs-icon'\"\r\n  ></app-menu-item>\r\n\r\n</mat-menu>\r\n"
        },
        {
            "name": "SpaceProfileComponent",
            "id": "component-SpaceProfileComponent-258d77399aa6d88e0ab5fbb0058c0f28",
            "file": "src/app/space/space-profile/space-profile.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-space-profile",
            "styleUrls": [
                "./space-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isAutoExpandSummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "isMySpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean | null"
                },
                {
                    "name": "space",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Space | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFollowed$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isHidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwitchHidden",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { FollowerService } from '../../shared/services/follower.service';\r\nimport { AccountService } from '../../shared/services/account.service';\r\nimport { Router } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { Space } from '../../state/space/space.state';\r\n\r\n@Component({\r\n  selector: 'app-space-profile',\r\n  templateUrl: './space-profile.component.html',\r\n  styleUrls: ['./space-profile.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpaceProfileComponent implements OnInit {\r\n  @Input() space: Space | null;\r\n  @Input() isAutoExpandSummary: boolean;\r\n  @Input() isMySpace: boolean | null;\r\n  isFollowed$: Observable<boolean>;\r\n  isHidden: boolean;\r\n\r\n  constructor(private followerService: FollowerService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isHidden = !!this.space?.isHidden;\r\n\r\n    this.isFollowed$ = this.followerService.checkIfFollowSpace(this.space?.id);\r\n  }\r\n\r\n  onSwitchHidden() {\r\n    this.isHidden = !this.isHidden;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.buttons-wp {\r\n  gap: $space_normal;\r\n\r\n  &>* {\r\n    flex: 1;\r\n  }\r\n}\r\n",
                    "styleUrl": "./space-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "followerService",
                        "type": "FollowerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card *ngIf=\"space\">\r\n  <app-hidden-content *ngIf=\"isHidden\"\r\n                      [id]=\"space.id\"\r\n                      [type]=\"'space'\"\r\n                      (switchHidden)=\"onSwitchHidden()\"\r\n  ></app-hidden-content>\r\n\r\n  <app-row [h]=\"'space-between'\"\r\n           [v]=\"'start'\"\r\n           [margin]=\"'0 0 10px 0'\"\r\n  >\r\n\r\n    <app-space-info [spaceName]=\"space.name\"\r\n                    [avatarSrc]=\"space.image\"\r\n                    [followersCount]=\"space.followersCount\"\r\n                    [postsCount]=\"space.postsCount\"\r\n                    [link]=\"'/' + space.id\"\r\n                    [itemType]=\"'single'\"\r\n                    [spaceId]=\"space.id\"\r\n    ></app-space-info>\r\n\r\n    <app-row [v]=\"'center'\">\r\n      <app-edit-button [type]=\"'space'\"\r\n                       [id]=\"space.id\"\r\n                       ifDesktop\r\n                       *ngIf=\"isMySpace\"\r\n      ></app-edit-button>\r\n\r\n      <app-space-menu (switchHidden)=\"onSwitchHidden()\"\r\n                      [spaceId]=\"space.id\"\r\n                      [isHidden]=\"isHidden\"\r\n      ></app-space-menu>\r\n\r\n    </app-row>\r\n\r\n  </app-row>\r\n\r\n  <app-paragraph *ngIf=\"!space.isShowMore\"\r\n                 [text]=\"space.summary\"\r\n  ></app-paragraph>\r\n\r\n  <app-expand-paragraph *ngIf=\"space.isShowMore\"\r\n                        [text]=\"space.summary\"\r\n                        [expandedText]=\"space.about\"\r\n                        [isMore]=\"!isAutoExpandSummary\"\r\n  ></app-expand-paragraph>\r\n\r\n  <app-link-icons *ngIf=\"space.links && space.links.length > 0\"\r\n                  [links]=\"space.links\"\r\n                  [style.margin]=\"'19px 0 14px'\"\r\n  ></app-link-icons>\r\n\r\n  <div>\r\n    <app-tag *ngFor=\"let tag of space.tags\"\r\n             [tagName]=\"tag\"\r\n    ></app-tag>\r\n  </div>\r\n\r\n  <app-row [ngClass]=\"'buttons-wp'\"\r\n           [margin]=\"'16px 0 0 0'\"\r\n  >\r\n\r\n    <ng-container *ngIf=\"isMySpace; else notMySpace\">\r\n      <app-create-space-button width=\"full\"\r\n                               type=\"edit\"\r\n                               [spaceId]=\"space.id\"\r\n      ></app-create-space-button>\r\n\r\n      <app-write-post-button [spaceId]=\"space.id\"\r\n                             width=\"full\"\r\n      ></app-write-post-button>\r\n    </ng-container>\r\n\r\n    <ng-template #notMySpace>\r\n      <app-send-tips-button width=\"full\"></app-send-tips-button>\r\n\r\n      <app-follow-button size=\"large\"\r\n                         width=\"full\"\r\n                         type=\"space\"\r\n                         [entityId]=\"space.id\"\r\n                         [isFollow]=\"isFollowed$ | async\"\r\n      ></app-follow-button>\r\n    </ng-template>\r\n\r\n\r\n  </app-row>\r\n\r\n</mat-card>\r\n"
        },
        {
            "name": "SpaceSelectComponent",
            "id": "component-SpaceSelectComponent-d4279d705593af101899116c93f4600a",
            "file": "src/app/ui-lib/space-ui/space-select/space-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SpaceSelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-space-select",
            "styleUrls": [
                "./space-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./space-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string | undefined"
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "isShowSpaceList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "selectedSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Space",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "spaces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Space[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGlobalClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectSpace",
                    "args": [
                        {
                            "name": "space",
                            "type": "Space",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "space",
                            "type": "Space",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  forwardRef,\n  HostListener,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\nimport { SpaceService } from '../../../space/services/space.service';\nimport { Subject } from 'rxjs';\nimport { delay, filter, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport { ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SpaceFacade } from '../../../state/space/space.facade';\nimport { Space } from '../../../state/space/space.state';\n\n@Component({\n  selector: 'app-space-select',\n  templateUrl: './space-select.component.html',\n  styleUrls: ['./space-select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SpaceSelectComponent),\n      multi: true,\n    },\n  ],\n})\nexport class SpaceSelectComponent\n  extends BaseControlValueAccessorComponent\n  implements OnInit\n{\n  @Input() spaceId: string | undefined;\n  spaces: Space[];\n  selectedSpace: Space;\n\n  isShowSpaceList: boolean;\n\n  @HostListener('document:mousedown', ['$event'])\n  onGlobalClick(event: any): void {\n    if (!this.element.nativeElement.contains(event.target)) {\n      this.isShowSpaceList = false;\n    }\n  }\n\n  private unsubscribe$: Subject<void> = new Subject();\n\n  constructor(\n    private spaceService: SpaceService,\n    private spaceFacade: SpaceFacade,\n    private cd: ChangeDetectorRef,\n    private element: ElementRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.spaceService.myOwnSpaceIds$\n      .pipe(\n        filter((ids) => !!ids),\n        switchMap((ids) => this.spaceFacade.fetchSpaces(ids!).pipe(delay(100)))\n      )\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe((spaces) => {\n        const space = this.spaceId\n          ? spaces.find((space) => space.id === this.spaceId) || spaces[0]\n          : spaces[0];\n        this.selectSpace(space);\n        this.spaces = spaces;\n        this.cd.markForCheck();\n      });\n  }\n\n  selectSpace(space: Space) {\n    this.selectedSpace = space;\n    this.writeValue(space.id);\n    this.isShowSpaceList = false;\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n:host {\r\n  position: relative;\r\n  cursor: pointer;\r\n  display: block;\r\n}\r\n\r\napp-avatar {\r\n  margin-right: 4px;\r\n}\r\n\r\n.space-select {\r\n  border: 1px solid rgba(0, 0, 0, 0.12);\r\n  padding: 6px 0;\r\n  border-radius: 4px;\r\n  &:hover {\r\n    border: 1px solid $color_primary;\r\n  }\r\n\r\n  &:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    right: 10px;\r\n    top: 24px;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 6px solid transparent;\r\n    border-right: 6px solid transparent;\r\n    border-top: 6px solid rgba(0, 0, 0, 0.54);\r\n    clear: both;\r\n  }\r\n}\r\n\r\n.dropdown {\r\n  right: 0;\r\n  left: 0;\r\n  border: 1px solid rgba(0, 0, 0, 0.19);\r\n  border-radius: 4px;\r\n  background: $color_white;\r\n  position: absolute;\r\n  z-index: 10;\r\n  box-shadow: 0 2px 4px -1px #0003, 0 4px 5px #00000024, 0 1px 10px #0000001f;\r\n\r\n  .dropdown-item {\r\n    padding: 6px 16px;\r\n\r\n    &:hover {\r\n      background-color: $hover_color_light;\r\n    }\r\n  }\r\n}\r\n\r\n.loading {\r\n  color: $color_gray_dark;\r\n  padding: 12px 16px;\r\n  display: block;\r\n}\r\n\r\n.space-select-label {\r\n  position: absolute;\r\n  top: -7px;\r\n  left: 6px;\r\n  padding: 0 5px;\r\n  background-color: $color_white;\r\n  font-size: 12px;\r\n  color: $color_gray_dark;\r\n}\r\n",
                    "styleUrl": "./space-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "spaceService",
                        "type": "SpaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spaceFacade",
                        "type": "SpaceFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"w100 space-select\"\n     (click)=\"isShowSpaceList = !isShowSpaceList\">\n  <app-row *ngIf=\"selectedSpace; else loading\"\n           margin=\"0 0 0 16px\" [v]=\"'center'\"\n  >\n\n    <app-avatar [src]=\"selectedSpace.image\"\n                [jdentityValue]=\"selectedSpace.id\"\n    ></app-avatar>\n\n    <span>{{ selectedSpace.name }}</span>\n\n  </app-row>\n</div>\n\n<div class=\"dropdown\" *ngIf=\"isShowSpaceList\">\n\n  <ul>\n    <li *ngFor=\"let space of spaces\"\n        (click)=\"selectSpace(space)\"\n        class=\"dropdown-item\">\n\n      <app-row [v]=\"'center'\">\n\n        <app-avatar [src]=\"space.image\"\n                    [jdentityValue]=\"space.id\"\n        ></app-avatar>\n\n        <span>{{ space.name }}</span>\n\n      </app-row>\n    </li>\n  </ul>\n\n</div>\n\n<div class=\"space-select-label\">\n  <span>{{ 'forms.placeholder.postInSpace' | transloco }}</span>\n</div>\n\n<ng-template #loading>\n  <span class=\"loading\">{{ 'content.loadingSpace' | transloco }}</span>\n</ng-template>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-5719b2c3c273dc8d8e16195654645d75",
            "file": "src/app/shared/components/spinner/spinner.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showSpinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean | null"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  templateUrl: './spinner.component.html',\r\n  styleUrls: ['./spinner.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SpinnerComponent implements OnInit {\r\n  @Input() text: string;\r\n  @Input() showSpinner: boolean | null;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.spinner-container {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: $space_normal 0;\r\n\r\n  .text {\r\n    margin-left: $space_small;\r\n  }\r\n}\r\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"showSpinner\">\r\n  <div class=\"spinner-container\">\r\n    <mat-spinner [diameter]=\"30\"></mat-spinner>\r\n    <ng-container *ngIf=\"text\">\r\n      <div class=\"text\">{{text}}</div>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-a4a5776d802762b86a9a66e23985f5f1",
            "file": "src/app/shared/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TabLinkData"
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "TabLinkData[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "tabClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "link",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\r\n\r\n@Component({\r\n  selector: 'app-tabs',\r\n  templateUrl: './tabs.component.html',\r\n  styleUrls: ['./tabs.component.scss'],\r\n})\r\nexport class TabsComponent implements OnInit {\r\n  @Input() tabLinks: TabLinkData[] = [];\r\n  @Input() activeLink: TabLinkData;\r\n  @Output() tabClick = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onTabClick(link: any) {\r\n    this.activeLink = link;\r\n    this.tabClick.emit(link);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.add-info {\r\n  font-size: $font_small;\r\n  line-height: $space_normal;\r\n  color: #9E9E9E;\r\n  font-weight: normal;\r\n  margin-left: $space_mini;\r\n}\r\n\r\nnav {\r\n  top: 2px;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  ::ng-deep {\r\n    .mat-tab-link {\r\n      height: 48px !important;\r\n      font-size: 14px !important;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav mat-tab-nav-bar animationDuration=\"0ms\" *transloco=\"let t; read: 'tabs'\">\r\n  <a mat-tab-link *ngFor=\"let link of tabLinks\"\r\n     [active]=\"link.tabName === activeLink?.tabName\"\r\n     (click)=\"onTabClick(link)\">\r\n    {{t(link.tabName)}} <span class=\"add-info\">{{link.additionalInfo}}</span>\r\n  </a>\r\n</nav>\r\n\r\n"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-5a9651ee1b56ee926ebf6f57bf216ed4",
            "file": "src/app/ui-lib/input/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TagSize"
                },
                {
                    "name": "tagName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {TagSize} from \"../../../core/types/tag-size.type\";\r\n\r\n@Component({\r\n  selector: 'app-tag',\r\n  templateUrl: './tag.component.html',\r\n  styleUrls: ['./tag.component.scss']\r\n})\r\nexport class TagComponent {\r\n  @Input() tagName = '';\r\n  @Input() size: TagSize = 'medium';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tag {\r\n  display: inline-flex;\r\n  padding: 6px 12px;\r\n  margin-right: 8px;\r\n  margin-top: 8px;\r\n  color: rgba(0, 0, 0, 0.6);\r\n  background: rgba(33, 33, 33, 0.08);\r\n  border-radius: 16px;\r\n  letter-spacing: 0.25px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n}\r\n\r\n.small {\r\n  font-size: 12px;\r\n}\r\n\r\n.medium {\r\n  font-size: 14px;\r\n}\r\n\r\n.large {\r\n  font-size: 17px;\r\n}\r\n\r\n.huge {\r\n  font-size: 20px;\r\n}\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"tag\" [ngClass]=\"size\">\r\n  {{tagName}}\r\n</div>\r\n"
        },
        {
            "name": "TagInputComponent",
            "id": "component-TagInputComponent-7ce2a105c493a0b1a3769049bb89192b",
            "file": "src/app/ui-lib/input/tag-input/tag-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TagInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-tag-input",
            "styleUrls": [
                "./tag-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "separatorKeysCodes",
                    "defaultValue": "[ENTER, SPACE, TAB]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tagCtrl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "tag",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ENTER, SPACE, TAB } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Component,\n  forwardRef,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\n\n@Component({\n  selector: 'app-tag-input',\n  templateUrl: './tag-input.component.html',\n  styleUrls: ['./tag-input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TagInputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class TagInputComponent\n  extends BaseControlValueAccessorComponent\n  implements OnInit, AfterContentInit\n{\n  @Input() placeholder: string = '';\n  separatorKeysCodes: number[] = [ENTER, SPACE, TAB];\n  tags: string[] = [];\n  tagCtrl = new FormControl('');\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {}\n\n  remove(tag: string) {\n    const index = this.tags.indexOf(tag);\n\n    if (index >= 0) {\n      this.tags.splice(index, 1);\n    }\n    this.onChange(this.tags);\n  }\n\n  writeValue(obj: any) {\n    super.writeValue(obj);\n    this.tags = (this.value as string[]) || [];\n  }\n\n  add(tag: any) {\n    const value = (tag.value || '').trim();\n    this.tags = [...this.tags, value];\n    this.onChange(this.tags);\n    this.tagCtrl.setValue(null);\n  }\n\n  ngAfterContentInit(): void {\n    this.tags = this.value as string[];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.tags-wp {\r\n  .mat-chip-list-wrapper .mat-standard-chip {\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-form-field-infix {\r\n    border-top: 5px solid transparent !important;\r\n  }\r\n\r\n  .mat-form-field-label-wrapper {\r\n    margin-top: 9px !important;\r\n  }\r\n\r\n  .mat-chip.mat-standard-chip {\r\n    background: $color_border_list;\r\n    color: $color_gray_dark;\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n    font-weight: normal;\r\n    letter-spacing: 0.25px;\r\n    gap: 8px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./tag-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<mat-form-field class=\"w100 tags-wp\" appearance=\"outline\">\r\n  <mat-label> {{ 'forms.fieldName.tags' | transloco }} </mat-label>\r\n  <mat-chip-list #tagList aria-label=\"Tag selection\">\r\n    <mat-chip\r\n      *ngFor=\"let tag of tags\"\r\n      [removable]=\"true\"\r\n      (removed)=\"remove(tag)\">\r\n      {{tag}}\r\n      <button matChipRemove>\r\n        <mat-icon>cancel</mat-icon>\r\n      </button>\r\n    </mat-chip>\r\n    <input\r\n      placeholder=\"{{placeholder}}\"\r\n      [matChipInputFor]=\"tagList\"\r\n      [formControl]=\"tagCtrl\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      (matChipInputTokenEnd)=\"add($event)\">\r\n  </mat-chip-list>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "TextAreaComponent",
            "id": "component-TextAreaComponent-47f542990993a5e80cfd267906ea25bf",
            "file": "src/app/ui-lib/input/text-area/text-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextAreaComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-text-area",
            "styleUrls": [
                "./text-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "initHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number"
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_initHeight",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "textArea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLTextAreaElement>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textarea'"
                        }
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "changeText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resizeElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\r\n\r\n@Component({\r\n  selector: 'app-text-area',\r\n  templateUrl: './text-area.component.html',\r\n  styleUrls: ['./text-area.component.scss'],\r\n  host: { class: 'text-area' },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TextAreaComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class TextAreaComponent\r\n  extends BaseControlValueAccessorComponent\r\n  implements OnInit, AfterViewInit\r\n{\r\n  @Input() label = '';\r\n  @Input() isRequired = false;\r\n  @Input() set initHeight(value: number) {\r\n    this._initHeight = value;\r\n    if (this.textArea) {\r\n      this.textArea.nativeElement.style.minHeight = this.initHeight + 'px';\r\n    }\r\n  }\r\n\r\n  get initHeight(): number {\r\n    return this._initHeight;\r\n  }\r\n\r\n  @ViewChild('textarea') textArea: ElementRef<HTMLTextAreaElement>;\r\n\r\n  private _initHeight = 100;\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.textArea.nativeElement.style.minHeight = this.initHeight + 'px';\r\n    this.resizeElement();\r\n  }\r\n\r\n  private resizeElement() {\r\n    this.textArea.nativeElement.style.height = 'auto';\r\n    this.textArea.nativeElement.style.height =\r\n      this.textArea.nativeElement.scrollHeight + 'px';\r\n  }\r\n\r\n  changeText() {\r\n    this.resizeElement();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "textarea{\r\n  line-height: 24px;\r\n  letter-spacing: 0.15px;\r\n\r\n}\r\n\r\ntextarea.mat-input-element {\r\n  resize: none !important;\r\n  overflow-y: visible;\r\n}\r\n\r\n",
                    "styleUrl": "./text-area.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "extends": "BaseControlValueAccessorComponent",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "initHeight": {
                    "name": "initHeight",
                    "setSignature": {
                        "name": "initHeight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "initHeight",
                        "type": "number",
                        "returnType": "number",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"text-area-wp\">\r\n  <mat-form-field class=\"w100\" appearance=\"outline\">\r\n    <mat-label>\r\n      <span *ngIf=\"!isRequired; else required\">\r\n        {{label}}\r\n      </span>\r\n    </mat-label>\r\n    <textarea\r\n      #textarea\r\n      (input)=\"changeText()\"\r\n      (blur)=\"onBlur()\"\r\n      [(ngModel)]=\"value\"\r\n      matInput\r\n    ></textarea>\r\n  </mat-form-field>\r\n</div>\r\n\r\n<ng-template #required>\r\n  <span class=\"asterisk\">*</span>\r\n  <span>&#32;</span> {{label}}\r\n</ng-template>\r\n"
        },
        {
            "name": "TextInputComponent",
            "id": "component-TextInputComponent-16cb7caf49cf14bcc84d5115b233d25c",
            "file": "src/app/ui-lib/input/text-input/text-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-text-input",
            "styleUrls": [
                "./text-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "blur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseControlValueAccessorComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BaseControlValueAccessorComponent } from '../../../core/base-component/base-value-accessor';\n\n@Component({\n  selector: 'app-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TextInputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class TextInputComponent extends BaseControlValueAccessorComponent {\n  @Input() isRequired = false;\n  @Input() label = '';\n\n  constructor() {\n    super();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-wp {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./text-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": "BaseControlValueAccessorComponent",
            "templateData": "<div class=\"input-wp\">\r\n  <mat-form-field class=\"w100\" appearance=\"outline\">\r\n    <mat-label>\r\n      <span *ngIf=\"!isRequired; else required\">\r\n        {{label}}\r\n      </span>\r\n    </mat-label>\r\n\r\n    <input (blur)=\"onBlur()\" [(ngModel)]=\"value\" matInput>\r\n\r\n  </mat-form-field>\r\n\r\n\r\n  <div *ngIf=\"error\"\r\n       class=\"error-wp\"\r\n       [@errorsAnimations]\r\n  >\r\n    <span>{{error}}</span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<ng-template #required>\r\n  <span class=\"asterisk\">*</span>\r\n  <span>&#32;</span> {{label}}\r\n</ng-template>\r\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-764f63e2ec74615a63760afc910b1bef",
            "file": "src/app/ui-lib/text/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | undefined"
                },
                {
                    "name": "type",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TitleSizeType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { TitleSizeType } from '../../../core/types/title.type';\r\n\r\n@Component({\r\n  selector: 'app-title',\r\n  templateUrl: './title.component.html',\r\n  styleUrls: ['./title.component.scss'],\r\n})\r\nexport class TitleComponent implements OnInit {\r\n  @Input() text: string | undefined;\r\n  @Input() type: TitleSizeType = 'medium';\r\n  @Input() link: string = '';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".title {\r\n  font-weight: 500;\r\n  line-height: 24px;\r\n}\r\n",
                    "styleUrl": "./title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a [routerLink]=\"link\">\r\n  <span\r\n    [ngClass]=\"'title-' + type\"\r\n  >{{text}}</span>\r\n</a>\r\n\r\n\r\n"
        },
        {
            "name": "TokensComponent",
            "id": "component-TokensComponent-74da9c1d4bf01b6823eba440d1ddc4e2",
            "file": "src/app/ui-lib/balance/tokens/tokens.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tokens",
            "styleUrls": [
                "./tokens.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tokens.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconMargin",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "showIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'small'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"small\" | \"medium\""
                },
                {
                    "name": "tokens",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number | string | null"
                },
                {
                    "name": "type",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"primary\" | \"secondary\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dividedTokens",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prepareToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tokens',\r\n  templateUrl: './tokens.component.html',\r\n  styleUrls: ['./tokens.component.scss'],\r\n})\r\nexport class TokensComponent implements OnInit, OnChanges {\r\n  @Input() tokens: number | string | null = 0;\r\n  @Input() size: 'small' | 'medium' = 'small';\r\n  @Input() showIcon = false;\r\n  @Input() iconMargin = '';\r\n  @Input() type: 'primary' | 'secondary' = 'secondary';\r\n  dividedTokens: string[] = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.tokens) {\r\n      this.prepareToken();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  private prepareToken() {\r\n    this.dividedTokens = this.tokens\r\n      ? this.tokens.toString().split('.')\r\n      : ['0', '0000'];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.tokens-wp {\r\n  line-height: 24px;\r\n  color: $color_gray;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  mat-icon {\r\n    width: 20px;\r\n    margin-right: 6px;\r\n  }\r\n\r\n  &>span:last-child {\r\n    margin-left: 4px;\r\n  }\r\n}\r\n\r\n.small {\r\n  font-size: $font_small;\r\n}\r\n\r\n.medium {\r\n  font-size: $font_normal;\r\n}\r\n\r\n.secondary {\r\n  .strong{\r\n    color: #222222;\r\n    font-weight: 500;\r\n  }\r\n}\r\n\r\n.primary {\r\n  .strong{\r\n    color: $color_gray;\r\n    font-weight: 400;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tokens.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div [ngClass]=\"[size, type]\" class=\"tokens-wp\">\r\n  <mat-icon *ngIf=\"showIcon\"\r\n            svgIcon=\"coin-icon\"\r\n            [style.margin]=\"iconMargin\"\r\n  ></mat-icon>\r\n  <span class=\"strong\">{{dividedTokens[0]}}</span>\r\n  <span>.</span>\r\n  <span>{{dividedTokens[1]}}</span>\r\n  <span class=\"strong\">SUB</span>\r\n</div>\r\n"
        },
        {
            "name": "TxButtonComponent",
            "id": "component-TxButtonComponent-aa14096e92d25396453de755fae2554b",
            "file": "src/app/ui-lib/buttons/tx-button/tx-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tx-button",
            "styleUrls": [
                "./tx-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tx-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "isSending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "size",
                    "defaultValue": "'large'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ButtonSize"
                },
                {
                    "name": "type",
                    "defaultValue": "'flat'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"flat\" | \"stroked\""
                },
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ButtonWidth"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\n\ntype ButtonSize = 'medium' | 'large';\ntype ButtonWidth = 'full' | 'static';\n\n@Component({\n  selector: 'app-tx-button',\n  templateUrl: './tx-button.component.html',\n  styleUrls: ['./tx-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TxButtonComponent implements OnInit {\n  @Input() name: string = '';\n  @Input() type: 'flat' | 'stroked' = 'flat';\n  @Input() size: ButtonSize = 'large';\n  @Input() width: ButtonWidth = 'static';\n  @Input() isSending: boolean;\n  @Input() isDisabled: boolean = false;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.flat {\r\n  background-color: $color_primary;\r\n  color: white;\r\n  padding: 1px 25px;\r\n}\r\n\r\n.stroked {\r\n  border: $border-primary;\r\n  color: $color_primary;\r\n  padding: 0 12px;\r\n\r\n  &:active {\r\n    border: $border-primary;\r\n  }\r\n}\r\n\r\nbutton {\r\n  min-width: 64px;\r\n  line-height: 34px;\r\n  padding: 0 $space_normal;\r\n  border-radius: 4px;\r\n  font-weight: 500;\r\n\r\n  //span {\r\n  //  text-transform: capitalize;\r\n  //}\r\n\r\n  &:disabled {\r\n    cursor: default;\r\n    background: $color_white;\r\n    border: 1px solid $color_gray_light;\r\n    color: $color_gray_secondary;\r\n    padding-left: $space_huge;\r\n    transition: padding-left 300ms;\r\n  }\r\n\r\n  ::ng-deep {\r\n    .mat-progress-spinner circle, .mat-spinner circle {\r\n      stroke: $color_gray_secondary !important;\r\n    }\r\n  }\r\n}\r\n\r\nmat-spinner {\r\n  display: inline;\r\n  left: -24px;\r\n  top: 2px;\r\n}\r\n\r\n.medium {\r\n  font-size: $font_small;\r\n  letter-spacing: 1.25px;\r\n}\r\n\r\n.large {\r\n  font-size: $font_normal;\r\n}\r\n\r\n.static {\r\n  width: fit-content;\r\n}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./tx-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button [ngClass]=\"[type, size, width]\"\n        mat-ripple\n        [disabled]=\"isSending || isDisabled\"\n>\n  <mat-spinner *ngIf=\"isSending\" [diameter]=\"15\"></mat-spinner>\n  <span>{{name}}</span>\n\n</button>\n"
        },
        {
            "name": "UpvoteButtonComponent",
            "id": "component-UpvoteButtonComponent-f7d8940b9f06b1ee092d756df983ee52",
            "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upvote-button",
            "styleUrls": [
                "./upvote-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upvote-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                },
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "voteClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "VoteButtonComponent"
                    }
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n} from '@angular/core';\r\nimport { VoteButtonComponent } from '../../../core/base-component/vote-button.component';\r\n\r\n@Component({\r\n  selector: 'app-upvote-button',\r\n  templateUrl: './upvote-button.component.html',\r\n  styleUrls: ['./upvote-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UpvoteButtonComponent extends VoteButtonComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.active {\r\n  color: #3BB356 !important;\r\n}\r\n\r\n",
                    "styleUrl": "./upvote-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "VoteButtonComponent",
            "templateData": "<app-icon-button [iconSize]=\"22\"\r\n                 [buttonSize]=\"32\"\r\n                 [iconName]=\"isActive ? 'upvote-active-icon' : 'upvote-default-icon'\"\r\n                 (click)=\"this.voteClick.emit();\"\r\n></app-icon-button>\r\n\r\n<span class=\"action-panel-label\"\r\n      *ngIf=\"isShowLabel\"\r\n>\r\n  {{ 'buttons.upvote' | transloco }}\r\n  <span *ngIf=\"count > 0\">\r\n    ({{count | numeral}})\r\n  </span>\r\n</span>\r\n\r\n<span\r\n  class=\"action-panel-label\"\r\n  [ngClass]=\"{ 'active': isActive }\"\r\n  *ngIf=\"!isShowLabel && count > 0\"\r\n>\r\n  {{count | numeral}}\r\n</span>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "VoteButtonComponent",
            "id": "component-VoteButtonComponent-c69b93c087dc0ecf64f05cf2b3ff1cc1",
            "file": "src/app/core/base-component/vote-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "isShowLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "voteClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  template: '',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VoteButtonComponent {\r\n  @Input() isShowLabel: boolean = false;\r\n  @Input() isActive: boolean = false;\r\n  @Input() count: number = 0;\r\n  @Output() voteClick = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "VoteModalDialogComponent",
            "id": "component-VoteModalDialogComponent-1e3f54fcfaaba6db4f18dd33712a9916",
            "file": "src/app/ui-lib/modal-dialogs/vote-modal-dialog/vote-modal-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vote-modal-dialog",
            "styleUrls": [
                "./vote-modal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./vote-modal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "this.tabLinks[0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReactionModalData",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<VoteModalDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "downvotesIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "reactionCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "tabLinks",
                    "defaultValue": "[\r\n    { tabName: 'upvotes', additionalInfo: this.data.upvotesCount },\r\n    { tabName: 'downvotes', additionalInfo: this.data.downvotesCount },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabLinkData[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "upvotesIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabClick",
                    "args": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "activeTab",
                            "type": "TabLinkData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Inject,\r\n  OnInit,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { from } from 'rxjs';\r\nimport { TabLinkData } from '../../../core/models/tab-link-data.model';\r\nimport { ReactionModalData } from '../../../core/types/dialog-modal-data.types';\r\nimport { PostService } from '../../../post/services/post.service';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-vote-modal-dialog',\r\n  templateUrl: './vote-modal-dialog.component.html',\r\n  styleUrls: ['./vote-modal-dialog.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class VoteModalDialogComponent implements OnInit {\r\n  public tabLinks: TabLinkData[] = [\r\n    { tabName: 'upvotes', additionalInfo: this.data.upvotesCount },\r\n    { tabName: 'downvotes', additionalInfo: this.data.downvotesCount },\r\n  ];\r\n\r\n  activeTab: TabLinkData = this.tabLinks[0];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<VoteModalDialogComponent>,\r\n    private postService: PostService,\r\n    @Inject(MAT_DIALOG_DATA) public data: ReactionModalData,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  upvotesIds: string[] = [];\r\n  downvotesIds: string[] = [];\r\n\r\n  reactionCount: number = 0;\r\n\r\n  ngOnInit(): void {\r\n    from(this.postService.getReactionIdsByPostId(this.data.postId))\r\n      .pipe(\r\n        switchMap((ids) => from(this.postService.getReactionsByIds(ids))),\r\n        take(1)\r\n      )\r\n      .subscribe((reactions) => {\r\n        reactions.forEach((reaction) =>\r\n          reaction.isUpvote\r\n            ? this.upvotesIds.push(reaction.profileId)\r\n            : this.downvotesIds.push(reaction.profileId)\r\n        );\r\n\r\n        this.reactionCount = this.upvotesIds.length + this.downvotesIds.length;\r\n        this.cd.markForCheck();\r\n      });\r\n  }\r\n\r\n  onTabClick(activeTab: TabLinkData) {\r\n    this.activeTab = activeTab;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n\r\n",
                    "styleUrl": "./vote-modal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<VoteModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "ReactionModalData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<VoteModalDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "postService",
                        "type": "PostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "ReactionModalData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-wp\">\r\n  <div class=\"modal-header\"  *transloco=\"let t; read: 'modals.likes'\">\r\n    <h2 class=\"title-medium\">{{reactionCount + ' ' + (reactionCount | pluralize: t('reaction')) }}</h2>\r\n    <app-close-button class=\"close-btn\" (onClose)=\"dialogRef.close()\"></app-close-button>\r\n  </div>\r\n  <div class=\"modal-tabs\">\r\n    <app-tabs (tabClick)=\"onTabClick($event)\" [activeLink]=\"activeTab\" [tabLinks]=\"tabLinks\"></app-tabs>\r\n  </div>\r\n\r\n  <div class=\"modal-body\">\r\n    <ng-container *ngIf=\"activeTab.tabName === 'upvotes'\">\r\n      <ng-container *ngIf=\"upvotesIds.length > 0; else noDownload\">\r\n        <app-vote-user-list [ids]=\"upvotesIds\"></app-vote-user-list>\r\n      </ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"activeTab.tabName === 'downvotes'\">\r\n      <ng-container *ngIf=\"downvotesIds.length > 0; else noDownload\">\r\n        <app-vote-user-list [ids]=\"downvotesIds\"></app-vote-user-list>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #noDownload>\r\n  <app-row margin=\"16px 0 0\" h=\"center\">{{ 'content.noDownload' | transloco }}</app-row>\r\n</ng-template>\r\n"
        },
        {
            "name": "VoteUserListComponent",
            "id": "component-VoteUserListComponent-d531990eb828558a7f39dcab5922142c",
            "file": "src/app/shared/components/vote-user-list/vote-user-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vote-user-list",
            "styleUrls": [
                "./vote-user-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./vote-user-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string[] | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "showHiddenContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean | null",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'public'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"public\" | \"all\"",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "action$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Actions",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store<AppState>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "idsSet",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isBlockInfinityScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "items$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<T[]>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDistance",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEvent$",
                    "defaultValue": "this.scrollDownEventSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollDownEventSource",
                    "defaultValue": "new BehaviorSubject<ScrollProps>(\r\n    this.scrollProps\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "scrollProps",
                    "defaultValue": "new ScrollProps(20)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScrollableData",
                    "args": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dispatchAction",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "getUniqueIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadFinish",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "loadStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "onScrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "sliceIds",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "Array<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ScrollProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInfinityScrollComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n} from '@angular/core';\r\nimport { BaseInfinityScrollComponent } from '../../../core/base-component/base-infinity-scroll.component';\r\nimport { UserInfo } from '../../../core/models/user-info.model';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../state/state';\r\nimport { loadProfilesByIds } from '../../../state/profile/profile.actions';\r\nimport {\r\n  selectProfilesByIds,\r\n  selectUserInfoByIds,\r\n} from '../../../state/profile/profile.selectors';\r\nimport { Actions } from '@ngrx/effects';\r\n\r\n@Component({\r\n  selector: 'app-vote-user-list',\r\n  templateUrl: './vote-user-list.component.html',\r\n  styleUrls: ['./vote-user-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class VoteUserListComponent extends BaseInfinityScrollComponent<UserInfo> {\r\n  constructor(\r\n    public store: Store<AppState>,\r\n    public cd: ChangeDetectorRef,\r\n    public action$: Actions\r\n  ) {\r\n    super(store, cd, action$);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getScrollableData(loadProfilesByIds, selectUserInfoByIds);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n$height: 550px;\r\n\r\n.scroll-container {\r\n  overflow-y: scroll;\r\n  height: $height;\r\n  min-height: $height;\r\n  margin: 0 $space_mini 0 $space_normal;\r\n}\r\n",
                    "styleUrl": "./vote-user-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseInfinityScrollComponent",
            "templateData": "<ng-container>\r\n\r\n  <div class=\"scroll-container scrollable-list-wp\">\r\n    <div\r\n      infinite-scroll\r\n      [infiniteScrollThrottle]=\"50\"\r\n      [infiniteScrollDistance]=\"scrollDistance\"\r\n      (scrolled)=\"onScrollDown()\"\r\n      [infiniteScrollDisabled]=\"isBlockInfinityScroll\"\r\n      [fromRoot]=\"true\"\r\n      [infiniteScrollContainer]=\"'.scroll-container'\"\r\n    >\r\n      <div class=\"modal-list\" *ngFor=\"let data of items$ | async; trackBy: trackById\">\r\n          <app-vote-user-list-item\r\n            [userInfo]=\"data\">\r\n          </app-vote-user-list-item>\r\n      </div>\r\n\r\n      <app-spinner [showSpinner]=\"isLoading\" [text]=\"'content.moreProfiles' | transloco\"></app-spinner>\r\n    </div>\r\n  </div>\r\n\r\n</ng-container>\r\n"
        },
        {
            "name": "VoteUserListItemComponent",
            "id": "component-VoteUserListItemComponent-83a34f63f43349c18bc209c5d684ac15",
            "file": "src/app/shared/components/vote-user-list-item/vote-user-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-vote-user-list-item",
            "styleUrls": [
                "./vote-user-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./vote-user-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "'follow'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "UserListType"
                },
                {
                    "name": "userInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "UserInfo"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "avatarBaseUrl",
                    "defaultValue": "environment.ipfsUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showCopyButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseover'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { EventEmitter, HostListener, Input, Output } from '@angular/core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { UserInfo } from '../../../core/models/user-info.model';\r\nimport { UserListType } from '../../../core/types/user-list.type';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-vote-user-list-item',\r\n  templateUrl: './vote-user-list-item.component.html',\r\n  styleUrls: ['./vote-user-list-item.component.scss'],\r\n})\r\nexport class VoteUserListItemComponent implements OnInit {\r\n  @Input() userInfo: UserInfo;\r\n  @Input() type: UserListType = 'follow';\r\n  @Output() onClick = new EventEmitter();\r\n  @Input() isHover: boolean;\r\n  showCopyButton = false;\r\n  avatarBaseUrl = environment.ipfsUrl;\r\n\r\n  @HostListener('mouseover') onMouseHover() {\r\n    this.showCopyButton = true;\r\n  }\r\n\r\n  @HostListener('mouseleave') onMouseLeave() {\r\n    this.showCopyButton = false;\r\n  }\r\n\r\n  constructor(public dialogRef: MatDialog) {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"_var.scss\";\r\n\r\n.vote-item-wp {\r\n  padding: $space_tiny 0;\r\n  border-bottom: 1px solid  $color_border_list;\r\n  margin-right: $space_mini;\r\n}\r\n\r\n.sub-wb {\r\n  span {\r\n    font-weight: 500;\r\n    font-size: $font_small;\r\n    padding-left: $space_mini;\r\n    color: #A0A0A0;\r\n  }\r\n}\r\n\r\n.user-name {\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  letter-spacing: 0.25px;\r\n}\r\n\r\n.sub {\r\n  cursor: pointer;\r\n}\r\n\r\n.hover {\r\n  &:hover {\r\n    background: $hover_color_light;\r\n  }\r\n}\r\n",
                    "styleUrl": "./vote-user-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"userInfo\">\r\n  <app-row [h]=\"'space-between'\"\r\n           [v]=\"'center'\"\r\n           class=\"vote-item-wp\"\r\n           [ngClass]=\"{\r\n              'hover': isHover,\r\n              'sub': type === 'sub',\r\n              'follow': type === 'follow'\r\n            }\"\r\n            (click)=\"onClick.emit()\"\r\n  >\r\n    <app-row>\r\n\r\n      <app-avatar [src]=\"userInfo.avatarSrc\"\r\n                  [jdentityValue]=\"userInfo.address\"\r\n      ></app-avatar>\r\n\r\n      <app-column [margin]=\"'0 0 0 16px'\">\r\n\r\n        <a (click)=\"dialogRef.closeAll()\"\r\n           [routerLink]=\"['/accounts/', userInfo.address]\"\r\n           class=\"user-name\"\r\n        >\r\n          {{userInfo.userName || (userInfo.address | addressHidden)}}\r\n        </a>\r\n\r\n        <app-address [address]=\"userInfo.address\"\r\n                     [showCopyButton]=\"showCopyButton\"\r\n        ></app-address>\r\n\r\n      </app-column>\r\n\r\n    </app-row>\r\n\r\n    <app-follow-button *ngIf=\"type === 'follow'\"\r\n                       [entityId]=\"userInfo.address\"\r\n                       [isFollow]=\"userInfo.isFollowing\"\r\n                       type=\"profile\"\r\n    ></app-follow-button>\r\n\r\n    <div class=\"sub-wb\" *ngIf=\"type === 'sub'\">\r\n      <app-tokens [tokens]=\"userInfo.balance!\"></app-tokens>\r\n    </div>\r\n  </app-row>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "WritePostButtonComponent",
            "id": "component-WritePostButtonComponent-1ca77f55f041bd30501b69d05a1a223d",
            "file": "src/app/ui-lib/buttons/write-post-button/write-post-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-write-post-button",
            "styleUrls": [
                "./write-post-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./write-post-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "spaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "width",
                    "defaultValue": "'static'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"full\" | \"static\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "onWritePost",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-write-post-button',\r\n  templateUrl: './write-post-button.component.html',\r\n  styleUrls: ['./write-post-button.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class WritePostButtonComponent {\r\n  @Input() spaceId: string;\r\n  @Input() width: 'full' | 'static' = 'static';\r\n  @Input() set disabled(value: boolean) {\r\n    this.className = value ? 'disabled' : '';\r\n    this._disabled = value;\r\n  }\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  get disabled() {\r\n    return this._disabled;\r\n  }\r\n\r\n  className = '';\r\n  private _disabled: boolean;\r\n\r\n  onWritePost() {\r\n    if (!this.disabled) {\r\n      this.router.navigate(['posts', 'new'], {\r\n        queryParams: { spaceId: this.spaceId },\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"var\";\r\n\r\n.static {\r\n\r\n}\r\n\r\n.full {\r\n  width: 100%;\r\n}\r\n\r\n.write-post-button {\r\n  cursor: pointer;\r\n  font-size: $font_normal;\r\n}\r\n\r\n.disabled {\r\n  background: $color_shadow !important;\r\n  color: #B3B3B3 !important;\r\n  cursor: auto;\r\n}\r\n\r\n.tooltip {\r\n  font-size: 14px;\r\n}\r\n",
                    "styleUrl": "./write-post-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 27
                    }
                }
            },
            "templateData": "<a [ngClass]=\"[width, className]\"\r\n   mat-flat-button\r\n   matTooltip=\"{{ 'generalMessages.createSpaceFirst' | transloco }}\"\r\n   matTooltipPosition=\"above\"\r\n   matTooltipClass=\"tooltip\"\r\n   [matTooltipDisabled]=\"!disabled\"\r\n   class=\"write-post-button\"\r\n   color=\"primary\"\r\n   (click)=\"onWritePost()\"\r\n>\r\n  {{ 'buttons.writePost' | transloco }}\r\n</a>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AccountModule",
            "id": "module-AccountModule-8fc3eecf06dc360b7062e9d500e6ba7e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/account/account.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProfileComponent } from './profile/profile.component';\nimport { AccountComponent } from './account/account.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { PostModule } from '../post/post.module';\nimport { SpaceModule } from '../space/space.module';\nimport { AddressModule } from '../ui-lib/address/address.module';\nimport { BalanceModule } from '../ui-lib/balance/balance.module';\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\nimport { TextModule } from '../ui-lib/text/text.module';\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\nimport { ContentModule } from '../ui-lib/content/content.module';\nimport { ProfileModule } from '../ui-lib/profile/profile.module';\nimport { AccountRoutingModule } from './account-routing.module';\nimport { EditProfileComponent } from './edit-profile/edit-profile.component';\nimport { InputModule } from '../ui-lib/input/input.module';\nimport { TranslocoModule } from '@ngneat/transloco';\nimport { MenuModule } from '../ui-lib/menu/menu.module';\nimport { DirectivesModule } from '../shared/directives/directives.module';\n\n@NgModule({\n  declarations: [ProfileComponent, AccountComponent, EditProfileComponent],\n  imports: [\n    CommonModule,\n    PostModule,\n    SpaceModule,\n    AddressModule,\n    BalanceModule,\n    ButtonsModule,\n    TextModule,\n    ContainersModule,\n    ContentModule,\n    SharedModule,\n    ProfileModule,\n    AccountRoutingModule,\n    InputModule,\n    TranslocoModule,\n    MenuModule,\n    DirectivesModule,\n  ],\n})\nexport class AccountModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountComponent"
                        },
                        {
                            "name": "EditProfileComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountRoutingModule"
                        },
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "ProfileModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AccountRoutingModule",
            "id": "module-AccountRoutingModule-e2b76868f50ba8da2e589f4ee1344eb3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/account/account-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AccountComponent } from './account/account.component';\nimport { EditProfileComponent } from './edit-profile/edit-profile.component';\n\nconst routes: Routes = [\n  { path: ':userId', component: AccountComponent },\n  { path: ':userId/profile/:type', component: EditProfileComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AccountRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ActionPanelModule",
            "id": "module-ActionPanelModule-11a90fa4b6a8e9379113ae9de6e6525e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/action-panel/action-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActionPanelComponent } from './action-panel.component';\r\nimport { ButtonsModule } from '../buttons/buttons.module';\r\n\r\n@NgModule({\r\n  declarations: [ActionPanelComponent],\r\n  imports: [CommonModule, ButtonsModule],\r\n  exports: [ActionPanelComponent],\r\n})\r\nexport class ActionPanelModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddressModule",
            "id": "module-AddressModule-b761f907129579e932796a926b6e58df",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/address/address.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AddressComponent } from './address.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { ButtonsModule } from '../buttons/buttons.module';\r\nimport { PipesModule } from '../../shared/pipes/pipes.module';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\n\r\n@NgModule({\r\n  declarations: [AddressComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    ClipboardModule,\r\n    ButtonsModule,\r\n    PipesModule,\r\n    TranslocoModule,\r\n  ],\r\n  exports: [AddressComponent],\r\n})\r\nexport class AddressModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddressComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddressComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-09e3e49f24837bd8c64b0262af787593",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  BrowserModule,\n  BrowserTransferStateModule,\n} from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SharedModule } from './shared/shared.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { IconRegistryService } from './shared/services/icon-registry.service';\nimport { CommonModule } from '@angular/common';\nimport { SpaceModule } from './space/space.module';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { AppErrorStateMatcher } from './core/errors/error-matcher';\nimport { BaseControlValueAccessorComponent } from './core/base-component/base-value-accessor';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { EffectsModule } from '@ngrx/effects';\nimport { SpaceEffects } from './state/space/space.effects';\nimport { appReducers } from './state/state';\nimport { SubsocialApiService } from './shared/services/subsocial-api.service';\nimport { ContentEffects } from './state/content/content.effects';\nimport { PostEffects } from './state/post/post.effects';\nimport { ReplyIdEffects } from './state/reply-id/reply-id.effects';\nimport { ProfileEffects } from './state/profile/profile.effects';\nimport { RouterModule } from '@angular/router';\nimport { MyPostReactionsEffects } from './state/my-post-reactions/my-post-reactions.effects';\nimport { PostModule } from './post/post.module';\nimport { FollowedSpaceIdsEffects } from './state/followed-space-ids/followed-space-ids.effects';\nimport { FollowedAccountIdsEffects } from './state/followed-account-ids/followed-account-ids.effects';\nimport { TranslocoRootModule } from './transloco-root.module';\nimport { MenuModule } from './ui-lib/menu/menu.module';\nimport { ModalDialogModule } from './ui-lib/modal-dialogs/modal-dialog.module';\n\n@NgModule({\n  declarations: [AppComponent, BaseControlValueAccessorComponent],\n  imports: [\n    CommonModule,\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\n    AppRoutingModule,\n    HttpClientModule,\n    PostModule,\n    SpaceModule,\n    BrowserAnimationsModule,\n    BrowserTransferStateModule,\n    RouterModule,\n    StoreModule.forRoot(appReducers, {}),\n    StoreDevtoolsModule.instrument({\n      maxAge: 40,\n      logOnly: environment.production,\n    }),\n    EffectsModule.forRoot([\n      SpaceEffects,\n      ContentEffects,\n      PostEffects,\n      ReplyIdEffects,\n      ProfileEffects,\n      MyPostReactionsEffects,\n      FollowedSpaceIdsEffects,\n      FollowedAccountIdsEffects,\n    ]),\n    SharedModule,\n    TranslocoRootModule,\n    MenuModule,\n    ModalDialogModule,\n  ],\n  providers: [\n    IconRegistryService,\n    SubsocialApiService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: registryIcons,\n      deps: [IconRegistryService],\n      multi: true,\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initApi,\n      deps: [SubsocialApiService],\n      multi: true,\n    },\n    { provide: ErrorStateMatcher, useClass: AppErrorStateMatcher },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\nexport function registryIcons(service: IconRegistryService) {\n  return () => service.init();\n}\n\nexport function initApi(service: SubsocialApiService) {\n  return () => service.initSubsocialApi();\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IconRegistryService"
                        },
                        {
                            "name": "SubsocialApiService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BaseControlValueAccessorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "ModalDialogModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceModule"
                        },
                        {
                            "name": "TranslocoRootModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-c8b90c5bb5e9a1003f8db8b2ac369e1d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SpaceComponent } from './space/space/space.component';\nimport { PostComponent } from './post/post/post.component';\nimport { EditSpaceComponent } from './space/edit-space/edit-space.component';\nimport { EditPostComponent } from './post/edit-post/edit-post.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => \"import('./main/main.module').then((m) => m.MainModule)\",\n    pathMatch: 'full',\n  },\n  {\n    path: 'notifications',\n    loadChildren: () =>\n      \"import('./notification/notification.module').then(\\\n        (m) => m.NotificationModule\\\n      )\",\n  },\n  {\n    path: 'spaces/:type',\n    component: EditSpaceComponent,\n  },\n  {\n    path: 'spaces/:spaceId/:type',\n    component: EditSpaceComponent,\n  },\n  { path: 'posts/:type', component: EditPostComponent },\n  { path: 'posts/:postId/:type', component: EditPostComponent },\n  {\n    path: 'accounts',\n    loadChildren: () =>\n      \"import('./account/account.module').then((m) => m.AccountModule)\",\n  },\n  {\n    path: ':spaceId',\n    component: SpaceComponent,\n  },\n  { path: ':spaceId/:slug', component: PostComponent },\n  { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      initialNavigation: 'enabled',\n      scrollPositionRestoration: 'enabled',\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "id": "module-AppServerModule-62be77e4ff43b582c2c1fc91611e26ff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.server.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport {\r\n  ServerModule,\r\n  ServerTransferStateModule,\r\n} from '@angular/platform-server';\r\n\r\nimport { AppModule } from './app.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  imports: [AppModule, ServerModule, ServerTransferStateModule],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppServerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AvatarModule",
            "id": "module-AvatarModule-900239c6ede1b26ef1c1f560fa37524d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AvatarComponent } from './avatar.component';\r\nimport { NgxJdenticonModule } from 'ngx-jdenticon';\r\n\r\n@NgModule({\r\n  declarations: [AvatarComponent],\r\n  imports: [CommonModule, NgxJdenticonModule],\r\n  exports: [AvatarComponent],\r\n})\r\nexport class AvatarModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BalanceModule",
            "id": "module-BalanceModule-eabd85fd4adde6eb23ec504d48bbdd86",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/balance/balance.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TokensComponent } from './tokens/tokens.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [TokensComponent],\r\n  imports: [CommonModule, MatIconModule],\r\n  exports: [TokensComponent],\r\n})\r\nexport class BalanceModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TokensComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TokensComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonsModule",
            "id": "module-ButtonsModule-9990a5de64b794fed7aafa39b198ed11",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/buttons/buttons.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconButtonComponent } from './icon-button/icon-button.component';\nimport { CloseButtonComponent } from './close-button/close-button.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FollowButtonComponent } from './follow-button/follow-button.component';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { SendTipsButtonComponent } from './send-tips-button/send-tips-button.component';\nimport { ReplyButtonComponent } from './reply-button/reply-button.component';\nimport { UpvoteButtonComponent } from './upvote-button/upvote-button.component';\nimport { CommentButtonComponent } from './comment-button/comment-button.component';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { DownvoteButtonComponent } from './downvote-button/downvote-button.component';\nimport { SharedButtonComponent } from './shared-button/shared-button.component';\nimport { SendButtonComponent } from './send-button/send-button.component';\nimport { ProfileButtonComponent } from './profile-button/profile-button.component';\nimport { SendTokensButtonComponent } from './send-tokens-button/send-tokens-button.component';\nimport { WritePostButtonComponent } from './write-post-button/write-post-button.component';\nimport { SignOutButtonComponent } from './sign-out-button/sign-out-button.component';\nimport { EditButtonComponent } from './edit-button/edit-button.component';\nimport { RouterModule } from '@angular/router';\nimport { QrButtonComponent } from './qr-button/qr-button.component';\nimport { ContainersModule } from '../containers/containers.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { BalanceModule } from '../balance/balance.module';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { TxButtonComponent } from './tx-button/tx-button.component';\nimport { CreateEntityButtonComponent } from './create-entity-button/create-entity-button.component';\nimport { NotificationIconButtonComponent } from './notification-icon-button/notification-icon-button.component';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { TranslocoModule } from '@ngneat/transloco';\nimport { CreateSpaceButtonComponent } from './create-space-button/create-space-button.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nconst components = [\n  QrButtonComponent,\n  EditButtonComponent,\n  SendTokensButtonComponent,\n  WritePostButtonComponent,\n  SignOutButtonComponent,\n  ProfileButtonComponent,\n  IconButtonComponent,\n  CloseButtonComponent,\n  FollowButtonComponent,\n  SendTipsButtonComponent,\n  ReplyButtonComponent,\n  UpvoteButtonComponent,\n  DownvoteButtonComponent,\n  CommentButtonComponent,\n  SharedButtonComponent,\n  SendButtonComponent,\n  TxButtonComponent,\n  CreateEntityButtonComponent,\n  NotificationIconButtonComponent,\n  CreateSpaceButtonComponent,\n];\n\n@NgModule({\n  declarations: [...components],\n  exports: [...components],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    PipesModule,\n    RouterModule,\n    ContainersModule,\n    AvatarModule,\n    BalanceModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatBadgeModule,\n    TranslocoModule,\n    MatTooltipModule,\n  ],\n})\nexport class ButtonsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CloseButtonComponent"
                        },
                        {
                            "name": "CommentButtonComponent"
                        },
                        {
                            "name": "CreateEntityButtonComponent"
                        },
                        {
                            "name": "CreateSpaceButtonComponent"
                        },
                        {
                            "name": "DownvoteButtonComponent"
                        },
                        {
                            "name": "EditButtonComponent"
                        },
                        {
                            "name": "FollowButtonComponent"
                        },
                        {
                            "name": "IconButtonComponent"
                        },
                        {
                            "name": "NotificationIconButtonComponent"
                        },
                        {
                            "name": "ProfileButtonComponent"
                        },
                        {
                            "name": "QrButtonComponent"
                        },
                        {
                            "name": "ReplyButtonComponent"
                        },
                        {
                            "name": "SendButtonComponent"
                        },
                        {
                            "name": "SendTipsButtonComponent"
                        },
                        {
                            "name": "SendTokensButtonComponent"
                        },
                        {
                            "name": "SharedButtonComponent"
                        },
                        {
                            "name": "SignOutButtonComponent"
                        },
                        {
                            "name": "TxButtonComponent"
                        },
                        {
                            "name": "UpvoteButtonComponent"
                        },
                        {
                            "name": "WritePostButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ContainersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CloseButtonComponent"
                        },
                        {
                            "name": "CommentButtonComponent"
                        },
                        {
                            "name": "CreateEntityButtonComponent"
                        },
                        {
                            "name": "CreateSpaceButtonComponent"
                        },
                        {
                            "name": "DownvoteButtonComponent"
                        },
                        {
                            "name": "EditButtonComponent"
                        },
                        {
                            "name": "FollowButtonComponent"
                        },
                        {
                            "name": "IconButtonComponent"
                        },
                        {
                            "name": "NotificationIconButtonComponent"
                        },
                        {
                            "name": "ProfileButtonComponent"
                        },
                        {
                            "name": "QrButtonComponent"
                        },
                        {
                            "name": "ReplyButtonComponent"
                        },
                        {
                            "name": "SendButtonComponent"
                        },
                        {
                            "name": "SendTipsButtonComponent"
                        },
                        {
                            "name": "SendTokensButtonComponent"
                        },
                        {
                            "name": "SharedButtonComponent"
                        },
                        {
                            "name": "SignOutButtonComponent"
                        },
                        {
                            "name": "TxButtonComponent"
                        },
                        {
                            "name": "UpvoteButtonComponent"
                        },
                        {
                            "name": "WritePostButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommentModule",
            "id": "module-CommentModule-8cf7e0baa84aa63e773a4aac7f4e1a8f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/comment/comment.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CommentInputComponent } from './comment-input/comment-input.component';\nimport { CommentsComponent } from './comments/comments.component';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { TextModule } from '../text/text.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { AddressModule } from '../address/address.module';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { ContainersModule } from '../containers/containers.module';\nimport { ActionPanelModule } from '../action-panel/action-panel.module';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { InputModule } from '../input/input.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MenuModule } from '../menu/menu.module';\nimport { ShowCommentsButtonComponent } from './show-comments-button/show-comments-button.component';\nimport { CommentItemComponent } from './comment-item/comment-item.component';\nimport { CommentListComponent } from './comment-list/comment-list.component';\nimport { ContentModule } from '../content/content.module';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [\n    CommentInputComponent,\n    CommentsComponent,\n    ShowCommentsButtonComponent,\n    CommentItemComponent,\n    CommentListComponent,\n  ],\n  imports: [\n    CommonModule,\n    ButtonsModule,\n    AvatarModule,\n    TextModule,\n    SharedModule,\n    AddressModule,\n    RouterModule,\n    PipesModule,\n    ContainersModule,\n    ActionPanelModule,\n    MarkdownModule,\n    InputModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MenuModule,\n    ContentModule,\n    TranslocoModule,\n  ],\n  exports: [\n    CommentInputComponent,\n    CommentsComponent,\n    CommentItemComponent,\n    CommentListComponent,\n  ],\n})\nexport class CommentModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CommentInputComponent"
                        },
                        {
                            "name": "CommentItemComponent"
                        },
                        {
                            "name": "CommentListComponent"
                        },
                        {
                            "name": "CommentsComponent"
                        },
                        {
                            "name": "ShowCommentsButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionPanelModule"
                        },
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CommentInputComponent"
                        },
                        {
                            "name": "CommentItemComponent"
                        },
                        {
                            "name": "CommentListComponent"
                        },
                        {
                            "name": "CommentsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContainersModule",
            "id": "module-ContainersModule-b80eb442e081639d486a39537311304d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/containers/containers.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RowComponent } from './row/row.component';\r\nimport { ColumnComponent } from './column/column.component';\r\nimport { ScrollComponent } from './scroll/scroll.component';\r\n\r\n@NgModule({\r\n  declarations: [RowComponent, ColumnComponent, ScrollComponent],\r\n  exports: [RowComponent, ColumnComponent, ScrollComponent],\r\n  imports: [CommonModule],\r\n})\r\nexport class ContainersModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColumnComponent"
                        },
                        {
                            "name": "RowComponent"
                        },
                        {
                            "name": "ScrollComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColumnComponent"
                        },
                        {
                            "name": "RowComponent"
                        },
                        {
                            "name": "ScrollComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContentModule",
            "id": "module-ContentModule-43e81af8c17304117c12a48eba9f80ce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/content/content.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EmbedVideoComponent } from './embed-video/embed-video.component';\r\nimport { PostImageComponent } from './post-image/post-image.component';\r\nimport { YouTubePlayerModule } from '@angular/youtube-player';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HiddenContentComponent } from './hidden-content/hidden-content.component';\r\nimport { ContainersModule } from '../containers/containers.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { NoContentComponent } from './no-content/no-content.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EmbedVideoComponent,\r\n    PostImageComponent,\r\n    HiddenContentComponent,\r\n    NoContentComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    YouTubePlayerModule,\r\n    RouterModule,\r\n    ContainersModule,\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    MatCardModule,\r\n    TranslocoModule,\r\n  ],\r\n  exports: [\r\n    EmbedVideoComponent,\r\n    PostImageComponent,\r\n    HiddenContentComponent,\r\n    NoContentComponent,\r\n  ],\r\n})\r\nexport class ContentModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EmbedVideoComponent"
                        },
                        {
                            "name": "HiddenContentComponent"
                        },
                        {
                            "name": "NoContentComponent"
                        },
                        {
                            "name": "PostImageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ContainersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EmbedVideoComponent"
                        },
                        {
                            "name": "HiddenContentComponent"
                        },
                        {
                            "name": "NoContentComponent"
                        },
                        {
                            "name": "PostImageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-b70ca21fccbccb72c9b38fad8a71fd9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IfMobileDirective } from './if-mobile.directive';\nimport { IfDesktopDirective } from './if-desktop.directive';\n\n@NgModule({\n  declarations: [IfMobileDirective, IfDesktopDirective],\n  imports: [CommonModule],\n  exports: [IfMobileDirective, IfDesktopDirective],\n})\nexport class DirectivesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IfDesktopDirective"
                        },
                        {
                            "name": "IfMobileDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IfDesktopDirective"
                        },
                        {
                            "name": "IfMobileDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-de7e277918765ab1ef3946ea19cd3bd5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TagComponent } from './tag/tag.component';\nimport { TagInputComponent } from './tag-input/tag-input.component';\nimport { TextAreaComponent } from './text-area/text-area.component';\nimport { TextInputComponent } from './text-input/text-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { ImageLoaderComponent } from './image-loader/image-loader.component';\nimport { MdeEditorComponent } from './mde-editor/mde-editor.component';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [\n    TagComponent,\n    TagInputComponent,\n    TextAreaComponent,\n    TextInputComponent,\n    ImageLoaderComponent,\n    MdeEditorComponent,\n  ],\n  exports: [\n    TagComponent,\n    TagInputComponent,\n    TextAreaComponent,\n    TextInputComponent,\n    ImageLoaderComponent,\n    MdeEditorComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatChipsModule,\n    MatIconModule,\n    FormsModule,\n    MatInputModule,\n    TranslocoModule,\n  ],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ImageLoaderComponent"
                        },
                        {
                            "name": "MdeEditorComponent"
                        },
                        {
                            "name": "TagComponent"
                        },
                        {
                            "name": "TagInputComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ImageLoaderComponent"
                        },
                        {
                            "name": "MdeEditorComponent"
                        },
                        {
                            "name": "TagComponent"
                        },
                        {
                            "name": "TagInputComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-50af26152d2b16605390497c728475ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/main.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MainComponent } from './main/main.component';\nimport { MainRoutingModule } from './main-routing.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { SpaceModule } from '../space/space.module';\nimport { PostModule } from '../post/post.module';\nimport { FeedComponent } from './feed/feed.component';\nimport { ContentModule } from '../ui-lib/content/content.module';\nimport { PostUiModule } from '../ui-lib/post-ui/post-ui.module';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [MainComponent, FeedComponent],\n  exports: [MainComponent],\n  imports: [\n    CommonModule,\n    MainRoutingModule,\n    SharedModule,\n    SpaceModule,\n    PostModule,\n    ContentModule,\n    PostUiModule,\n    InfiniteScrollModule,\n    TranslocoModule,\n  ],\n})\nexport class MainModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FeedComponent"
                        },
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "MainRoutingModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "PostUiModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MainComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainRoutingModule",
            "id": "module-MainRoutingModule-85bece213b568caa749f4e29b0d06d6f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/main-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainComponent } from './main/main.component';\r\n\r\nconst routes: Routes = [{ path: '', component: MainComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MainRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "id": "module-MenuModule-a9818cfee9041f98fb79ed89df11d4c6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SidenavMenuComponent } from './sidenav-menu/sidenav-menu.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ContainersModule } from '../containers/containers.module';\nimport { MatRippleModule } from '@angular/material/core';\nimport { RouterModule } from '@angular/router';\nimport { TranslocoModule } from '@ngneat/transloco';\nimport { LeftSideMenuComponent } from './left-side-menu/left-side-menu.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { PostMenuComponent } from './post-menu/post-menu.component';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { CommentMenuComponent } from './comment-menu/comment-menu.component';\nimport { SpaceMenuComponent } from './space-menu/space-menu.component';\nimport { MenuItemComponent } from './menu-item/menu-item.component';\nimport { ProfileMenuComponent } from './profile-menu/profile-menu.component';\n\n@NgModule({\n  declarations: [\n    SidenavMenuComponent,\n    LeftSideMenuComponent,\n    PostMenuComponent,\n    CommentMenuComponent,\n    SpaceMenuComponent,\n    MenuItemComponent,\n    ProfileMenuComponent,\n  ],\n  exports: [\n    SidenavMenuComponent,\n    LeftSideMenuComponent,\n    PostMenuComponent,\n    CommentMenuComponent,\n    SpaceMenuComponent,\n    ProfileMenuComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    ContainersModule,\n    MatRippleModule,\n    RouterModule,\n    MatDividerModule,\n    ButtonsModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    TranslocoModule,\n  ],\n})\nexport class MenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CommentMenuComponent"
                        },
                        {
                            "name": "LeftSideMenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "PostMenuComponent"
                        },
                        {
                            "name": "ProfileMenuComponent"
                        },
                        {
                            "name": "SidenavMenuComponent"
                        },
                        {
                            "name": "SpaceMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CommentMenuComponent"
                        },
                        {
                            "name": "LeftSideMenuComponent"
                        },
                        {
                            "name": "PostMenuComponent"
                        },
                        {
                            "name": "ProfileMenuComponent"
                        },
                        {
                            "name": "SidenavMenuComponent"
                        },
                        {
                            "name": "SpaceMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalDialogModule",
            "id": "module-ModalDialogModule-1c650aacd1e42a3ea8f5ade888f77179",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/modal-dialogs/modal-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccountSidenavComponent } from './account-sidenav/account-sidenav.component';\nimport { ConnectionsModalDialogComponent } from './connections-modal-dialog/connections-modal-dialog.component';\nimport { FollowersModalDialogComponent } from './followers-modal-dialog/followers-modal-dialog.component';\nimport { QrModalDialogComponent } from './qr-modal-dialog/qr-modal-dialog.component';\nimport { SharePostModalDialogComponent } from './share-post-modal-dialog/share-post-modal-dialog.component';\nimport { SignInModalDialogComponent } from './sign-in-modal-dialog/sign-in-modal-dialog.component';\nimport { VoteModalDialogComponent } from './vote-modal-dialog/vote-modal-dialog.component';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ContainersModule } from '../containers/containers.module';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { BalanceModule } from '../balance/balance.module';\nimport { AddressModule } from '../address/address.module';\nimport { ProfileModule } from '../profile/profile.module';\nimport { MenuModule } from '../menu/menu.module';\nimport { QRCodeModule } from 'angularx-qrcode';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { PostUiModule } from '../post-ui/post-ui.module';\nimport { SpaceUiModule } from '../space-ui/space-ui.module';\nimport { InputModule } from '../input/input.module';\nimport { AdblockConflictModalDialogComponent } from './adblock-conflict-modal-dialog/adblock-conflict-modal-dialog.component';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [\n    AccountSidenavComponent,\n    ConnectionsModalDialogComponent,\n    FollowersModalDialogComponent,\n    QrModalDialogComponent,\n    SharePostModalDialogComponent,\n    SignInModalDialogComponent,\n    VoteModalDialogComponent,\n    AdblockConflictModalDialogComponent,\n  ],\n  imports: [\n    CommonModule,\n    ButtonsModule,\n    SharedModule,\n    ContainersModule,\n    PipesModule,\n    AvatarModule,\n    BalanceModule,\n    AddressModule,\n    ProfileModule,\n    MenuModule,\n    QRCodeModule,\n    MatSidenavModule,\n    PostUiModule,\n    SpaceUiModule,\n    InputModule,\n    TranslocoModule,\n  ],\n  exports: [\n    AccountSidenavComponent,\n    ConnectionsModalDialogComponent,\n    FollowersModalDialogComponent,\n    QrModalDialogComponent,\n    SharePostModalDialogComponent,\n    SignInModalDialogComponent,\n    VoteModalDialogComponent,\n  ],\n})\nexport class ModalDialogModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountSidenavComponent"
                        },
                        {
                            "name": "AdblockConflictModalDialogComponent"
                        },
                        {
                            "name": "ConnectionsModalDialogComponent"
                        },
                        {
                            "name": "FollowersModalDialogComponent"
                        },
                        {
                            "name": "QrModalDialogComponent"
                        },
                        {
                            "name": "SharePostModalDialogComponent"
                        },
                        {
                            "name": "SignInModalDialogComponent"
                        },
                        {
                            "name": "VoteModalDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "PostUiModule"
                        },
                        {
                            "name": "ProfileModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceUiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountSidenavComponent"
                        },
                        {
                            "name": "ConnectionsModalDialogComponent"
                        },
                        {
                            "name": "FollowersModalDialogComponent"
                        },
                        {
                            "name": "QrModalDialogComponent"
                        },
                        {
                            "name": "SharePostModalDialogComponent"
                        },
                        {
                            "name": "SignInModalDialogComponent"
                        },
                        {
                            "name": "VoteModalDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationModule",
            "id": "module-NotificationModule-dc3294fdea39fef7e645185450546f38",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/notification/notification.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationPageComponent } from './notification-page/notification-page.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { TextModule } from '../ui-lib/text/text.module';\r\nimport { PostUiModule } from '../ui-lib/post-ui/post-ui.module';\r\nimport { ContentModule } from '../ui-lib/content/content.module';\r\nimport { NotificationRoutingModule } from './notification-routing.module';\r\nimport { NotificationItemComponent } from './notification-item/notification-item.component';\r\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\r\nimport { AvatarModule } from '../ui-lib/avatar/avatar.module';\r\nimport { PipesModule } from '../shared/pipes/pipes.module';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\n\r\n@NgModule({\r\n  declarations: [NotificationPageComponent, NotificationItemComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    TextModule,\r\n    PostUiModule,\r\n    ContentModule,\r\n    NotificationRoutingModule,\r\n    ContainersModule,\r\n    AvatarModule,\r\n    PipesModule,\r\n    InfiniteScrollModule,\r\n    TranslocoModule,\r\n  ],\r\n})\r\nexport class NotificationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotificationItemComponent"
                        },
                        {
                            "name": "NotificationPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "NotificationRoutingModule"
                        },
                        {
                            "name": "PostUiModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationRoutingModule",
            "id": "module-NotificationRoutingModule-6296dff7e2e3f222fe6bd8d355f1059a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/notification/notification-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NotificationPageComponent } from './notification-page/notification-page.component';\r\n\r\nconst routes: Routes = [{ path: '', component: NotificationPageComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NotificationRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "id": "module-PipesModule-5f3a3b35d4ef5ade2b85096700eb3c4b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/pipes/pipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PluralizePipe } from './pluralize.pipe';\r\nimport { DayjsPipe } from './dayjs.pipe';\r\nimport { LinkToIconPipe } from './link-to-icon.pipe';\r\nimport { NumeralPipe } from './numeral.pipe';\r\nimport { AddressHiddenPipe } from './address-hidden.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PluralizePipe,\r\n    DayjsPipe,\r\n    LinkToIconPipe,\r\n    NumeralPipe,\r\n    AddressHiddenPipe,\r\n  ],\r\n  imports: [CommonModule],\r\n  exports: [\r\n    NumeralPipe,\r\n    PluralizePipe,\r\n    DayjsPipe,\r\n    LinkToIconPipe,\r\n    AddressHiddenPipe,\r\n  ],\r\n  providers: [PluralizePipe],\r\n})\r\nexport class PipesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddressHiddenPipe"
                        },
                        {
                            "name": "DayjsPipe"
                        },
                        {
                            "name": "LinkToIconPipe"
                        },
                        {
                            "name": "NumeralPipe"
                        },
                        {
                            "name": "PluralizePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddressHiddenPipe"
                        },
                        {
                            "name": "DayjsPipe"
                        },
                        {
                            "name": "LinkToIconPipe"
                        },
                        {
                            "name": "NumeralPipe"
                        },
                        {
                            "name": "PluralizePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostModule",
            "id": "module-PostModule-9d7e57709a02ff3586018f112d741ab4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/post/post.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PostRoutingModule } from './post-routing.module';\nimport { PostListComponent } from './post-list/post-list.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { PostComponent } from './post/post.component';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { EditPostComponent } from './edit-post/edit-post.component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { TextModule } from '../ui-lib/text/text.module';\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\nimport { InputModule } from '../ui-lib/input/input.module';\nimport { SpaceUiModule } from '../ui-lib/space-ui/space-ui.module';\nimport { PipesModule } from '../shared/pipes/pipes.module';\nimport { PostUiModule } from '../ui-lib/post-ui/post-ui.module';\nimport { ContentModule } from '../ui-lib/content/content.module';\nimport { CommentModule } from '../ui-lib/comment/comment.module';\nimport { ActionPanelModule } from '../ui-lib/action-panel/action-panel.module';\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\nimport { MenuModule } from '../ui-lib/menu/menu.module';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [PostListComponent, PostComponent, EditPostComponent],\n  exports: [PostListComponent],\n  imports: [\n    CommonModule,\n    PostRoutingModule,\n    SharedModule,\n    HttpClientModule,\n    InfiniteScrollModule,\n    MarkdownModule.forRoot(),\n    TextModule,\n    ButtonsModule,\n    InputModule,\n    SpaceUiModule,\n    PipesModule,\n    PostUiModule,\n    ContentModule,\n    CommentModule,\n    ActionPanelModule,\n    ContainersModule,\n    MenuModule,\n    TranslocoModule,\n  ],\n})\nexport class PostModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditPostComponent"
                        },
                        {
                            "name": "PostComponent"
                        },
                        {
                            "name": "PostListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionPanelModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CommentModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "PostRoutingModule"
                        },
                        {
                            "name": "PostUiModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceUiModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PostListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostRoutingModule",
            "id": "module-PostRoutingModule-dded52e0b4139d775ec3c2dd30c0371f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/post/post-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PostRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostUiModule",
            "id": "module-PostUiModule-a81d40a6c2fb0f9f4396629de7caed83",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/post-ui/post-ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PostInfoComponent } from './post-info/post-info.component';\nimport { PostItemComponent } from './post-item/post-item.component';\nimport { SharedPostItemComponent } from './shared-post-item/shared-post-item.component';\nimport { TextModule } from '../text/text.module';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { RouterModule } from '@angular/router';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { ContainersModule } from '../containers/containers.module';\nimport { ContentModule } from '../content/content.module';\nimport { CommentModule } from '../comment/comment.module';\nimport { ActionPanelModule } from '../action-panel/action-panel.module';\nimport { MenuModule } from '../menu/menu.module';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  declarations: [PostInfoComponent, PostItemComponent, SharedPostItemComponent],\n  imports: [\n    CommonModule,\n    TextModule,\n    ButtonsModule,\n    AvatarModule,\n    RouterModule,\n    PipesModule,\n    ContainersModule,\n    ContentModule,\n    CommentModule,\n    ActionPanelModule,\n    MenuModule,\n    SharedModule,\n  ],\n  exports: [PostInfoComponent, PostItemComponent, SharedPostItemComponent],\n})\nexport class PostUiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PostInfoComponent"
                        },
                        {
                            "name": "PostItemComponent"
                        },
                        {
                            "name": "SharedPostItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionPanelModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "CommentModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PostInfoComponent"
                        },
                        {
                            "name": "PostItemComponent"
                        },
                        {
                            "name": "SharedPostItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfileModule",
            "id": "module-ProfileModule-7fd819ed16ee12cb69e3cac3bcc6ebb2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/profile/profile.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AccountListItemComponent } from './account-list-item/account-list-item.component';\r\nimport { ContainersModule } from '../containers/containers.module';\r\nimport { AddressModule } from '../address/address.module';\r\nimport { AvatarModule } from '../avatar/avatar.module';\r\nimport { BalanceModule } from '../balance/balance.module';\r\nimport { TextModule } from '../text/text.module';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { PipesModule } from '../../shared/pipes/pipes.module';\r\nimport { ProfileInfoComponent } from './profile-info/profile-info.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\n\r\n@NgModule({\r\n  declarations: [AccountListItemComponent, ProfileInfoComponent],\r\n  exports: [AccountListItemComponent, ProfileInfoComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ContainersModule,\r\n    AddressModule,\r\n    AvatarModule,\r\n    BalanceModule,\r\n    TextModule,\r\n    MatRippleModule,\r\n    PipesModule,\r\n    MatDialogModule,\r\n    TranslocoModule,\r\n  ],\r\n})\r\nexport class ProfileModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountListItemComponent"
                        },
                        {
                            "name": "ProfileInfoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountListItemComponent"
                        },
                        {
                            "name": "ProfileInfoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-2d25529ceb8ba5b615b75496d386b251",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatIconModule } from '@angular/material/icon';\nimport { VoteUserListItemComponent } from './components/vote-user-list-item/vote-user-list-item.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCardModule } from '@angular/material/card';\nimport { RouterModule } from '@angular/router';\nimport { TabsComponent } from './components/tabs/tabs.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { LinkIconsComponent } from './components/link-icons/link-icons.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SpinnerComponent } from './components/spinner/spinner.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { VoteUserListComponent } from './components/vote-user-list/vote-user-list.component';\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\nimport { MenuModule } from '../ui-lib/menu/menu.module';\nimport { AddressModule } from '../ui-lib/address/address.module';\nimport { ProfileModule } from '../ui-lib/profile/profile.module';\nimport { AvatarModule } from '../ui-lib/avatar/avatar.module';\nimport { BalanceModule } from '../ui-lib/balance/balance.module';\nimport { TextModule } from '../ui-lib/text/text.module';\nimport { PipesModule } from './pipes/pipes.module';\nimport { SimpleSnackBarComponent } from './components/simple-snack-bar/simple-snack-bar.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AdblockDetectComponent } from './components/adblock-detect/adblock-detect.component';\nimport { TranslocoModule } from '@ngneat/transloco';\nimport { DirectivesModule } from './directives/directives.module';\nimport { HeaderMenuButtonComponent } from './components/header-menu-button/header-menu-button.component';\n\n@NgModule({\n  declarations: [\n    VoteUserListItemComponent,\n    HeaderComponent,\n    TabsComponent,\n    LinkIconsComponent,\n    SpinnerComponent,\n    VoteUserListComponent,\n    SimpleSnackBarComponent,\n    AdblockDetectComponent,\n    HeaderMenuButtonComponent,\n  ],\n  exports: [\n    VoteUserListItemComponent,\n    HeaderComponent,\n    MatButtonModule,\n    ClipboardModule,\n    MatIconModule,\n    MatTabsModule,\n    MatCardModule,\n    MatDividerModule,\n    TabsComponent,\n    MatMenuModule,\n    LinkIconsComponent,\n    MatTooltipModule,\n    MatRippleModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatChipsModule,\n    ReactiveFormsModule,\n    SpinnerComponent,\n    MatSnackBarModule,\n    VoteUserListComponent,\n    AdblockDetectComponent,\n  ],\n  imports: [\n    CommonModule,\n    ClipboardModule,\n    MatIconModule,\n    MatTabsModule,\n    MatCardModule,\n    MatButtonModule,\n    RouterModule,\n    MatDividerModule,\n    MatDialogModule,\n    MatTooltipModule,\n    MatRippleModule,\n    MatProgressSpinnerModule,\n    InfiniteScrollModule,\n    MatSnackBarModule,\n    ContainersModule,\n    MenuModule,\n    AddressModule,\n    ProfileModule,\n    AvatarModule,\n    BalanceModule,\n    TextModule,\n    PipesModule,\n    ButtonsModule,\n    HttpClientModule,\n    TranslocoModule,\n    DirectivesModule,\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdblockDetectComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeaderMenuButtonComponent"
                        },
                        {
                            "name": "LinkIconsComponent"
                        },
                        {
                            "name": "SimpleSnackBarComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "VoteUserListComponent"
                        },
                        {
                            "name": "VoteUserListItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddressModule"
                        },
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BalanceModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "ProfileModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AdblockDetectComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LinkIconsComponent"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "VoteUserListComponent"
                        },
                        {
                            "name": "VoteUserListItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpaceModule",
            "id": "module-SpaceModule-c6682db51c88bc4db7e2cad903006aa3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/space/space.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SpaceRoutingModule } from './space-routing.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { SpaceListComponent } from './space-list/space-list.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SpaceComponent } from './space/space.component';\nimport { EditSpaceComponent } from './edit-space/edit-space.component';\nimport { SpaceProfileComponent } from './space-profile/space-profile.component';\nimport { PostModule } from '../post/post.module';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ButtonsModule } from '../ui-lib/buttons/buttons.module';\nimport { SpaceUiModule } from '../ui-lib/space-ui/space-ui.module';\nimport { InputModule } from '../ui-lib/input/input.module';\nimport { ContainersModule } from '../ui-lib/containers/containers.module';\nimport { TextModule } from '../ui-lib/text/text.module';\nimport { ContentModule } from '../ui-lib/content/content.module';\nimport { DirectivesModule } from '../shared/directives/directives.module';\nimport { MenuModule } from '../ui-lib/menu/menu.module';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [\n    SpaceListComponent,\n    SpaceComponent,\n    EditSpaceComponent,\n    SpaceProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    SpaceRoutingModule,\n    HttpClientModule,\n    SharedModule,\n    PostModule,\n    InfiniteScrollModule,\n    MarkdownModule.forRoot(),\n    ButtonsModule,\n    SpaceUiModule,\n    InputModule,\n    ContainersModule,\n    TextModule,\n    ContentModule,\n    DirectivesModule,\n    MenuModule,\n    TranslocoModule,\n  ],\n  exports: [SpaceListComponent],\n})\nexport class SpaceModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditSpaceComponent"
                        },
                        {
                            "name": "SpaceComponent"
                        },
                        {
                            "name": "SpaceListComponent"
                        },
                        {
                            "name": "SpaceProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "PostModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "SpaceRoutingModule"
                        },
                        {
                            "name": "SpaceUiModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpaceListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpaceRoutingModule",
            "id": "module-SpaceRoutingModule-9722bb1562683523b1ff19edca4e8386",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/space/space-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SpaceRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SpaceUiModule",
            "id": "module-SpaceUiModule-0904feeac34eaa1bf9a111ba6b66035a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/space-ui/space-ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SpaceItemComponent } from './space-item/space-item.component';\nimport { TextModule } from '../text/text.module';\nimport { ButtonsModule } from '../buttons/buttons.module';\nimport { InputModule } from '../input/input.module';\nimport { SpaceInfoComponent } from './space-info/space-info.component';\nimport { AvatarModule } from '../avatar/avatar.module';\nimport { PipesModule } from '../../shared/pipes/pipes.module';\nimport { MatCardModule } from '@angular/material/card';\nimport { ContainersModule } from '../containers/containers.module';\nimport { DirectivesModule } from '../../shared/directives/directives.module';\nimport { ContentModule } from '../content/content.module';\nimport { MenuModule } from '../menu/menu.module';\nimport { SpaceSelectComponent } from './space-select/space-select.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  declarations: [SpaceItemComponent, SpaceInfoComponent, SpaceSelectComponent],\n  imports: [\n    CommonModule,\n    TextModule,\n    ButtonsModule,\n    InputModule,\n    AvatarModule,\n    PipesModule,\n    MatCardModule,\n    ContainersModule,\n    DirectivesModule,\n    ContentModule,\n    MenuModule,\n    MatSelectModule,\n    TranslocoModule,\n  ],\n  exports: [SpaceInfoComponent, SpaceItemComponent, SpaceSelectComponent],\n})\nexport class SpaceUiModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SpaceInfoComponent"
                        },
                        {
                            "name": "SpaceItemComponent"
                        },
                        {
                            "name": "SpaceSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ButtonsModule"
                        },
                        {
                            "name": "ContainersModule"
                        },
                        {
                            "name": "ContentModule"
                        },
                        {
                            "name": "DirectivesModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "TextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SpaceInfoComponent"
                        },
                        {
                            "name": "SpaceItemComponent"
                        },
                        {
                            "name": "SpaceSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TextModule",
            "id": "module-TextModule-023064a70313c1f79ae1b52c9a722c43",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ui-lib/text/text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TitleComponent } from './title/title.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ParagraphComponent } from './paragraph/paragraph.component';\r\nimport { SeeMoreComponent } from './see-more/see-more.component';\r\nimport { ExpandParagraphComponent } from './expand-paragraph/expand-paragraph.component';\r\nimport { MarkdownModule } from 'ngx-markdown';\r\nimport { CommentPostTitleComponent } from './comment-post-title/comment-post-title.component';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TitleComponent,\r\n    ParagraphComponent,\r\n    SeeMoreComponent,\r\n    ExpandParagraphComponent,\r\n    CommentPostTitleComponent,\r\n  ],\r\n  imports: [CommonModule, RouterModule, MarkdownModule, TranslocoModule],\r\n  exports: [\r\n    TitleComponent,\r\n    ParagraphComponent,\r\n    ExpandParagraphComponent,\r\n    SeeMoreComponent,\r\n    CommentPostTitleComponent,\r\n  ],\r\n})\r\nexport class TextModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CommentPostTitleComponent"
                        },
                        {
                            "name": "ExpandParagraphComponent"
                        },
                        {
                            "name": "ParagraphComponent"
                        },
                        {
                            "name": "SeeMoreComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CommentPostTitleComponent"
                        },
                        {
                            "name": "ExpandParagraphComponent"
                        },
                        {
                            "name": "ParagraphComponent"
                        },
                        {
                            "name": "SeeMoreComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslocoRootModule",
            "id": "module-TranslocoRootModule-242218445c40e27ef28c8f314c3b2c5c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/transloco-root.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule\n} from '@ngneat/transloco';\nimport { Injectable, NgModule } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`${environment.baseUrl}/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [ TranslocoModule ],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en', 'ru'],\n        defaultLang: 'en',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      })\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader }\n  ]\n})\nexport class TranslocoRootModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__non_webpack_require__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NodeRequire"
            },
            {
                "name": "AccountListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AccountListItemComponent>",
                "defaultValue": "Template.bind(\r\n  {}\r\n)"
            },
            {
                "name": "Active",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DownvoteButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Active",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UpvoteButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "addNewCommentPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Add New Comment Post',\r\n  props<{ payload: AddReplyIdProps }>()\r\n)"
            },
            {
                "name": "addReplyId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Reply Ids] Add Reply Id To Post',\r\n  props<{ payload: AddReplyIdProps }>()\r\n)"
            },
            {
                "name": "Address",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/address/address.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AddressComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "appReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  spaces: spaceReducer,\r\n  contents: contentReducer,\r\n  posts: postReducer,\r\n  profiles: profileReducer,\r\n  replyIds: replyIdReducer,\r\n  loader: loaderReducer,\r\n  myAccount: myAccountReducer,\r\n  myPostReactions: myPostReactionsReducer,\r\n  followedSpaceIds: followedSpaceIdsReducer,\r\n  followedAccountIds: followedAccountIdsReducer,\r\n}"
            },
            {
                "name": "AVATAR_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/size.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  MINI: 36,\n  SMALL: 40,\n  MEDIUM: 46,\n}"
            },
            {
                "name": "baseNodeAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dev-subsocial.codebridge.tech/'"
            },
            {
                "name": "baseNodeAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dev-subsocial.codebridge.tech/'"
            },
            {
                "name": "baseNodeUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "'https://' + baseNodeAddress"
            },
            {
                "name": "baseNodeUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "'https://' + baseNodeAddress"
            },
            {
                "name": "BaseRef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ provide: APP_BASE_HREF, useValue: '/' }"
            },
            {
                "name": "CloseButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/close-button/close-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CloseButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Column",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/column/column.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ColumnComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CommentButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/comment-button/comment-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "commentForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl('', { validators: Validators.required })"
            },
            {
                "name": "CommentInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentInputComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CommentList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentListComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Comments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comments/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentsComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/buttons.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  QrButtonComponent,\n  EditButtonComponent,\n  SendTokensButtonComponent,\n  WritePostButtonComponent,\n  SignOutButtonComponent,\n  ProfileButtonComponent,\n  IconButtonComponent,\n  CloseButtonComponent,\n  FollowButtonComponent,\n  SendTipsButtonComponent,\n  ReplyButtonComponent,\n  UpvoteButtonComponent,\n  DownvoteButtonComponent,\n  CommentButtonComponent,\n  SharedButtonComponent,\n  SendButtonComponent,\n  TxButtonComponent,\n  CreateEntityButtonComponent,\n  NotificationIconButtonComponent,\n  CreateSpaceButtonComponent,\n]"
            },
            {
                "name": "contentAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Content>",
                "defaultValue": "createEntityAdapter<Content>()"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "control",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/row/row.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  control: {\r\n    type: 'select',\r\n    options: ['start', 'end', 'center', 'normal', 'space-between'],\r\n  },\r\n}"
            },
            {
                "name": "control",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/column/column.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  control: {\n    type: 'select',\n    options: ['start', 'end', 'center', 'normal', 'space-between'],\n  },\n}"
            },
            {
                "name": "CreateEntityButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CreateEntityButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CreateSpaceButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/create-space-button/create-space.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CreateSpaceButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DownvoteButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SharedButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UpvoteButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TxButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentItemComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "dictionaryToArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(entities: Dictionary<T>, ids: string[]) => {\r\n  const array: T[] = [];\r\n\r\n  ids.forEach(id => {\r\n    if(entities.hasOwnProperty(id)) {\r\n      array.push(entities[id]!)\r\n    }\r\n  })\r\n\r\n  return array;\r\n}"
            },
            {
                "name": "DISABLE_ARG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  control: { disable: true },\r\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TxButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "domino",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('domino')"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentItemComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EditButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/edit-button/edit-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<EditButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  baseUrl: 'https://dev-subsocial-angular.codebridge.tech',\n  production: true,\n  ipfsUrl: `${baseNodeUrl}ipfs/read/ipfs/`,\n  domainUrl: 'http://localhost:4000/',\n  appName: 'Subsocial Angular',\n  substrateNodeUrl: `wss://${baseNodeAddress}rpc`,\n  offchainUrl: `${baseNodeUrl}offchain`,\n  addFileUrl: `${baseNodeUrl}offchain/v1/ipfs/addFile`,\n  ipfsNodeUrl: `${baseNodeUrl}ipfs/read`,\n  currency: 'SUB',\n  decimals: 11,\n  recommendedSpaceIds: [\n    '1001',\n    '1002',\n    '1003',\n    '1004',\n    '1005',\n    '1006',\n    '1017',\n    '1018',\n  ],\n  loadImageLimitMb: 2,\n  enableSessionKey: true,\n  offchainWs: `wss://${baseNodeUrl}notif-ws`,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  baseUrl: 'http://localhost:4200',\n  production: false,\n  ipfsUrl: `${baseNodeUrl}ipfs/read/ipfs/`,\n  domainUrl: 'http://localhost:4200/',\n  appName: 'Subsocial Angular',\n  substrateNodeUrl: `wss://${baseNodeAddress}rpc`,\n  offchainUrl: `${baseNodeUrl}offchain`,\n  offchainWs: `wss://${baseNodeUrl}notif-ws`,\n  addFileUrl: `${baseNodeUrl}offchain/v1/ipfs/addFile`,\n  ipfsNodeUrl: `${baseNodeUrl}ipfs/read`,\n  currency: 'SUB',\n  decimals: 11,\n  recommendedSpaceIds: [\n    '1001',\n    '1002',\n    '1003',\n    '1004',\n    '1005',\n    '1006',\n    '1017',\n    '1018',\n    '1022',\n    '1023',\n  ],\n  loadImageLimitMb: 2,\n  enableSessionKey: true,\n}"
            },
            {
                "name": "flatReaction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mapper/flatten.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(reaction: Reaction) => {\r\n  return {\r\n    id: reaction.id.toString(),\r\n    profileId: reaction.created.account.toString(),\r\n    isUpvote: reaction.kind.isUpvote,\r\n  } as FlatReaction;\r\n}"
            },
            {
                "name": "FollowButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FollowButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "followedAccountIdsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<FollowedAccountIdsStruct>",
                "defaultValue": "createEntityAdapter<FollowedAccountIdsStruct>()"
            },
            {
                "name": "followedAccountIdsReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialFollowedAccountIdsState,\r\n  on(getFollowedAccountIds, (state) => state),\r\n  on(upsertFollowedAccountIds, (state, { payload }) => {\r\n    return followedAccountIdsAdapter.upsertOne(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "followedSpaceIdsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<FollowedSpaceIdsStruct>",
                "defaultValue": "createEntityAdapter<FollowedSpaceIdsStruct>()"
            },
            {
                "name": "followedSpaceIdsReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialFollowedSpaceIdsState,\r\n  on(getFollowedSpaceIds, (state) => state),\r\n  on(upsertFollowedSpaceIds, (state, { payload }) => {\r\n    return followedSpaceIdsAdapter.upsertOne(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "FollowingButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FollowButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('fs')"
            },
            {
                "name": "getFollowedAccountIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Followed Account Ids] Get Followed Account Ids',\r\n  props<{ payload: { address: string } }>()\r\n)"
            },
            {
                "name": "getFollowedSpaceIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Followed Space Ids] Get Followed Space Ids',\r\n  props<{ payload: { address: string } }>()\r\n)"
            },
            {
                "name": "getGetMyPostReactionsByPostIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[My Post Reactions] My Post Reactions By Post Ids',\r\n  props<{ ids: Array<string> }>()\r\n)"
            },
            {
                "name": "getPostLink",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  spaceHandle: string | undefined,\r\n  title: string,\r\n  id: string,\r\n  spaceId: string\r\n): string => {\r\n  return `/${spaceHandle ? '@' + spaceHandle : spaceId}/${slug(title)}-${id}`;\r\n}"
            },
            {
                "name": "HiddenComment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HiddenContentComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HiddenPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HiddenContentComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HiddenSharedPostItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SharedPostItemComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HiddenSpace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HiddenContentComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<IconButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconRegistryProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  IconRegistryService,\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: registryIcons,\r\n    deps: [IconRegistryService],\r\n    multi: true,\r\n  },\r\n  BaseRef,\r\n]"
            },
            {
                "name": "Image",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AvatarComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "imageUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://app.subsocial.network/ipfs/ipfs/QmZfJmzeEQfp1WW7AUGkNSW6AL8ibdvoEyhRZubc3sVL6L'"
            },
            {
                "name": "initialContentState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ContentState",
                "defaultValue": "contentAdapter.getInitialState()"
            },
            {
                "name": "initialFollowedAccountIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FollowedAccountIdsState",
                "defaultValue": "followedAccountIdsAdapter.getInitialState()"
            },
            {
                "name": "initialFollowedSpaceIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FollowedSpaceIdsState",
                "defaultValue": "followedSpaceIdsAdapter.getInitialState()"
            },
            {
                "name": "initialLoaderState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/notification/loader.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "LoaderState",
                "defaultValue": "{\r\n  isLoading: false,\r\n}"
            },
            {
                "name": "initialMyAccountState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyAccountState",
                "defaultValue": "{\r\n  address: '',\r\n  blocked: false,\r\n  nonce: 0,\r\n}"
            },
            {
                "name": "initialMyPostReactionsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MyPostReactionsState",
                "defaultValue": "myPostReactionsAdapter.getInitialState()"
            },
            {
                "name": "initialOwnSpaceIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "OwnSpaceIdsState",
                "defaultValue": "ownSpaceIdsAdapter.getInitialState()"
            },
            {
                "name": "initialPostState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PostState",
                "defaultValue": "postAdapter.getInitialState()"
            },
            {
                "name": "initialProfileState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ProfileState",
                "defaultValue": "profileAdapter.getInitialState()"
            },
            {
                "name": "initialReplyIdState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ReplyIdState",
                "defaultValue": "replyIdAdapter.getInitialState()"
            },
            {
                "name": "initialSpaceState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SpaceState",
                "defaultValue": "spaceAdapter.getInitialState()"
            },
            {
                "name": "isNotEmptyOrNull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/rxjs-custom/operators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value: any) => {\r\n  if (typeof value === 'object') {\r\n    return Object.keys(value).length > 0;\r\n  } else if (Array.isArray(value)) {\r\n    return value.length > 0;\r\n  } else {\r\n    return !!value;\r\n  }\r\n}"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DownvoteButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SharedButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UpvoteButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LANG_LABELS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "KeyValuePair<string>",
                "defaultValue": "{\r\n  en: 'English',\r\n  ru: 'Русский',\r\n}"
            },
            {
                "name": "LINKS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/links.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  polkadotExt: 'https://polkadot.js.org/extension/',\n  chromeExt:\n    'https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd',\n  firefoxExt:\n    'https://addons.mozilla.org/en-US/firefox/addon/polkadot-js-extension/',\n  reactApp: 'https://dev-subsocial-react.codebridge.tech/',\n  vueApp: 'https://dev-subsocial-vue.codebridge.tech/',\n  subsocialApp: 'https://app.subsocial.network/',\n  documents: '',\n  github: 'https://github.com/dappforce/',\n  whatIsSubsocial: '',\n  twitter: '',\n  discord: '',\n  telegram: '',\n  megaphone: '',\n}"
            },
            {
                "name": "loaderReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/notification/loader.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialLoaderState,\r\n  on(setLoader, (state, { isLoading }) => {\r\n    return { ...state, isLoading };\r\n  })\r\n)"
            },
            {
                "name": "loadMyProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load My Profile By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadPostById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Load Post By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadPostsByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Load Posts By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
            },
            {
                "name": "loadProfileById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load Profile By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadProfilesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load Profiles By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
            },
            {
                "name": "loadReplyIdsByParentPostId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Reply Ids] Load ReplyIds By Parent Post Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadSpaceById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Load Space By Id',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadSpacesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Load Spaces By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
            },
            {
                "name": "loadSpaceSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Space] Load Spaces Success')"
            },
            {
                "name": "mainModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "__non_webpack_require__.main"
            },
            {
                "name": "mapPostDTOToPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mapper/post.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  post: any,\r\n  space: SpaceData | undefined,\r\n  profileContent: ProfileContent | undefined\r\n): Post => {\r\n  return {\r\n    id: post.struct.id,\r\n    ownerId: post.struct.ownerId,\r\n    ownerImageUrl: profileContent?.avatar || '',\r\n    spaceName: space?.content?.name || '',\r\n    title: post.content!.title,\r\n    summary: post.content!.summary,\r\n    imageUrl: post.content!.image,\r\n    createdAtTime: post.struct.createdAtTime,\r\n    repliesCount: post.struct.repliesCount,\r\n    hiddenRepliesCount: post.struct.hiddenRepliesCount,\r\n    visibleRepliesCount: post.struct.visibleRepliesCount,\r\n    sharesCount: post.struct.visibleRepliesCount,\r\n    upvotesCount: post.struct.upvotesCount,\r\n    downvotesCount: post.struct.downvotesCount,\r\n    isSharedPost: post.struct.isSharedPost,\r\n    isComment: post.struct.isComment,\r\n    isShowMore: post.content!.isShowMore,\r\n    ownerName: profileContent?.name || '',\r\n    postLink: getPostLink(\r\n      '',\r\n      post.content!.title\r\n        ? post.content!.title\r\n        : post.content!.summary.slice(0, 30),\r\n      post.struct.id,\r\n      post.struct.isComment ? 'comments' : post.struct.spaceId!\r\n    ),\r\n    hidden: post.struct.hidden,\r\n    spaceHidden: space === undefined || !!space?.struct.hidden,\r\n    body: post.content!.body,\r\n    tags: post.content!.tags,\r\n    spaceId: post.struct.spaceId,\r\n    link: post.content!.link,\r\n    sharedPostId: post.struct.sharedPostId,\r\n    spaceLink: '/' + space?.struct.id,\r\n    rootPostId: post.struct.rootPostId,\r\n    parentId: post.struct.parentId,\r\n  };\r\n}"
            },
            {
                "name": "mapPostToCommentItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mapper/comment.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  postStruct: CommentStruct,\n  profileContent: ProfileContent,\n  postContent: PostContent,\n  myPostReaction: MyPostReactions | undefined,\n  address: string\n) => {\n  return {\n    skipComment: postStruct.hidden && postStruct.ownerId !== address,\n    postId: postStruct.id,\n    rootPostId: postStruct.rootPostId,\n    ownerId: postStruct.ownerId,\n    profileName: profileContent?.name,\n    createdAtTime: postStruct.createdAtTime,\n    avatar: profileContent?.avatar,\n    hidden: postStruct.hidden,\n    commentText: postContent.body,\n    upvoteCount: postStruct.upvotesCount,\n    isMyComment: postStruct.ownerId === address,\n    downvoteCount: postStruct.downvotesCount,\n    replyCount: postStruct.repliesCount,\n    upvoteActive: myPostReaction?.kind === 'Upvote',\n    downvoteActive: myPostReaction?.kind === 'Downvote',\n    reactionId: myPostReaction?.reactionId,\n  } as CommentItemData;\n}"
            },
            {
                "name": "mapProfileDTOToProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mapper/profile.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  profileData: ProfileData | undefined,\r\n  id?: string\r\n) => {\r\n  return {\r\n    id: profileData?.struct.id || id,\r\n    followersCount: profileData?.struct.followersCount || 0,\r\n    followingAccountsCount: profileData?.struct.followingAccountsCount || 0,\r\n    followingSpacesCount: profileData?.struct.followingSpacesCount || 0,\r\n    about: profileData?.content?.about || '',\r\n    avatar: profileData?.content?.avatar || '',\r\n    name: profileData?.content?.name || '',\r\n    summary: profileData?.content?.summary || '',\r\n    isShowMore: profileData?.content?.isShowMore || false,\r\n  } as Profile;\r\n}"
            },
            {
                "name": "mapSpaceDTOToSpace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mapper/space.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(spaceData: SpaceData) => {\r\n  return {\r\n    id: spaceData.struct.id,\r\n    ownerId: spaceData.struct.ownerId,\r\n    isHidden: spaceData.struct.hidden,\r\n    name: spaceData.content?.name,\r\n    image: spaceData.content?.image,\r\n    followersCount: spaceData.struct.followersCount,\r\n    postsCount: spaceData.struct.postsCount,\r\n    spaceLink: '/' + spaceData.struct.id,\r\n    summary: spaceData.content?.summary,\r\n    about: spaceData.content?.about,\r\n    isShowMore: spaceData.content?.isShowMore,\r\n    tags: spaceData.content?.tags,\r\n    links: spaceData.content?.links,\r\n  } as Space;\r\n}"
            },
            {
                "name": "MarkdownEditor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MdeEditorComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MESSAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/messages.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  WAITING_TX_COMPLETE: 'Waiting for transaction to complete',\r\n}"
            },
            {
                "name": "METHODS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/query.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  accountFollowers: 'accountFollowers',\n  accountsFollowedByAccount: 'accountsFollowedByAccount',\n  spaceFollowers: 'spaceFollowers',\n  reactionIdsByPostId: 'reactionIdsByPostId',\n  postReactionIdByAccount: 'postReactionIdByAccount',\n  followSpace: 'followSpace',\n  unfollowSpace: 'unfollowSpace',\n  followAccount: 'followAccount',\n  unfollowAccount: 'unfollowAccount',\n  createPostReaction: 'createPostReaction',\n  deletePostReaction: 'deletePostReaction',\n  updatePostReaction: 'updatePostReaction',\n  createPost: 'createPost',\n  updatePost: 'updatePost',\n  createSpace: 'createSpace',\n  updateSpace: 'updateSpace',\n  createProfile: 'createProfile',\n  updateProfile: 'updateProfile',\n}"
            },
            {
                "name": "MODAL_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/size.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  MOBILE: {\n    width: '95%',\n    maxWidth: 'none',\n  },\n  DESKTOP: {\n    width: '500px',\n    maxWidth: '80vh',\n  },\n}"
            },
            {
                "name": "moduleFilename",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(mainModule && mainModule.filename) || ''"
            },
            {
                "name": "myAccountReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialMyAccountState,\r\n  on(setMyAccount, (state, { payload }) => {\r\n    return { ...payload };\r\n  })\r\n)"
            },
            {
                "name": "myPostReactionsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<MyPostReactions>",
                "defaultValue": "createEntityAdapter<MyPostReactions>()"
            },
            {
                "name": "myPostReactionsReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialMyPostReactionsState,\r\n  on(MyPostReactionsActions.getGetMyPostReactionsByPostIds, (state) => state),\r\n  on(MyPostReactionsActions.upsertMyPostReactions, (state, { payload }) => {\r\n    return myPostReactionsAdapter.upsertMany(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "NoContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/no-content/no-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NoContentComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NotificationButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/notification-icon-button/notification-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NotificationIconButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ownSpaceIdsAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<OwnSpaceIdsStruct>",
                "defaultValue": "createEntityAdapter<OwnSpaceIdsStruct>()"
            },
            {
                "name": "PALLETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/query.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  profileFollows: 'profileFollows',\n  spaceFollows: 'spaceFollows',\n  reactions: 'reactions',\n  posts: 'posts',\n  spaces: 'spaces',\n  profiles: 'profiles',\n}"
            },
            {
                "name": "Paragraph",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/text/paragraph/paragraph.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ParagraphComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: { include: ['type', 'size', 'width', 'label', '_isFollow'] },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/row/row.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['alignItem', 'justifyContent', 'margin', 'padding', 'v', 'h'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/column/column.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  controls: {\n    include: ['alignItem', 'justifyContent', 'margin', 'padding', 'v', 'h'],\n  },\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'commentForm',\r\n      'showSendButton',\r\n      'disabledButton',\r\n      'isSending',\r\n      'autofocus',\r\n      'type',\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['comment', 'isEdit'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'rootPostId',\r\n      'parentPostId',\r\n      'comments$',\r\n      'parentPost$',\r\n      'parentId',\r\n      'commentsCount$',\r\n      'isChildrenShow$',\r\n      'isShowInput',\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['hidden$', 'type', 'spaceHidden$'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['imageUrl', 'type', 'fileSizeLimit'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['tags', 'tagCtrl'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'autoFocus',\r\n      'placeholder',\r\n      'isToolbarHidden',\r\n      'height',\r\n      'isRequired',\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['space', 'isEdit', 'itemType', 'showHidden', 'isFollowed$'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['spaces', 'selectedSpace', 'isShowSpaceList'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['isRequired', 'label', 'error'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'postsCount',\r\n      'spaceId',\r\n      'spaceName',\r\n      'itemType',\r\n      'followersCount',\r\n      'profileId',\r\n      'link',\r\n      'address',\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  controls: {\n    include: ['postItemData', 'sharedPostItemData', 'isSharedPostHidden'],\n  },\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['postItemData', 'tagCtrl'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: ['accountData', 'tagCtrl'],\r\n  },\r\n}"
            },
            {
                "name": "params",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'avatarSrc',\r\n      'profileName',\r\n      'type',\r\n      'followingCount',\r\n      'followersCount',\r\n      'profileId',\r\n      'link',\r\n      'address',\r\n    ],\r\n  },\r\n}"
            },
            {
                "name": "path",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('path')"
            },
            {
                "name": "postAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Post>",
                "defaultValue": "createEntityAdapter<Post>()"
            },
            {
                "name": "PostCommentTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  id: '1002',\r\n  ownerId: '',\r\n  ownerImageUrl: '',\r\n  spaceName: 'Space',\r\n  title: '',\r\n  summary:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  imageUrl: '',\r\n  createdAtTime: 1641808542001,\r\n  repliesCount: 0,\r\n  hiddenRepliesCount: 0,\r\n  visibleRepliesCount: 0,\r\n  sharesCount: 0,\r\n  upvotesCount: 3,\r\n  downvotesCount: 0,\r\n  isSharedPost: false,\r\n  isComment: true,\r\n  isShowMore: false,\r\n  ownerName: 'Subsocial user',\r\n  postLink: '/1001/comment-post-210',\r\n  hidden: false,\r\n  spaceHidden: false,\r\n  body: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  tags: [],\r\n  spaceId: '1001',\r\n  spaceLink: '/1001',\r\n}"
            },
            {
                "name": "PostImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/post-image/post-image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostImageComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PostInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/post-info/post-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostInfoComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PostItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostItemComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "postReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialPostState,\r\n  on(loadPostsByIds, (state) => state),\r\n  on(upsertPosts, (state, { payload }) => {\r\n    return postAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(upsertPost, (state, { payload }) => {\r\n    return postAdapter.upsertOne(payload, state);\r\n  }),\r\n  on(updatePost, (state, { payload }) => {\r\n    return postAdapter.updateOne(payload, state);\r\n  }),\r\n  on(switchIsChildrenCommentShow, (state) => state),\r\n  on(addNewCommentPost, (state) => state)\r\n)"
            },
            {
                "name": "PostTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  id: '1001',\r\n  ownerId: '',\r\n  ownerImageUrl: '',\r\n  spaceName: 'Subsocial Space',\r\n  title: 'Lorem Ipsum is simply dummy text of the printing ',\r\n  summary:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  imageUrl: '',\r\n  createdAtTime: 1641808542001,\r\n  repliesCount: 0,\r\n  hiddenRepliesCount: 0,\r\n  visibleRepliesCount: 0,\r\n  sharesCount: 0,\r\n  upvotesCount: 3,\r\n  downvotesCount: 0,\r\n  isSharedPost: false,\r\n  isComment: true,\r\n  isShowMore: false,\r\n  ownerName: 'Subsocial user',\r\n  postLink: '/1001/comment-post-210',\r\n  hidden: false,\r\n  spaceHidden: false,\r\n  body: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  tags: [],\r\n  spaceId: '1001',\r\n  spaceLink: '/1001',\r\n}"
            },
            {
                "name": "PostWithHiddenSpace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HiddenContentComponent>",
                "defaultValue": "Template.bind(\r\n  {}\r\n)"
            },
            {
                "name": "profileAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Profile>",
                "defaultValue": "createEntityAdapter<Profile>()"
            },
            {
                "name": "ProfileButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ProfileInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileInfoComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "profileReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialProfileState,\r\n  on(upsertProfiles, (state, { payload }) => {\r\n    return profileAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(upsertProfile, (state, { payload }) => {\r\n    return profileAdapter.upsertOne(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "ProfileTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  id: 'HhQWPkEpXLHFhMAQieAH1wtfVRNHWZ5snhfFeBe',\r\n  followersCount: 1,\r\n  followingAccountsCount: 3,\r\n  followingSpacesCount: 9,\r\n  about: 'Test',\r\n  avatar: 'HhQWPkEpXLHFhMAQieAH1wtfVRNHWZ5snhfFeBe',\r\n  name: 'Subsosial User',\r\n  summary: 'Test',\r\n  isShowMore: false,\r\n}"
            },
            {
                "name": "QrButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/qr-button/qr-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<QrButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialContentState,\r\n  on(upsertContents, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertMany(payload, state) : state\r\n  ),\r\n  on(upsertContent, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertOne(payload, state) : state\r\n  )\r\n)"
            },
            {
                "name": "ReplyButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/reply-button/reply-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ReplyButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "replyIdAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ReplyIds>",
                "defaultValue": "createEntityAdapter<ReplyIds>()"
            },
            {
                "name": "replyIdsReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialReplyIdState,\r\n  on(loadReplyIdsByParentPostId, (state) => state),\r\n  on(upsertReplyIds, (state, { payload }) => {\r\n    return replyIdAdapter.upsertOne(payload, state);\r\n  }),\r\n  on(updateReplyIds, (state, { payload }) => {\r\n    return replyIdAdapter.updateOne(payload, state);\r\n  })\r\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Round",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ImageLoaderComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RoundWithImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ImageLoaderComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Row",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/row/row.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RowComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "saveContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Content] Save Content',\r\n  props<{ payload: Content }>()\r\n)"
            },
            {
                "name": "saveContents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Content] Save Contents',\r\n  props<{ payload: Array<Content> }>()\r\n)"
            },
            {
                "name": "saveMyProfileSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load My Profile Success'\r\n)"
            },
            {
                "name": "saveProfilesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load Profiles Success'\r\n)"
            },
            {
                "name": "saveProfileSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Load Profile Success'\r\n)"
            },
            {
                "name": "SbDeviceRegistry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  DeviceService,\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: deviceRegistry,\r\n    deps: [DeviceService],\r\n    multi: true,\r\n  },\r\n]"
            },
            {
                "name": "SbRouterModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "RouterModule.forRoot([], { useHash: true })"
            },
            {
                "name": "SbStoreModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  StoreModule.forRoot(appReducers, {}),\r\n  EffectsModule.forRoot([]),\r\n]"
            },
            {
                "name": "SbTemplateId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'3t8GGfcxxXiTUmGiTKp2jS611wucGs4K7zvr2UmXrawoWYLD'"
            },
            {
                "name": "ScrollContainer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/scroll/scroll-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ScrollComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SeeMore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/text/see-more/see-more.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SeeMoreComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAllContents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectContentState, selectAll)"
            },
            {
                "name": "selectAllPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectPostState, selectAll)"
            },
            {
                "name": "selectAllPReplyIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectReplyIdsState,\n  selectAll\n)"
            },
            {
                "name": "selectAllProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectProfileState, selectAll)"
            },
            {
                "name": "selectAllSpaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectSpaceState, selectAll)"
            },
            {
                "name": "selectCommentPostsByPostId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\n  createSelector(\n    selectReplyIdsEntities,\n    selectPostEntities,\n    (replyIds, postEntities) => {\n      const postIds = replyIds[id];\n      const posts: Post[] = [];\n\n      postIds?.replyIds.forEach((id) => {\n        const post = postEntities[id];\n\n        post ? posts.push(post) : null;\n      });\n\n      return posts;\n    }\n  )"
            },
            {
                "name": "selectContentEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectContentState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectContentState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ContentState>('contents')"
            },
            {
                "name": "selectEntitiesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/utils/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(entities: Dictionary<T>, ids: string[]) => {\r\n  const selectedEntities: Dictionary<T> = {};\r\n  ids.forEach((id) => {\r\n    const post = entities[id];\r\n    if(entities.hasOwnProperty(id)) {\r\n      selectedEntities[id] = post;\r\n    }\r\n  });\r\n\r\n  return selectedEntities;\r\n}"
            },
            {
                "name": "selectFollowedAccountIdsByCurrentAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectFollowedSpaceIdsEntities,\r\n  selectMyAccountAddress,\r\n  (entities, address) => {\r\n    return entities ? entities[address]?.followingAccountIds || [] : [];\r\n  }\r\n)"
            },
            {
                "name": "selectFollowedAccountIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<FollowedAccountIdsState>('followedAccountIds')"
            },
            {
                "name": "selectFollowedSpaceIdsByCurrentAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFollowedSpaceIdsEntities,\n  selectMyAccountAddress,\n  (entities, address) => {\n    return entities ? entities[address]?.followingSpaceIds || [] : [];\n  }\n)"
            },
            {
                "name": "selectFollowedSpaceIdsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFollowedSpaceIdsState,\n  selectEntities\n)"
            },
            {
                "name": "selectFollowedSpaceIdsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectFollowedAccountIdsState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectFollowedSpaceIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<FollowedSpaceIdsState>('followedSpaceIds')"
            },
            {
                "name": "selectLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/notification/loader.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<LoaderState>('loader')"
            },
            {
                "name": "selectLoaderStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/notification/loader.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectLoader,\r\n  (loader) => loader.isLoading\r\n)"
            },
            {
                "name": "selectMyAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<MyAccountState>('myAccount')"
            },
            {
                "name": "selectMyAccountAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyAccount,\r\n  (myAccount) => {\r\n    return myAccount.address;\r\n  }\r\n)"
            },
            {
                "name": "selectMyAccountProfileData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectMyAccountAddress,\n  selectProfileEntities,\n  (address, profileEntities) => profileEntities[address]\n)"
            },
            {
                "name": "selectMyPostReactions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<MyPostReactionsState>('myPostReactions')"
            },
            {
                "name": "selectMyPostReactionsByPostId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  address: string,\r\n  postId: string\r\n) =>\r\n  createSelector(\r\n    selectMyPostReactionsEntities,\r\n    (myPostReactionsEntities) => myPostReactionsEntities[address + '-' + postId]\r\n  )"
            },
            {
                "name": "selectMyPostReactionsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectTotal\r\n)"
            },
            {
                "name": "selectMyPostReactionsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectMyPostReactionsIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectIds\r\n)"
            },
            {
                "name": "selectNonExistingPostIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(newIds: string[]) =>\r\n  createSelector(selectPostIds, (postIds) => {\r\n    return difference(newIds, postIds as string[]);\r\n  })"
            },
            {
                "name": "selectPostById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\r\n  createSelector(selectPostEntities, (postEntities) => postEntities[id])"
            },
            {
                "name": "selectPostEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectPostState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectPostIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectPostState, selectIds)"
            },
            {
                "name": "selectPostsByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectPostEntities, (postEntities) =>\r\n    dictionaryToArray<Post>(postEntities, ids)\r\n  )"
            },
            {
                "name": "selectPostsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectPostState, selectTotal)"
            },
            {
                "name": "selectPostState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<PostState>('posts')"
            },
            {
                "name": "selectPostsWithAllDetailsByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectPostEntities, (postEntities) =>\r\n    selectEntitiesByIds<Post>(postEntities, ids)\r\n  )"
            },
            {
                "name": "selectProfileById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\n  createSelector(\n    selectProfileEntities,\n    (profileEntities) => profileEntities[id]\n  )"
            },
            {
                "name": "selectProfileEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProfileState,\n  selectEntities\n)"
            },
            {
                "name": "selectProfilesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\n  createSelector(selectProfileEntities, (profileEntities) =>\n    dictionaryToArray<Profile>(profileEntities, ids)\n  )"
            },
            {
                "name": "selectProfilesCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProfileState,\n  selectTotal\n)"
            },
            {
                "name": "selectProfileState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ProfileState>('profiles')"
            },
            {
                "name": "selectReplyIdsByPostId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\n  createSelector(selectReplyIdsEntities, (replyEntities) => replyEntities[id])"
            },
            {
                "name": "selectReplyIdsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectReplyIdsState,\n  selectTotal\n)"
            },
            {
                "name": "selectReplyIdsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectReplyIdsState,\n  selectEntities\n)"
            },
            {
                "name": "selectReplyIdsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ReplyIdState>('replyIds')"
            },
            {
                "name": "selectSpaceById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string) =>\r\n  createSelector(selectSpaceEntities, (spaceEntities) => {\r\n    return spaceEntities[id];\r\n  })"
            },
            {
                "name": "selectSpaceEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectSpaceState,\r\n  selectEntities\r\n)"
            },
            {
                "name": "selectSpaceEntitiesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectSpaceEntities, (spaceEntities) => {\r\n    const spaceDataArray: KeyValuePair<Space> = {};\r\n    ids.forEach((id) => {\r\n      const space = spaceEntities[id];\r\n      space ? (spaceDataArray[id] = space) : null;\r\n    });\r\n\r\n    return spaceDataArray;\r\n  })"
            },
            {
                "name": "selectSpacesByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectSpaceEntities, (spaceEntities) =>\r\n    dictionaryToArray<Space>(spaceEntities, ids))"
            },
            {
                "name": "selectSpacesCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectSpaceState, selectTotal)"
            },
            {
                "name": "selectSpaceState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<SpaceState>('spaces')"
            },
            {
                "name": "selectUserInfoByIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ids: string[]) =>\n  createSelector(\n    selectProfileEntities,\n    selectFollowedAccountIdsByCurrentAccount,\n    (profileEntities, followedAccountsIds) => {\n      const usersInfo: UserInfo[] = [];\n      ids.forEach((id) => {\n        const profile = profileEntities[id];\n        if (profile) {\n          usersInfo.push({\n            userName: profile?.name,\n            address: profile.id,\n            avatarSrc: profile?.avatar,\n            id: profile.id,\n            isFollowing: followedAccountsIds.indexOf(profile.id) >= 0,\n          });\n        }\n      });\n\n      return usersInfo;\n    }\n  )"
            },
            {
                "name": "Sending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TxButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SendTipsButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SendTipsButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SendTokensButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SendTokensButtonComponent>",
                "defaultValue": "Template.bind(\r\n  {}\r\n)"
            },
            {
                "name": "setLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/notification/notification.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Loader] Set Loader',\r\n  props<{ isLoading: boolean }>()\r\n)"
            },
            {
                "name": "setMyAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-account/my-account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[My Account] Set My Account',\r\n  props<{ payload: MyAccountState }>()\r\n)"
            },
            {
                "name": "SharedPostItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SharedPostItemComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SharedPostTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  id: '1002',\r\n  ownerId: '',\r\n  ownerImageUrl: '',\r\n  spaceName: 'Subsocial Space',\r\n  title: '',\r\n  summary:\r\n    'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',\r\n  imageUrl: '',\r\n  createdAtTime: 1641808542001,\r\n  repliesCount: 0,\r\n  hiddenRepliesCount: 0,\r\n  visibleRepliesCount: 0,\r\n  sharesCount: 0,\r\n  upvotesCount: 3,\r\n  downvotesCount: 0,\r\n  isSharedPost: true,\r\n  isComment: true,\r\n  isShowMore: false,\r\n  ownerName: 'Subsocial user',\r\n  postLink: '/1001/comment-post-210',\r\n  hidden: false,\r\n  spaceHidden: false,\r\n  body: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',\r\n  tags: [],\r\n  spaceId: '1002',\r\n  spaceLink: '/1002',\r\n}"
            },
            {
                "name": "SignInButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SignOutButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SignOutButtonComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "spaceAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Space>",
                "defaultValue": "createEntityAdapter<Space>()"
            },
            {
                "name": "SpaceInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpaceInfoComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SpaceItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpaceItemComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "spaceReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialSpaceState,\r\n  on(SpaceActions.loadSpacesByIds, (state) => state),\r\n\r\n  on(SpaceActions.upsertSpaces, (state, { payload }) => {\r\n    return payload ? spaceAdapter.upsertMany(payload, state) : state;\r\n  }),\r\n\r\n  on(SpaceActions.upsertSpace, (state, { payload }) => {\r\n    return payload ? spaceAdapter.upsertOne(payload, state) : state;\r\n  }),\r\n  on(SpaceActions.updateSpace, (state, { payload }) => {\r\n    return spaceAdapter.updateOne(payload, state);\r\n  }),\r\n  on(SpaceActions.loadSpaceById, (state) => state)\r\n)"
            },
            {
                "name": "spaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Array(5).fill(null).map((_, i) => {\r\n  const space = JSON.parse(JSON.stringify(SpaceTemplate));\r\n  const index = (i + 1).toString();\r\n  space.id = index;\r\n  space.name = space.name + ' ' + index;\r\n  return space;\r\n})"
            },
            {
                "name": "SpaceSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpaceSelectComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SpaceTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/storybook.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  id: '1001',\r\n  ownerId: '3t8GGfcxxXiTUmGiTKp2jS611wucGs4K7zvr2UmXrawoWYLD',\r\n  isHidden: false,\r\n  name: 'Space name',\r\n  image: '',\r\n  followersCount: 4,\r\n  postsCount: 2,\r\n  spaceLink: '/1001',\r\n  summary:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\r\n  about:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\r\n  isShowMore: true,\r\n  tags: ['subsocial', 'tags'],\r\n  links: [],\r\n}"
            },
            {
                "name": "Square",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ImageLoaderComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SquareWithImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ImageLoaderComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "STATUS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  FOLLOW: 'follow',\n  FOLLOWING: 'following',\n}"
            },
            {
                "name": "STORAGE_KEYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/storage.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  accountId: 'accountId',\r\n  lang: 'lang',\r\n}"
            },
            {
                "name": "subscription",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Subscription()"
            },
            {
                "name": "switchIsChildrenCommentShow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Switch Is Children Comment Show',\r\n  props<{ payload: { id: string; open?: boolean } }>()\r\n)"
            },
            {
                "name": "Tag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/tag/tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TagComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "tagCtrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FormControl('')"
            },
            {
                "name": "TagInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TagInputComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "fs\r\n  .readFileSync('dist/subsocial-angular/browser/index.html')\r\n  .toString()"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/address/address.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AddressComponent>",
                "defaultValue": "(args: AddressComponent) => ({\r\n  component: AddressComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AvatarComponent>",
                "defaultValue": "(args: AvatarComponent) => ({\r\n  component: AvatarComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/comment-button/comment-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentButtonComponent>",
                "defaultValue": "(\r\n  args: CommentButtonComponent\r\n) => ({\r\n  component: CommentButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CreateEntityButtonComponent>",
                "defaultValue": "(\r\n  args: CreateEntityButtonComponent\r\n) => ({\r\n  component: CreateEntityButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DownvoteButtonComponent>",
                "defaultValue": "(\r\n  args: DownvoteButtonComponent\r\n) => ({\r\n  component: DownvoteButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/close-button/close-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CloseButtonComponent>",
                "defaultValue": "(args: CloseButtonComponent) => ({\r\n  component: CloseButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/create-space-button/create-space.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CreateSpaceButtonComponent>",
                "defaultValue": "(\r\n  args: CreateSpaceButtonComponent\r\n) => ({\r\n  component: CreateSpaceButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<IconButtonComponent>",
                "defaultValue": "(args: IconButtonComponent) => ({\r\n  component: IconButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/edit-button/edit-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<EditButtonComponent>",
                "defaultValue": "(args: EditButtonComponent) => ({\r\n  component: EditButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FollowButtonComponent>",
                "defaultValue": "(\r\n  args: FollowButtonComponent\r\n) => ({\r\n  component: FollowButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileButtonComponent>",
                "defaultValue": "(\r\n  args: ProfileButtonComponent\r\n) => ({\r\n  component: ProfileButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/qr-button/qr-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<QrButtonComponent>",
                "defaultValue": "(args: QrButtonComponent) => ({\r\n  component: QrButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/notification-icon-button/notification-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NotificationIconButtonComponent>",
                "defaultValue": "(\r\n  args: NotificationIconButtonComponent\r\n) => ({\r\n  component: NotificationIconButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SendTipsButtonComponent>",
                "defaultValue": "(\r\n  args: SendTipsButtonComponent\r\n) => ({\r\n  component: SendTipsButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SharedButtonComponent>",
                "defaultValue": "(\r\n  args: SharedButtonComponent\r\n) => ({\r\n  component: SharedButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/reply-button/reply-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ReplyButtonComponent>",
                "defaultValue": "(args: ReplyButtonComponent) => ({\r\n  component: ReplyButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SendTokensButtonComponent>",
                "defaultValue": "(\r\n  args: SendTokensButtonComponent\r\n) => ({\r\n  component: SendTokensButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SignOutButtonComponent>",
                "defaultValue": "(\r\n  args: SignOutButtonComponent\r\n) => ({\r\n  component: SignOutButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UpvoteButtonComponent>",
                "defaultValue": "(\r\n  args: UpvoteButtonComponent\r\n) => ({\r\n  component: UpvoteButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TxButtonComponent>",
                "defaultValue": "(args: TxButtonComponent) => ({\r\n  component: TxButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/balance/tokens/tokens.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TokensComponent>",
                "defaultValue": "(args: TokensComponent) => ({\r\n  component: TokensComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/write-post-button/write-post-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<WritePostButtonComponent>",
                "defaultValue": "(\r\n  args: WritePostButtonComponent\r\n) => ({\r\n  component: WritePostButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/row/row.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RowComponent>",
                "defaultValue": "(args: RowComponent) => ({\r\n  component: RowComponent,\r\n  props: args,\r\n  template: `\r\n    <app-row class=\"w100\" style=\"height: 100%\">\r\n      <div>Element1</div>\r\n      <div>Element2</div>\r\n      <div>Element3</div>\r\n    </app-row>`,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/column/column.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ColumnComponent>",
                "defaultValue": "(args: ColumnComponent) => ({\n  component: ColumnComponent,\n  props: args,\n  template: `\n    <app-column style=\"height: 100%\">\n      <div>Element1</div>\n      <div>Element2</div>\n      <div>Element3</div>\n    </app-column>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentInputComponent>",
                "defaultValue": "(\r\n  args: CommentInputComponent\r\n) => ({\r\n  component: CommentInputComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/containers/scroll/scroll-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ScrollComponent>",
                "defaultValue": "(args: ScrollComponent) => ({\r\n  component: ScrollComponent,\r\n  props: args,\r\n  template: `\r\n    <app-scroll style=\"max-height: 95px; display: block;\" class=\"w100\">\r\n      <div>Element1</div>\r\n      <div>Element2</div>\r\n      <div>Element3</div>\r\n      <div>Element4</div>\r\n      <div>Element5</div>\r\n      <div>Element6</div>\r\n      <div>Element7</div>\r\n      <div>Element8</div>\r\n      <div>Element9</div>\r\n      <div>Element10</div>\r\n    </app-scroll>`,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentItemComponent>",
                "defaultValue": "(args: CommentItemComponent) => ({\r\n  component: CommentItemComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comments/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentsComponent>",
                "defaultValue": "(args: CommentsComponent) => ({\r\n  component: CommentsComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommentListComponent>",
                "defaultValue": "(args: CommentListComponent) => ({\r\n  component: CommentListComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HiddenContentComponent>",
                "defaultValue": "(\r\n  args: HiddenContentComponent\r\n) => ({\r\n  component: HiddenContentComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/post-image/post-image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostImageComponent>",
                "defaultValue": "(args: PostImageComponent) => ({\r\n  component: PostImageComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/content/no-content/no-content.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NoContentComponent>",
                "defaultValue": "(args: NoContentComponent) => ({\r\n  component: NoContentComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ImageLoaderComponent>",
                "defaultValue": "(args: ImageLoaderComponent) => ({\r\n  component: ImageLoaderComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TagInputComponent>",
                "defaultValue": "(args: TagInputComponent) => ({\r\n  component: TagInputComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MdeEditorComponent>",
                "defaultValue": "(args: MdeEditorComponent) => ({\r\n  component: MdeEditorComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/tag/tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TagComponent>",
                "defaultValue": "(args: TagComponent) => ({\r\n  component: TagComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpaceItemComponent>",
                "defaultValue": "(args: SpaceItemComponent) => ({\r\n  component: SpaceItemComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpaceSelectComponent>",
                "defaultValue": "(args: SpaceSelectComponent) => ({\r\n  component: SpaceSelectComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TextInputComponent>",
                "defaultValue": "(args: TextInputComponent) => ({\r\n  component: TextInputComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpaceInfoComponent>",
                "defaultValue": "(args: SpaceInfoComponent) => ({\r\n  component: SpaceInfoComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/post-info/post-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostInfoComponent>",
                "defaultValue": "(args: PostInfoComponent) => ({\r\n  component: PostInfoComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SharedPostItemComponent>",
                "defaultValue": "(\n  args: SharedPostItemComponent\n) => ({\n  component: SharedPostItemComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PostItemComponent>",
                "defaultValue": "(args: PostItemComponent) => ({\r\n  component: PostItemComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AccountListItemComponent>",
                "defaultValue": "(\r\n  args: AccountListItemComponent\r\n) => ({\r\n  component: AccountListItemComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileInfoComponent>",
                "defaultValue": "(args: ProfileInfoComponent) => ({\r\n  component: ProfileInfoComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/text/paragraph/paragraph.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ParagraphComponent>",
                "defaultValue": "(args: ParagraphComponent) => ({\r\n  component: ParagraphComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/text/see-more/see-more.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SeeMoreComponent>",
                "defaultValue": "(args: SeeMoreComponent) => ({\r\n  component: SeeMoreComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/text/title/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TitleComponent>",
                "defaultValue": "(args: TitleComponent) => ({\r\n  component: TitleComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TextInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TextInputComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TextInputError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TextInputComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/text/title/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TitleComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Tokens",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/balance/tokens/tokens.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TokensComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TRANSFER_KEYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/transfer-keys.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  POST_DATA: 'post_data',\r\n  SPACE_DATA: 'space_data',\r\n}"
            },
            {
                "name": "TYPE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  SPACE: 'space',\n  PROFILE: 'profile',\n}"
            },
            {
                "name": "upsertContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Content] Upsert Content',\r\n  props<{ payload: Content }>()\r\n)"
            },
            {
                "name": "upsertContents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Content] Upsert Contents',\r\n  props<{ payload: Array<Content> }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/content/content.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "contentAdapter.getSelectors()"
            },
            {
                "name": "upsertFollowedSpaceIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Followed Space Ids] Upsert Followed Space Ids',\r\n  props<{ payload: FollowedSpaceIdsStruct }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "followedSpaceIdsAdapter.getSelectors()"
            },
            {
                "name": "upsertMyPostReactions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[My Post Reactions] Upsert My Post Reactions',\r\n  props<{ payload: Array<MyPostReactions> }>()\r\n)"
            },
            {
                "name": "win",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "domino.createWindow(template)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "myPostReactionsAdapter.getSelectors()"
            },
            {
                "name": "updatePost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Update Post',\r\n  props<{ payload: Update<Post> }>()\r\n)"
            },
            {
                "name": "updateSpace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Update Space',\r\n  props<{ payload: Update<Space> }>()\r\n)"
            },
            {
                "name": "upsertFollowedAccountIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Followed Account Ids] Upsert Followed Account Ids',\r\n  props<{ payload: FollowedAccountIdsStruct }>()\r\n)"
            },
            {
                "name": "upsertPost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Upsert Post',\r\n  props<{ payload: Post }>()\r\n)"
            },
            {
                "name": "upsertPosts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Post] Upsert Posts',\r\n  props<{ payload: Array<Post> }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/post/post.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "postAdapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "followedAccountIdsAdapter.getSelectors()"
            },
            {
                "name": "upsertSpace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Upsert Space',\r\n  props<{ payload: Space | undefined }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "spaceAdapter.getSelectors()"
            },
            {
                "name": "updateReplyIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Reply Ids] Update Reply Ids',\r\n  props<{ payload: Update<ReplyIds> }>()\r\n)"
            },
            {
                "name": "upsertReplyIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Reply Ids] Upsert Reply Ids',\r\n  props<{ payload: ReplyIds }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/reply-id/reply-id.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "replyIdAdapter.getSelectors()"
            },
            {
                "name": "upsertProfile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Upsert Profile',\r\n  props<{ payload: Profile }>()\r\n)"
            },
            {
                "name": "upsertProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Profile] Upsert Profiles',\r\n  props<{ payload: Array<Profile> }>()\r\n)"
            },
            {
                "name": "upsertSpaces",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/space/space.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Space] Upsert Spaces',\r\n  props<{ payload: Array<Space> }>()\r\n)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/profile/profile.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "profileAdapter.getSelectors()"
            },
            {
                "name": "WithoutImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/avatar/avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AvatarComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WritePostButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui-lib/buttons/write-post-button/write-post-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<WritePostButtonComponent>",
                "defaultValue": "Template.bind(\r\n  {}\r\n)"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "express.Express"
            },
            {
                "name": "contentReducer",
                "file": "src/app/state/content/content.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "deviceRegistry",
                "file": "src/app/core/constants/storybook.const.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "DeviceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "followedAccountIdsReducer",
                "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "followedSpaceIdsReducer",
                "file": "src/app/state/followed-space-ids/followed-space-ids.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initApi",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SubsocialApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "loaderReducer",
                "file": "src/app/state/notification/loader.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "myAccountReducer",
                "file": "src/app/state/my-account/my-account.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "myPostReactionsReducer",
                "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "postReducer",
                "file": "src/app/state/post/post.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "profileReducer",
                "file": "src/app/state/profile/profile.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "registryIcons",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "IconRegistryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "IconRegistryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "replyIdReducer",
                "file": "src/app/state/reply-id/reply-id.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "run",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "void"
            },
            {
                "name": "spaceReducer",
                "file": "src/app/state/space/space.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SSRLoadData",
                "file": "src/app/core/decorators/ssr-load-data.decorator.tw.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "takeValueOnce",
                "file": "src/app/core/rxjs-custom/operators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "source$",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "source$",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AccountData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "AccountRawData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ActivityType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"notifications\" | \"feed\"",
                "file": "src/app/notification/services/notification.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "AddReplyIdProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/reply-id/reply-id.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "AddressSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "src/app/core/types/address-size.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "AlignType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"start\" | \"end\" | \"center\" | \"normal\" | \"space-between\"",
                "file": "src/app/core/base-component/box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "Balance",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"medium\" | \"large\"",
                "file": "src/app/ui-lib/buttons/tx-button/tx-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ButtonWidth",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"full\" | \"static\"",
                "file": "src/app/ui-lib/buttons/tx-button/tx-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "ChooseSpaceModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/ui-lib/modal-dialogs/choose-space-modal-dialog/choose-space-modal-dialog.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "CommentItemData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/comment-data.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "CommentPostData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/post/post/post.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ConnectionModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Content",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/types/content.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "EditSpaceFormErrors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/space/edit-space/edit-space.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "EntityListData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/entity-data.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ExtrinsicProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/base-component/base-tx.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FetchSubstrateMultiProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/services/subsocial-api.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FetchSubstrateProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/services/subsocial-api.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FlatReaction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/mapper/flatten.map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FollowButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"medium\" | \"large\"",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "FollowButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"space\" | \"profile\"",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "FollowButtonWidth",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"full\" | \"static\"",
                "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "FollowedAccountIdsStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FollowedSpaceIdsStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "FollowersModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "HasHandle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/space/space-list-item.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ImageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"square\" | \"full\" | \"notification\"",
                "file": "src/app/core/types/image.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "InitialVoteStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/ui-lib/action-panel/action-panel.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "IpfsContentProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/services/transaction.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "LanguageMenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "LoadEntitiesProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "MenuItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/ui-lib/menu/left-side-menu/left-side-menu.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "MyPostReactions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "NotificationInfoProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/notification/notification-page/notification-page.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "NotificationItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/notification/notification-page/notification-page.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "OperationType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/ui-lib/action-panel/action-panel.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "OptionButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"post\" | \"space\" | \"comment\"",
                "file": "src/app/core/types/option-button.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "OwnSpaceIdsStruct",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "PolkadotAccount",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/account.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "PostFormErrors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/post/edit-post/edit-post.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Profile",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/profile/profile.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ProfileComponentData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/profile-component-data.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ReactionModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ReplyIds",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/reply-id.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "ScrollProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/scroll-props.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SignInModalData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/dialog-modal-data.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SignMessageProps",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/notification/services/notification.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SimpleSnackBarOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Space",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/state/space/space.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SpaceContentExtend",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/space/space-list-item.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SpaceInfoType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"medium\" | \"large\"",
                "file": "src/app/core/types/space-info.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "SpaceListItemData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/space/space-list-item.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Tabs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"spaces\" | \"posts\"",
                "file": "src/app/core/types/tabs.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "TagSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\" | \"huge\"",
                "file": "src/app/core/types/tag-size.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "TitleSizeType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "src/app/core/types/title.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "TransformData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/transform-dto.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "TransformDataArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/transform-dto.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "TransformPostWithAllDetails",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/types/transform-dto.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Type",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"edit\" | \"new\"",
                "file": "src/app/account/edit-profile/edit-profile.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "UserInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/user-info.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "UserListType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"follow\" | \"sub\"",
                "file": "src/app/core/types/user-list.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "VisibleOperationType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"post\" | \"space\"",
                "file": "src/app/core/base-component/base-visible-tx.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            },
            {
                "name": "VoteIconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"upvote\" | \"downvote\"",
                "file": "src/app/core/types/vote-icon.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            }
        ],
        "enumerations": [
            {
                "name": "ACCOUNT_STATUS",
                "childs": [
                    {
                        "name": "INIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EXTENSION_NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ACCOUNTS_NOT_FOUND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "UNAUTHORIZED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AUTHORIZED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/services/account.service.ts"
            },
            {
                "name": "FORM_STATUS",
                "childs": [
                    {
                        "name": "VALID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VALID"
                    },
                    {
                        "name": "INVALID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "INVALID"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enums/common.ts"
            },
            {
                "name": "KIND",
                "childs": [
                    {
                        "name": "UPVOTE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Upvote"
                    },
                    {
                        "name": "DOWNVOTE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Downvote"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/constants/query.const.ts"
            }
        ],
        "groupedVariables": {
            "server.ts": [
                {
                    "name": "__non_webpack_require__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeRequire"
                },
                {
                    "name": "domino",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('domino')"
                },
                {
                    "name": "fs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('fs')"
                },
                {
                    "name": "mainModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "__non_webpack_require__.main"
                },
                {
                    "name": "moduleFilename",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(mainModule && mainModule.filename) || ''"
                },
                {
                    "name": "path",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('path')"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "fs\r\n  .readFileSync('dist/subsocial-angular/browser/index.html')\r\n  .toString()"
                },
                {
                    "name": "win",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "domino.createWindow(template)"
                }
            ],
            "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts": [
                {
                    "name": "AccountListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AccountListItemComponent>",
                    "defaultValue": "Template.bind(\r\n  {}\r\n)"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['accountData', 'tagCtrl'],\r\n  },\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AccountListItemComponent>",
                    "defaultValue": "(\r\n  args: AccountListItemComponent\r\n) => ({\r\n  component: AccountListItemComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts": [
                {
                    "name": "Active",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DownvoteButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DownvoteButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DownvoteButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DownvoteButtonComponent>",
                    "defaultValue": "(\r\n  args: DownvoteButtonComponent\r\n) => ({\r\n  component: DownvoteButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts": [
                {
                    "name": "Active",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UpvoteButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UpvoteButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UpvoteButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UpvoteButtonComponent>",
                    "defaultValue": "(\r\n  args: UpvoteButtonComponent\r\n) => ({\r\n  component: UpvoteButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/post/post.actions.ts": [
                {
                    "name": "addNewCommentPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Add New Comment Post',\r\n  props<{ payload: AddReplyIdProps }>()\r\n)"
                },
                {
                    "name": "loadPostById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Load Post By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadPostsByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Load Posts By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
                },
                {
                    "name": "switchIsChildrenCommentShow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Switch Is Children Comment Show',\r\n  props<{ payload: { id: string; open?: boolean } }>()\r\n)"
                },
                {
                    "name": "updatePost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Update Post',\r\n  props<{ payload: Update<Post> }>()\r\n)"
                },
                {
                    "name": "upsertPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Upsert Post',\r\n  props<{ payload: Post }>()\r\n)"
                },
                {
                    "name": "upsertPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Post] Upsert Posts',\r\n  props<{ payload: Array<Post> }>()\r\n)"
                }
            ],
            "src/app/state/reply-id/reply-id.actions.ts": [
                {
                    "name": "addReplyId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Reply Ids] Add Reply Id To Post',\r\n  props<{ payload: AddReplyIdProps }>()\r\n)"
                },
                {
                    "name": "loadReplyIdsByParentPostId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Reply Ids] Load ReplyIds By Parent Post Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "updateReplyIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Reply Ids] Update Reply Ids',\r\n  props<{ payload: Update<ReplyIds> }>()\r\n)"
                },
                {
                    "name": "upsertReplyIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Reply Ids] Upsert Reply Ids',\r\n  props<{ payload: ReplyIds }>()\r\n)"
                }
            ],
            "src/app/ui-lib/address/address.stories.ts": [
                {
                    "name": "Address",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/address/address.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AddressComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/address/address.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AddressComponent>",
                    "defaultValue": "(args: AddressComponent) => ({\r\n  component: AddressComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/state.ts": [
                {
                    "name": "appReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  spaces: spaceReducer,\r\n  contents: contentReducer,\r\n  posts: postReducer,\r\n  profiles: profileReducer,\r\n  replyIds: replyIdReducer,\r\n  loader: loaderReducer,\r\n  myAccount: myAccountReducer,\r\n  myPostReactions: myPostReactionsReducer,\r\n  followedSpaceIds: followedSpaceIdsReducer,\r\n  followedAccountIds: followedAccountIdsReducer,\r\n}"
                }
            ],
            "src/app/core/constants/size.const.ts": [
                {
                    "name": "AVATAR_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/size.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  MINI: 36,\n  SMALL: 40,\n  MEDIUM: 46,\n}"
                },
                {
                    "name": "MODAL_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/size.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  MOBILE: {\n    width: '95%',\n    maxWidth: 'none',\n  },\n  DESKTOP: {\n    width: '500px',\n    maxWidth: '80vh',\n  },\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "baseNodeAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dev-subsocial.codebridge.tech/'"
                },
                {
                    "name": "baseNodeUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "'https://' + baseNodeAddress"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  baseUrl: 'https://dev-subsocial-angular.codebridge.tech',\n  production: true,\n  ipfsUrl: `${baseNodeUrl}ipfs/read/ipfs/`,\n  domainUrl: 'http://localhost:4000/',\n  appName: 'Subsocial Angular',\n  substrateNodeUrl: `wss://${baseNodeAddress}rpc`,\n  offchainUrl: `${baseNodeUrl}offchain`,\n  addFileUrl: `${baseNodeUrl}offchain/v1/ipfs/addFile`,\n  ipfsNodeUrl: `${baseNodeUrl}ipfs/read`,\n  currency: 'SUB',\n  decimals: 11,\n  recommendedSpaceIds: [\n    '1001',\n    '1002',\n    '1003',\n    '1004',\n    '1005',\n    '1006',\n    '1017',\n    '1018',\n  ],\n  loadImageLimitMb: 2,\n  enableSessionKey: true,\n  offchainWs: `wss://${baseNodeUrl}notif-ws`,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "baseNodeAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dev-subsocial.codebridge.tech/'"
                },
                {
                    "name": "baseNodeUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "'https://' + baseNodeAddress"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  baseUrl: 'http://localhost:4200',\n  production: false,\n  ipfsUrl: `${baseNodeUrl}ipfs/read/ipfs/`,\n  domainUrl: 'http://localhost:4200/',\n  appName: 'Subsocial Angular',\n  substrateNodeUrl: `wss://${baseNodeAddress}rpc`,\n  offchainUrl: `${baseNodeUrl}offchain`,\n  offchainWs: `wss://${baseNodeUrl}notif-ws`,\n  addFileUrl: `${baseNodeUrl}offchain/v1/ipfs/addFile`,\n  ipfsNodeUrl: `${baseNodeUrl}ipfs/read`,\n  currency: 'SUB',\n  decimals: 11,\n  recommendedSpaceIds: [\n    '1001',\n    '1002',\n    '1003',\n    '1004',\n    '1005',\n    '1006',\n    '1017',\n    '1018',\n    '1022',\n    '1023',\n  ],\n  loadImageLimitMb: 2,\n  enableSessionKey: true,\n}"
                }
            ],
            "src/app/core/constants/storybook.const.ts": [
                {
                    "name": "BaseRef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ provide: APP_BASE_HREF, useValue: '/' }"
                },
                {
                    "name": "DISABLE_ARG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  control: { disable: true },\r\n}"
                },
                {
                    "name": "IconRegistryProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  IconRegistryService,\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: registryIcons,\r\n    deps: [IconRegistryService],\r\n    multi: true,\r\n  },\r\n  BaseRef,\r\n]"
                },
                {
                    "name": "imageUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://app.subsocial.network/ipfs/ipfs/QmZfJmzeEQfp1WW7AUGkNSW6AL8ibdvoEyhRZubc3sVL6L'"
                },
                {
                    "name": "PostCommentTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  id: '1002',\r\n  ownerId: '',\r\n  ownerImageUrl: '',\r\n  spaceName: 'Space',\r\n  title: '',\r\n  summary:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  imageUrl: '',\r\n  createdAtTime: 1641808542001,\r\n  repliesCount: 0,\r\n  hiddenRepliesCount: 0,\r\n  visibleRepliesCount: 0,\r\n  sharesCount: 0,\r\n  upvotesCount: 3,\r\n  downvotesCount: 0,\r\n  isSharedPost: false,\r\n  isComment: true,\r\n  isShowMore: false,\r\n  ownerName: 'Subsocial user',\r\n  postLink: '/1001/comment-post-210',\r\n  hidden: false,\r\n  spaceHidden: false,\r\n  body: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  tags: [],\r\n  spaceId: '1001',\r\n  spaceLink: '/1001',\r\n}"
                },
                {
                    "name": "PostTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  id: '1001',\r\n  ownerId: '',\r\n  ownerImageUrl: '',\r\n  spaceName: 'Subsocial Space',\r\n  title: 'Lorem Ipsum is simply dummy text of the printing ',\r\n  summary:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  imageUrl: '',\r\n  createdAtTime: 1641808542001,\r\n  repliesCount: 0,\r\n  hiddenRepliesCount: 0,\r\n  visibleRepliesCount: 0,\r\n  sharesCount: 0,\r\n  upvotesCount: 3,\r\n  downvotesCount: 0,\r\n  isSharedPost: false,\r\n  isComment: true,\r\n  isShowMore: false,\r\n  ownerName: 'Subsocial user',\r\n  postLink: '/1001/comment-post-210',\r\n  hidden: false,\r\n  spaceHidden: false,\r\n  body: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. \",\r\n  tags: [],\r\n  spaceId: '1001',\r\n  spaceLink: '/1001',\r\n}"
                },
                {
                    "name": "ProfileTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  id: 'HhQWPkEpXLHFhMAQieAH1wtfVRNHWZ5snhfFeBe',\r\n  followersCount: 1,\r\n  followingAccountsCount: 3,\r\n  followingSpacesCount: 9,\r\n  about: 'Test',\r\n  avatar: 'HhQWPkEpXLHFhMAQieAH1wtfVRNHWZ5snhfFeBe',\r\n  name: 'Subsosial User',\r\n  summary: 'Test',\r\n  isShowMore: false,\r\n}"
                },
                {
                    "name": "SbDeviceRegistry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  DeviceService,\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: deviceRegistry,\r\n    deps: [DeviceService],\r\n    multi: true,\r\n  },\r\n]"
                },
                {
                    "name": "SbRouterModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "RouterModule.forRoot([], { useHash: true })"
                },
                {
                    "name": "SbStoreModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  StoreModule.forRoot(appReducers, {}),\r\n  EffectsModule.forRoot([]),\r\n]"
                },
                {
                    "name": "SbTemplateId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'3t8GGfcxxXiTUmGiTKp2jS611wucGs4K7zvr2UmXrawoWYLD'"
                },
                {
                    "name": "SharedPostTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  id: '1002',\r\n  ownerId: '',\r\n  ownerImageUrl: '',\r\n  spaceName: 'Subsocial Space',\r\n  title: '',\r\n  summary:\r\n    'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',\r\n  imageUrl: '',\r\n  createdAtTime: 1641808542001,\r\n  repliesCount: 0,\r\n  hiddenRepliesCount: 0,\r\n  visibleRepliesCount: 0,\r\n  sharesCount: 0,\r\n  upvotesCount: 3,\r\n  downvotesCount: 0,\r\n  isSharedPost: true,\r\n  isComment: true,\r\n  isShowMore: false,\r\n  ownerName: 'Subsocial user',\r\n  postLink: '/1001/comment-post-210',\r\n  hidden: false,\r\n  spaceHidden: false,\r\n  body: 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.',\r\n  tags: [],\r\n  spaceId: '1002',\r\n  spaceLink: '/1002',\r\n}"
                },
                {
                    "name": "SpaceTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  id: '1001',\r\n  ownerId: '3t8GGfcxxXiTUmGiTKp2jS611wucGs4K7zvr2UmXrawoWYLD',\r\n  isHidden: false,\r\n  name: 'Space name',\r\n  image: '',\r\n  followersCount: 4,\r\n  postsCount: 2,\r\n  spaceLink: '/1001',\r\n  summary:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\r\n  about:\r\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\r\n  isShowMore: true,\r\n  tags: ['subsocial', 'tags'],\r\n  links: [],\r\n}"
                }
            ],
            "src/app/ui-lib/buttons/close-button/close-button.stories.ts": [
                {
                    "name": "CloseButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/close-button/close-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CloseButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/close-button/close-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CloseButtonComponent>",
                    "defaultValue": "(args: CloseButtonComponent) => ({\r\n  component: CloseButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/containers/column/column.stories.ts": [
                {
                    "name": "Column",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/column/column.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ColumnComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "control",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/column/column.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  control: {\n    type: 'select',\n    options: ['start', 'end', 'center', 'normal', 'space-between'],\n  },\n}"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/column/column.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  controls: {\n    include: ['alignItem', 'justifyContent', 'margin', 'padding', 'v', 'h'],\n  },\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/column/column.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ColumnComponent>",
                    "defaultValue": "(args: ColumnComponent) => ({\n  component: ColumnComponent,\n  props: args,\n  template: `\n    <app-column style=\"height: 100%\">\n      <div>Element1</div>\n      <div>Element2</div>\n      <div>Element3</div>\n    </app-column>`,\n})"
                }
            ],
            "src/app/ui-lib/buttons/comment-button/comment-button.stories.ts": [
                {
                    "name": "CommentButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/comment-button/comment-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/comment-button/comment-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentButtonComponent>",
                    "defaultValue": "(\r\n  args: CommentButtonComponent\r\n) => ({\r\n  component: CommentButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/comment/comment-input/comment-input.stories.ts": [
                {
                    "name": "commentForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl('', { validators: Validators.required })"
                },
                {
                    "name": "CommentInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentInputComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'commentForm',\r\n      'showSendButton',\r\n      'disabledButton',\r\n      'isSending',\r\n      'autofocus',\r\n      'type',\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentInputComponent>",
                    "defaultValue": "(\r\n  args: CommentInputComponent\r\n) => ({\r\n  component: CommentInputComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/comment/comment-list/comment-list.stories.ts": [
                {
                    "name": "CommentList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentListComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'rootPostId',\r\n      'parentPostId',\r\n      'comments$',\r\n      'parentPost$',\r\n      'parentId',\r\n      'commentsCount$',\r\n      'isChildrenShow$',\r\n      'isShowInput',\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentListComponent>",
                    "defaultValue": "(args: CommentListComponent) => ({\r\n  component: CommentListComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/comment/comments/comments.stories.ts": [
                {
                    "name": "Comments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comments/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentsComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comments/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentsComponent>",
                    "defaultValue": "(args: CommentsComponent) => ({\r\n  component: CommentsComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/buttons.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/buttons.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  QrButtonComponent,\n  EditButtonComponent,\n  SendTokensButtonComponent,\n  WritePostButtonComponent,\n  SignOutButtonComponent,\n  ProfileButtonComponent,\n  IconButtonComponent,\n  CloseButtonComponent,\n  FollowButtonComponent,\n  SendTipsButtonComponent,\n  ReplyButtonComponent,\n  UpvoteButtonComponent,\n  DownvoteButtonComponent,\n  CommentButtonComponent,\n  SharedButtonComponent,\n  SendButtonComponent,\n  TxButtonComponent,\n  CreateEntityButtonComponent,\n  NotificationIconButtonComponent,\n  CreateSpaceButtonComponent,\n]"
                }
            ],
            "src/app/state/content/content.state.ts": [
                {
                    "name": "contentAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Content>",
                    "defaultValue": "createEntityAdapter<Content>()"
                },
                {
                    "name": "initialContentState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContentState",
                    "defaultValue": "contentAdapter.getInitialState()"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/ui-lib/containers/row/row.stories.ts": [
                {
                    "name": "control",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/row/row.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  control: {\r\n    type: 'select',\r\n    options: ['start', 'end', 'center', 'normal', 'space-between'],\r\n  },\r\n}"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/row/row.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['alignItem', 'justifyContent', 'margin', 'padding', 'v', 'h'],\r\n  },\r\n}"
                },
                {
                    "name": "Row",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/row/row.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RowComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/row/row.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RowComponent>",
                    "defaultValue": "(args: RowComponent) => ({\r\n  component: RowComponent,\r\n  props: args,\r\n  template: `\r\n    <app-row class=\"w100\" style=\"height: 100%\">\r\n      <div>Element1</div>\r\n      <div>Element2</div>\r\n      <div>Element3</div>\r\n    </app-row>`,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts": [
                {
                    "name": "CreateEntityButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CreateEntityButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "subscription",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Subscription()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CreateEntityButtonComponent>",
                    "defaultValue": "(\r\n  args: CreateEntityButtonComponent\r\n) => ({\r\n  component: CreateEntityButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/create-space-button/create-space.stories.ts": [
                {
                    "name": "CreateSpaceButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/create-space-button/create-space.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CreateSpaceButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/create-space-button/create-space.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CreateSpaceButtonComponent>",
                    "defaultValue": "(\r\n  args: CreateSpaceButtonComponent\r\n) => ({\r\n  component: CreateSpaceButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SharedButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SharedButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SharedButtonComponent>",
                    "defaultValue": "(\r\n  args: SharedButtonComponent\r\n) => ({\r\n  component: SharedButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TxButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TxButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Sending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TxButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TxButtonComponent>",
                    "defaultValue": "(args: TxButtonComponent) => ({\r\n  component: TxButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/comment/comment-item/comment-item.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentItemComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentItemComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['comment', 'isEdit'],\r\n  },\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommentItemComponent>",
                    "defaultValue": "(args: CommentItemComponent) => ({\r\n  component: CommentItemComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/core/utils/utils.ts": [
                {
                    "name": "dictionaryToArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(entities: Dictionary<T>, ids: string[]) => {\r\n  const array: T[] = [];\r\n\r\n  ids.forEach(id => {\r\n    if(entities.hasOwnProperty(id)) {\r\n      array.push(entities[id]!)\r\n    }\r\n  })\r\n\r\n  return array;\r\n}"
                },
                {
                    "name": "getPostLink",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  spaceHandle: string | undefined,\r\n  title: string,\r\n  id: string,\r\n  spaceId: string\r\n): string => {\r\n  return `/${spaceHandle ? '@' + spaceHandle : spaceId}/${slug(title)}-${id}`;\r\n}"
                },
                {
                    "name": "selectEntitiesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/utils/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(entities: Dictionary<T>, ids: string[]) => {\r\n  const selectedEntities: Dictionary<T> = {};\r\n  ids.forEach((id) => {\r\n    const post = entities[id];\r\n    if(entities.hasOwnProperty(id)) {\r\n      selectedEntities[id] = post;\r\n    }\r\n  });\r\n\r\n  return selectedEntities;\r\n}"
                }
            ],
            "src/app/ui-lib/buttons/edit-button/edit-button.stories.ts": [
                {
                    "name": "EditButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/edit-button/edit-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<EditButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/edit-button/edit-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<EditButtonComponent>",
                    "defaultValue": "(args: EditButtonComponent) => ({\r\n  component: EditButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/core/mapper/flatten.map.ts": [
                {
                    "name": "flatReaction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mapper/flatten.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(reaction: Reaction) => {\r\n  return {\r\n    id: reaction.id.toString(),\r\n    profileId: reaction.created.account.toString(),\r\n    isUpvote: reaction.kind.isUpvote,\r\n  } as FlatReaction;\r\n}"
                }
            ],
            "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts": [
                {
                    "name": "FollowButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FollowButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FollowingButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FollowButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: { include: ['type', 'size', 'width', 'label', '_isFollow'] },\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FollowButtonComponent>",
                    "defaultValue": "(\r\n  args: FollowButtonComponent\r\n) => ({\r\n  component: FollowButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.state.ts": [
                {
                    "name": "followedAccountIdsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<FollowedAccountIdsStruct>",
                    "defaultValue": "createEntityAdapter<FollowedAccountIdsStruct>()"
                },
                {
                    "name": "initialFollowedAccountIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowedAccountIdsState",
                    "defaultValue": "followedAccountIdsAdapter.getInitialState()"
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.reducer.ts": [
                {
                    "name": "followedAccountIdsReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialFollowedAccountIdsState,\r\n  on(getFollowedAccountIds, (state) => state),\r\n  on(upsertFollowedAccountIds, (state, { payload }) => {\r\n    return followedAccountIdsAdapter.upsertOne(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.state.ts": [
                {
                    "name": "followedSpaceIdsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<FollowedSpaceIdsStruct>",
                    "defaultValue": "createEntityAdapter<FollowedSpaceIdsStruct>()"
                },
                {
                    "name": "initialFollowedSpaceIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowedSpaceIdsState",
                    "defaultValue": "followedSpaceIdsAdapter.getInitialState()"
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.reducer.ts": [
                {
                    "name": "followedSpaceIdsReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialFollowedSpaceIdsState,\r\n  on(getFollowedSpaceIds, (state) => state),\r\n  on(upsertFollowedSpaceIds, (state, { payload }) => {\r\n    return followedSpaceIdsAdapter.upsertOne(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.actions.ts": [
                {
                    "name": "getFollowedAccountIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Followed Account Ids] Get Followed Account Ids',\r\n  props<{ payload: { address: string } }>()\r\n)"
                },
                {
                    "name": "upsertFollowedAccountIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Followed Account Ids] Upsert Followed Account Ids',\r\n  props<{ payload: FollowedAccountIdsStruct }>()\r\n)"
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.actions.ts": [
                {
                    "name": "getFollowedSpaceIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Followed Space Ids] Get Followed Space Ids',\r\n  props<{ payload: { address: string } }>()\r\n)"
                },
                {
                    "name": "upsertFollowedSpaceIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Followed Space Ids] Upsert Followed Space Ids',\r\n  props<{ payload: FollowedSpaceIdsStruct }>()\r\n)"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.actions.ts": [
                {
                    "name": "getGetMyPostReactionsByPostIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[My Post Reactions] My Post Reactions By Post Ids',\r\n  props<{ ids: Array<string> }>()\r\n)"
                },
                {
                    "name": "upsertMyPostReactions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[My Post Reactions] Upsert My Post Reactions',\r\n  props<{ payload: Array<MyPostReactions> }>()\r\n)"
                }
            ],
            "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts": [
                {
                    "name": "HiddenComment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HiddenContentComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HiddenPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HiddenContentComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HiddenSpace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HiddenContentComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['hidden$', 'type', 'spaceHidden$'],\r\n  },\r\n}"
                },
                {
                    "name": "PostWithHiddenSpace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HiddenContentComponent>",
                    "defaultValue": "Template.bind(\r\n  {}\r\n)"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HiddenContentComponent>",
                    "defaultValue": "(\r\n  args: HiddenContentComponent\r\n) => ({\r\n  component: HiddenContentComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts": [
                {
                    "name": "HiddenSharedPostItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SharedPostItemComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  controls: {\n    include: ['postItemData', 'sharedPostItemData', 'isSharedPostHidden'],\n  },\n}"
                },
                {
                    "name": "SharedPostItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SharedPostItemComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SharedPostItemComponent>",
                    "defaultValue": "(\n  args: SharedPostItemComponent\n) => ({\n  component: SharedPostItemComponent,\n  props: args,\n})"
                }
            ],
            "src/app/ui-lib/buttons/icon-button/icon-button.stories.ts": [
                {
                    "name": "IconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<IconButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<IconButtonComponent>",
                    "defaultValue": "(args: IconButtonComponent) => ({\r\n  component: IconButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/avatar/avatar.stories.ts": [
                {
                    "name": "Image",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "(args: AvatarComponent) => ({\r\n  component: AvatarComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "WithoutImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/avatar/avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/state/notification/loader.state.ts": [
                {
                    "name": "initialLoaderState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/notification/loader.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoaderState",
                    "defaultValue": "{\r\n  isLoading: false,\r\n}"
                }
            ],
            "src/app/state/my-account/my-account.state.ts": [
                {
                    "name": "initialMyAccountState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyAccountState",
                    "defaultValue": "{\r\n  address: '',\r\n  blocked: false,\r\n  nonce: 0,\r\n}"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.state.ts": [
                {
                    "name": "initialMyPostReactionsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MyPostReactionsState",
                    "defaultValue": "myPostReactionsAdapter.getInitialState()"
                },
                {
                    "name": "myPostReactionsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<MyPostReactions>",
                    "defaultValue": "createEntityAdapter<MyPostReactions>()"
                }
            ],
            "src/app/state/own-space-ids/own-space-ids.state.ts": [
                {
                    "name": "initialOwnSpaceIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OwnSpaceIdsState",
                    "defaultValue": "ownSpaceIdsAdapter.getInitialState()"
                },
                {
                    "name": "ownSpaceIdsAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<OwnSpaceIdsStruct>",
                    "defaultValue": "createEntityAdapter<OwnSpaceIdsStruct>()"
                }
            ],
            "src/app/state/post/post.state.ts": [
                {
                    "name": "initialPostState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostState",
                    "defaultValue": "postAdapter.getInitialState()"
                },
                {
                    "name": "postAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Post>",
                    "defaultValue": "createEntityAdapter<Post>()"
                }
            ],
            "src/app/state/profile/profile.state.ts": [
                {
                    "name": "initialProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProfileState",
                    "defaultValue": "profileAdapter.getInitialState()"
                },
                {
                    "name": "profileAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Profile>",
                    "defaultValue": "createEntityAdapter<Profile>()"
                }
            ],
            "src/app/state/reply-id/reply-id.state.ts": [
                {
                    "name": "initialReplyIdState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplyIdState",
                    "defaultValue": "replyIdAdapter.getInitialState()"
                },
                {
                    "name": "replyIdAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ReplyIds>",
                    "defaultValue": "createEntityAdapter<ReplyIds>()"
                }
            ],
            "src/app/state/space/space.state.ts": [
                {
                    "name": "initialSpaceState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpaceState",
                    "defaultValue": "spaceAdapter.getInitialState()"
                },
                {
                    "name": "spaceAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Space>",
                    "defaultValue": "createEntityAdapter<Space>()"
                }
            ],
            "src/app/core/rxjs-custom/operators.ts": [
                {
                    "name": "isNotEmptyOrNull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/rxjs-custom/operators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value: any) => {\r\n  if (typeof value === 'object') {\r\n    return Object.keys(value).length > 0;\r\n  } else if (Array.isArray(value)) {\r\n    return value.length > 0;\r\n  } else {\r\n    return !!value;\r\n  }\r\n}"
                }
            ],
            "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts": [
                {
                    "name": "LANG_LABELS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePair<string>",
                    "defaultValue": "{\r\n  en: 'English',\r\n  ru: 'Русский',\r\n}"
                }
            ],
            "src/app/core/constants/links.const.ts": [
                {
                    "name": "LINKS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/links.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  polkadotExt: 'https://polkadot.js.org/extension/',\n  chromeExt:\n    'https://chrome.google.com/webstore/detail/polkadot%7Bjs%7D-extension/mopnmbcafieddcagagdcbnhejhlodfdd',\n  firefoxExt:\n    'https://addons.mozilla.org/en-US/firefox/addon/polkadot-js-extension/',\n  reactApp: 'https://dev-subsocial-react.codebridge.tech/',\n  vueApp: 'https://dev-subsocial-vue.codebridge.tech/',\n  subsocialApp: 'https://app.subsocial.network/',\n  documents: '',\n  github: 'https://github.com/dappforce/',\n  whatIsSubsocial: '',\n  twitter: '',\n  discord: '',\n  telegram: '',\n  megaphone: '',\n}"
                }
            ],
            "src/app/state/notification/loader.reducer.ts": [
                {
                    "name": "loaderReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/notification/loader.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialLoaderState,\r\n  on(setLoader, (state, { isLoading }) => {\r\n    return { ...state, isLoading };\r\n  })\r\n)"
                }
            ],
            "src/app/state/profile/profile.actions.ts": [
                {
                    "name": "loadMyProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load My Profile By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadProfileById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load Profile By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadProfilesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load Profiles By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
                },
                {
                    "name": "saveMyProfileSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load My Profile Success'\r\n)"
                },
                {
                    "name": "saveProfilesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load Profiles Success'\r\n)"
                },
                {
                    "name": "saveProfileSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Load Profile Success'\r\n)"
                },
                {
                    "name": "upsertProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Upsert Profile',\r\n  props<{ payload: Profile }>()\r\n)"
                },
                {
                    "name": "upsertProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Profile] Upsert Profiles',\r\n  props<{ payload: Array<Profile> }>()\r\n)"
                }
            ],
            "src/app/state/space/space.actions.ts": [
                {
                    "name": "loadSpaceById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Load Space By Id',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadSpacesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Load Spaces By Ids',\r\n  props<{ payload: LoadEntitiesProps }>()\r\n)"
                },
                {
                    "name": "loadSpaceSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Space] Load Spaces Success')"
                },
                {
                    "name": "updateSpace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Update Space',\r\n  props<{ payload: Update<Space> }>()\r\n)"
                },
                {
                    "name": "upsertSpace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Upsert Space',\r\n  props<{ payload: Space | undefined }>()\r\n)"
                },
                {
                    "name": "upsertSpaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Space] Upsert Spaces',\r\n  props<{ payload: Array<Space> }>()\r\n)"
                }
            ],
            "src/app/core/mapper/post.map.ts": [
                {
                    "name": "mapPostDTOToPost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mapper/post.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  post: any,\r\n  space: SpaceData | undefined,\r\n  profileContent: ProfileContent | undefined\r\n): Post => {\r\n  return {\r\n    id: post.struct.id,\r\n    ownerId: post.struct.ownerId,\r\n    ownerImageUrl: profileContent?.avatar || '',\r\n    spaceName: space?.content?.name || '',\r\n    title: post.content!.title,\r\n    summary: post.content!.summary,\r\n    imageUrl: post.content!.image,\r\n    createdAtTime: post.struct.createdAtTime,\r\n    repliesCount: post.struct.repliesCount,\r\n    hiddenRepliesCount: post.struct.hiddenRepliesCount,\r\n    visibleRepliesCount: post.struct.visibleRepliesCount,\r\n    sharesCount: post.struct.visibleRepliesCount,\r\n    upvotesCount: post.struct.upvotesCount,\r\n    downvotesCount: post.struct.downvotesCount,\r\n    isSharedPost: post.struct.isSharedPost,\r\n    isComment: post.struct.isComment,\r\n    isShowMore: post.content!.isShowMore,\r\n    ownerName: profileContent?.name || '',\r\n    postLink: getPostLink(\r\n      '',\r\n      post.content!.title\r\n        ? post.content!.title\r\n        : post.content!.summary.slice(0, 30),\r\n      post.struct.id,\r\n      post.struct.isComment ? 'comments' : post.struct.spaceId!\r\n    ),\r\n    hidden: post.struct.hidden,\r\n    spaceHidden: space === undefined || !!space?.struct.hidden,\r\n    body: post.content!.body,\r\n    tags: post.content!.tags,\r\n    spaceId: post.struct.spaceId,\r\n    link: post.content!.link,\r\n    sharedPostId: post.struct.sharedPostId,\r\n    spaceLink: '/' + space?.struct.id,\r\n    rootPostId: post.struct.rootPostId,\r\n    parentId: post.struct.parentId,\r\n  };\r\n}"
                }
            ],
            "src/app/core/mapper/comment.map.ts": [
                {
                    "name": "mapPostToCommentItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mapper/comment.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  postStruct: CommentStruct,\n  profileContent: ProfileContent,\n  postContent: PostContent,\n  myPostReaction: MyPostReactions | undefined,\n  address: string\n) => {\n  return {\n    skipComment: postStruct.hidden && postStruct.ownerId !== address,\n    postId: postStruct.id,\n    rootPostId: postStruct.rootPostId,\n    ownerId: postStruct.ownerId,\n    profileName: profileContent?.name,\n    createdAtTime: postStruct.createdAtTime,\n    avatar: profileContent?.avatar,\n    hidden: postStruct.hidden,\n    commentText: postContent.body,\n    upvoteCount: postStruct.upvotesCount,\n    isMyComment: postStruct.ownerId === address,\n    downvoteCount: postStruct.downvotesCount,\n    replyCount: postStruct.repliesCount,\n    upvoteActive: myPostReaction?.kind === 'Upvote',\n    downvoteActive: myPostReaction?.kind === 'Downvote',\n    reactionId: myPostReaction?.reactionId,\n  } as CommentItemData;\n}"
                }
            ],
            "src/app/core/mapper/profile.map.ts": [
                {
                    "name": "mapProfileDTOToProfile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mapper/profile.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  profileData: ProfileData | undefined,\r\n  id?: string\r\n) => {\r\n  return {\r\n    id: profileData?.struct.id || id,\r\n    followersCount: profileData?.struct.followersCount || 0,\r\n    followingAccountsCount: profileData?.struct.followingAccountsCount || 0,\r\n    followingSpacesCount: profileData?.struct.followingSpacesCount || 0,\r\n    about: profileData?.content?.about || '',\r\n    avatar: profileData?.content?.avatar || '',\r\n    name: profileData?.content?.name || '',\r\n    summary: profileData?.content?.summary || '',\r\n    isShowMore: profileData?.content?.isShowMore || false,\r\n  } as Profile;\r\n}"
                }
            ],
            "src/app/core/mapper/space.map.ts": [
                {
                    "name": "mapSpaceDTOToSpace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mapper/space.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(spaceData: SpaceData) => {\r\n  return {\r\n    id: spaceData.struct.id,\r\n    ownerId: spaceData.struct.ownerId,\r\n    isHidden: spaceData.struct.hidden,\r\n    name: spaceData.content?.name,\r\n    image: spaceData.content?.image,\r\n    followersCount: spaceData.struct.followersCount,\r\n    postsCount: spaceData.struct.postsCount,\r\n    spaceLink: '/' + spaceData.struct.id,\r\n    summary: spaceData.content?.summary,\r\n    about: spaceData.content?.about,\r\n    isShowMore: spaceData.content?.isShowMore,\r\n    tags: spaceData.content?.tags,\r\n    links: spaceData.content?.links,\r\n  } as Space;\r\n}"
                }
            ],
            "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts": [
                {
                    "name": "MarkdownEditor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MdeEditorComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'autoFocus',\r\n      'placeholder',\r\n      'isToolbarHidden',\r\n      'height',\r\n      'isRequired',\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MdeEditorComponent>",
                    "defaultValue": "(args: MdeEditorComponent) => ({\r\n  component: MdeEditorComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/core/constants/messages.ts": [
                {
                    "name": "MESSAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/messages.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  WAITING_TX_COMPLETE: 'Waiting for transaction to complete',\r\n}"
                }
            ],
            "src/app/core/constants/query.const.ts": [
                {
                    "name": "METHODS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/query.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  accountFollowers: 'accountFollowers',\n  accountsFollowedByAccount: 'accountsFollowedByAccount',\n  spaceFollowers: 'spaceFollowers',\n  reactionIdsByPostId: 'reactionIdsByPostId',\n  postReactionIdByAccount: 'postReactionIdByAccount',\n  followSpace: 'followSpace',\n  unfollowSpace: 'unfollowSpace',\n  followAccount: 'followAccount',\n  unfollowAccount: 'unfollowAccount',\n  createPostReaction: 'createPostReaction',\n  deletePostReaction: 'deletePostReaction',\n  updatePostReaction: 'updatePostReaction',\n  createPost: 'createPost',\n  updatePost: 'updatePost',\n  createSpace: 'createSpace',\n  updateSpace: 'updateSpace',\n  createProfile: 'createProfile',\n  updateProfile: 'updateProfile',\n}"
                },
                {
                    "name": "PALLETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/query.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  profileFollows: 'profileFollows',\n  spaceFollows: 'spaceFollows',\n  reactions: 'reactions',\n  posts: 'posts',\n  spaces: 'spaces',\n  profiles: 'profiles',\n}"
                }
            ],
            "src/app/state/my-account/my-account.reducer.ts": [
                {
                    "name": "myAccountReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialMyAccountState,\r\n  on(setMyAccount, (state, { payload }) => {\r\n    return { ...payload };\r\n  })\r\n)"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.reducer.ts": [
                {
                    "name": "myPostReactionsReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialMyPostReactionsState,\r\n  on(MyPostReactionsActions.getGetMyPostReactionsByPostIds, (state) => state),\r\n  on(MyPostReactionsActions.upsertMyPostReactions, (state, { payload }) => {\r\n    return myPostReactionsAdapter.upsertMany(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/app/ui-lib/content/no-content/no-content.stories.ts": [
                {
                    "name": "NoContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/no-content/no-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NoContentComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/no-content/no-content.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NoContentComponent>",
                    "defaultValue": "(args: NoContentComponent) => ({\r\n  component: NoContentComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/notification-icon-button/notification-button.stories.ts": [
                {
                    "name": "NotificationButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/notification-icon-button/notification-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NotificationIconButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/notification-icon-button/notification-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NotificationIconButtonComponent>",
                    "defaultValue": "(\r\n  args: NotificationIconButtonComponent\r\n) => ({\r\n  component: NotificationIconButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/text/paragraph/paragraph.stories.ts": [
                {
                    "name": "Paragraph",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/text/paragraph/paragraph.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ParagraphComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/text/paragraph/paragraph.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ParagraphComponent>",
                    "defaultValue": "(args: ParagraphComponent) => ({\r\n  component: ParagraphComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/input/image-loader/image-loader.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['imageUrl', 'type', 'fileSizeLimit'],\r\n  },\r\n}"
                },
                {
                    "name": "Round",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ImageLoaderComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "RoundWithImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ImageLoaderComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Square",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ImageLoaderComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SquareWithImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ImageLoaderComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ImageLoaderComponent>",
                    "defaultValue": "(args: ImageLoaderComponent) => ({\r\n  component: ImageLoaderComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/input/tag-input/tag-input.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['tags', 'tagCtrl'],\r\n  },\r\n}"
                },
                {
                    "name": "tagCtrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FormControl('')"
                },
                {
                    "name": "TagInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TagInputComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TagInputComponent>",
                    "defaultValue": "(args: TagInputComponent) => ({\r\n  component: TagInputComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/space-ui/space-item/space-item.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['space', 'isEdit', 'itemType', 'showHidden', 'isFollowed$'],\r\n  },\r\n}"
                },
                {
                    "name": "SpaceItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpaceItemComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpaceItemComponent>",
                    "defaultValue": "(args: SpaceItemComponent) => ({\r\n  component: SpaceItemComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/space-ui/space-select/space-select.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['spaces', 'selectedSpace', 'isShowSpaceList'],\r\n  },\r\n}"
                },
                {
                    "name": "spaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Array(5).fill(null).map((_, i) => {\r\n  const space = JSON.parse(JSON.stringify(SpaceTemplate));\r\n  const index = (i + 1).toString();\r\n  space.id = index;\r\n  space.name = space.name + ' ' + index;\r\n  return space;\r\n})"
                },
                {
                    "name": "SpaceSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpaceSelectComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpaceSelectComponent>",
                    "defaultValue": "(args: SpaceSelectComponent) => ({\r\n  component: SpaceSelectComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/input/text-input/text-input.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['isRequired', 'label', 'error'],\r\n  },\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TextInputComponent>",
                    "defaultValue": "(args: TextInputComponent) => ({\r\n  component: TextInputComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TextInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TextInputComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "TextInputError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TextInputComponent>",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/ui-lib/space-ui/space-info/space.info.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'postsCount',\r\n      'spaceId',\r\n      'spaceName',\r\n      'itemType',\r\n      'followersCount',\r\n      'profileId',\r\n      'link',\r\n      'address',\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "SpaceInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpaceInfoComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpaceInfoComponent>",
                    "defaultValue": "(args: SpaceInfoComponent) => ({\r\n  component: SpaceInfoComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/post-ui/post-item/post-item.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: ['postItemData', 'tagCtrl'],\r\n  },\r\n}"
                },
                {
                    "name": "PostItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostItemComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostItemComponent>",
                    "defaultValue": "(args: PostItemComponent) => ({\r\n  component: PostItemComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/profile/profile-info/profile-info.stories.ts": [
                {
                    "name": "params",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  controls: {\r\n    include: [\r\n      'avatarSrc',\r\n      'profileName',\r\n      'type',\r\n      'followingCount',\r\n      'followersCount',\r\n      'profileId',\r\n      'link',\r\n      'address',\r\n    ],\r\n  },\r\n}"
                },
                {
                    "name": "ProfileInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileInfoComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileInfoComponent>",
                    "defaultValue": "(args: ProfileInfoComponent) => ({\r\n  component: ProfileInfoComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/content/post-image/post-image.stories.ts": [
                {
                    "name": "PostImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/post-image/post-image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostImageComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/content/post-image/post-image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostImageComponent>",
                    "defaultValue": "(args: PostImageComponent) => ({\r\n  component: PostImageComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/post-ui/post-info/post-info.stories.ts": [
                {
                    "name": "PostInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/post-info/post-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostInfoComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/post-ui/post-info/post-info.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PostInfoComponent>",
                    "defaultValue": "(args: PostInfoComponent) => ({\r\n  component: PostInfoComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/post/post.reducer.ts": [
                {
                    "name": "postReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialPostState,\r\n  on(loadPostsByIds, (state) => state),\r\n  on(upsertPosts, (state, { payload }) => {\r\n    return postAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(upsertPost, (state, { payload }) => {\r\n    return postAdapter.upsertOne(payload, state);\r\n  }),\r\n  on(updatePost, (state, { payload }) => {\r\n    return postAdapter.updateOne(payload, state);\r\n  }),\r\n  on(switchIsChildrenCommentShow, (state) => state),\r\n  on(addNewCommentPost, (state) => state)\r\n)"
                }
            ],
            "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts": [
                {
                    "name": "ProfileButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SignInButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileButtonComponent>",
                    "defaultValue": "(\r\n  args: ProfileButtonComponent\r\n) => ({\r\n  component: ProfileButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/profile/profile.reducer.ts": [
                {
                    "name": "profileReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialProfileState,\r\n  on(upsertProfiles, (state, { payload }) => {\r\n    return profileAdapter.upsertMany(payload, state);\r\n  }),\r\n  on(upsertProfile, (state, { payload }) => {\r\n    return profileAdapter.upsertOne(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/app/ui-lib/buttons/qr-button/qr-button.stories.ts": [
                {
                    "name": "QrButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/qr-button/qr-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<QrButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/qr-button/qr-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<QrButtonComponent>",
                    "defaultValue": "(args: QrButtonComponent) => ({\r\n  component: QrButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/content/content.reducer.ts": [
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialContentState,\r\n  on(upsertContents, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertMany(payload, state) : state\r\n  ),\r\n  on(upsertContent, (state, { payload }) =>\r\n    payload ? contentAdapter.upsertOne(payload, state) : state\r\n  )\r\n)"
                }
            ],
            "src/app/ui-lib/buttons/reply-button/reply-button.stories.ts": [
                {
                    "name": "ReplyButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/reply-button/reply-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ReplyButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/reply-button/reply-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ReplyButtonComponent>",
                    "defaultValue": "(args: ReplyButtonComponent) => ({\r\n  component: ReplyButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/reply-id/reply-id.reducer.ts": [
                {
                    "name": "replyIdsReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialReplyIdState,\r\n  on(loadReplyIdsByParentPostId, (state) => state),\r\n  on(upsertReplyIds, (state, { payload }) => {\r\n    return replyIdAdapter.upsertOne(payload, state);\r\n  }),\r\n  on(updateReplyIds, (state, { payload }) => {\r\n    return replyIdAdapter.updateOne(payload, state);\r\n  })\r\n)"
                }
            ],
            "src/app/state/content/content.actions.ts": [
                {
                    "name": "saveContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Content] Save Content',\r\n  props<{ payload: Content }>()\r\n)"
                },
                {
                    "name": "saveContents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Content] Save Contents',\r\n  props<{ payload: Array<Content> }>()\r\n)"
                },
                {
                    "name": "upsertContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Content] Upsert Content',\r\n  props<{ payload: Content }>()\r\n)"
                },
                {
                    "name": "upsertContents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Content] Upsert Contents',\r\n  props<{ payload: Array<Content> }>()\r\n)"
                }
            ],
            "src/app/ui-lib/containers/scroll/scroll-container.stories.ts": [
                {
                    "name": "ScrollContainer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/scroll/scroll-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ScrollComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/containers/scroll/scroll-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ScrollComponent>",
                    "defaultValue": "(args: ScrollComponent) => ({\r\n  component: ScrollComponent,\r\n  props: args,\r\n  template: `\r\n    <app-scroll style=\"max-height: 95px; display: block;\" class=\"w100\">\r\n      <div>Element1</div>\r\n      <div>Element2</div>\r\n      <div>Element3</div>\r\n      <div>Element4</div>\r\n      <div>Element5</div>\r\n      <div>Element6</div>\r\n      <div>Element7</div>\r\n      <div>Element8</div>\r\n      <div>Element9</div>\r\n      <div>Element10</div>\r\n    </app-scroll>`,\r\n})"
                }
            ],
            "src/app/ui-lib/text/see-more/see-more.stories.ts": [
                {
                    "name": "SeeMore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/text/see-more/see-more.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SeeMoreComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/text/see-more/see-more.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SeeMoreComponent>",
                    "defaultValue": "(args: SeeMoreComponent) => ({\r\n  component: SeeMoreComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/content/content.selectors.ts": [
                {
                    "name": "selectAllContents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectContentState, selectAll)"
                },
                {
                    "name": "selectContentEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectContentState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectContentState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ContentState>('contents')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/content/content.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "contentAdapter.getSelectors()"
                }
            ],
            "src/app/state/post/post.selectors.ts": [
                {
                    "name": "selectAllPosts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectPostState, selectAll)"
                },
                {
                    "name": "selectNonExistingPostIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(newIds: string[]) =>\r\n  createSelector(selectPostIds, (postIds) => {\r\n    return difference(newIds, postIds as string[]);\r\n  })"
                },
                {
                    "name": "selectPostById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\r\n  createSelector(selectPostEntities, (postEntities) => postEntities[id])"
                },
                {
                    "name": "selectPostEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectPostState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectPostIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectPostState, selectIds)"
                },
                {
                    "name": "selectPostsByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectPostEntities, (postEntities) =>\r\n    dictionaryToArray<Post>(postEntities, ids)\r\n  )"
                },
                {
                    "name": "selectPostsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectPostState, selectTotal)"
                },
                {
                    "name": "selectPostState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<PostState>('posts')"
                },
                {
                    "name": "selectPostsWithAllDetailsByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectPostEntities, (postEntities) =>\r\n    selectEntitiesByIds<Post>(postEntities, ids)\r\n  )"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/post/post.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "postAdapter.getSelectors()"
                }
            ],
            "src/app/state/reply-id/reply-id.selectors.ts": [
                {
                    "name": "selectAllPReplyIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectReplyIdsState,\n  selectAll\n)"
                },
                {
                    "name": "selectCommentPostsByPostId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\n  createSelector(\n    selectReplyIdsEntities,\n    selectPostEntities,\n    (replyIds, postEntities) => {\n      const postIds = replyIds[id];\n      const posts: Post[] = [];\n\n      postIds?.replyIds.forEach((id) => {\n        const post = postEntities[id];\n\n        post ? posts.push(post) : null;\n      });\n\n      return posts;\n    }\n  )"
                },
                {
                    "name": "selectReplyIdsByPostId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\n  createSelector(selectReplyIdsEntities, (replyEntities) => replyEntities[id])"
                },
                {
                    "name": "selectReplyIdsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectReplyIdsState,\n  selectTotal\n)"
                },
                {
                    "name": "selectReplyIdsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectReplyIdsState,\n  selectEntities\n)"
                },
                {
                    "name": "selectReplyIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ReplyIdState>('replyIds')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/reply-id/reply-id.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "replyIdAdapter.getSelectors()"
                }
            ],
            "src/app/state/profile/profile.selectors.ts": [
                {
                    "name": "selectAllProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectProfileState, selectAll)"
                },
                {
                    "name": "selectMyAccountProfileData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectMyAccountAddress,\n  selectProfileEntities,\n  (address, profileEntities) => profileEntities[address]\n)"
                },
                {
                    "name": "selectProfileById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\n  createSelector(\n    selectProfileEntities,\n    (profileEntities) => profileEntities[id]\n  )"
                },
                {
                    "name": "selectProfileEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProfileState,\n  selectEntities\n)"
                },
                {
                    "name": "selectProfilesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\n  createSelector(selectProfileEntities, (profileEntities) =>\n    dictionaryToArray<Profile>(profileEntities, ids)\n  )"
                },
                {
                    "name": "selectProfilesCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProfileState,\n  selectTotal\n)"
                },
                {
                    "name": "selectProfileState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProfileState>('profiles')"
                },
                {
                    "name": "selectUserInfoByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\n  createSelector(\n    selectProfileEntities,\n    selectFollowedAccountIdsByCurrentAccount,\n    (profileEntities, followedAccountsIds) => {\n      const usersInfo: UserInfo[] = [];\n      ids.forEach((id) => {\n        const profile = profileEntities[id];\n        if (profile) {\n          usersInfo.push({\n            userName: profile?.name,\n            address: profile.id,\n            avatarSrc: profile?.avatar,\n            id: profile.id,\n            isFollowing: followedAccountsIds.indexOf(profile.id) >= 0,\n          });\n        }\n      });\n\n      return usersInfo;\n    }\n  )"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/profile/profile.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "profileAdapter.getSelectors()"
                }
            ],
            "src/app/state/space/space.selectors.ts": [
                {
                    "name": "selectAllSpaces",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectSpaceState, selectAll)"
                },
                {
                    "name": "selectSpaceById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string) =>\r\n  createSelector(selectSpaceEntities, (spaceEntities) => {\r\n    return spaceEntities[id];\r\n  })"
                },
                {
                    "name": "selectSpaceEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectSpaceState,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectSpaceEntitiesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectSpaceEntities, (spaceEntities) => {\r\n    const spaceDataArray: KeyValuePair<Space> = {};\r\n    ids.forEach((id) => {\r\n      const space = spaceEntities[id];\r\n      space ? (spaceDataArray[id] = space) : null;\r\n    });\r\n\r\n    return spaceDataArray;\r\n  })"
                },
                {
                    "name": "selectSpacesByIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ids: string[]) =>\r\n  createSelector(selectSpaceEntities, (spaceEntities) =>\r\n    dictionaryToArray<Space>(spaceEntities, ids))"
                },
                {
                    "name": "selectSpacesCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectSpaceState, selectTotal)"
                },
                {
                    "name": "selectSpaceState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<SpaceState>('spaces')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "spaceAdapter.getSelectors()"
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.selectors.ts": [
                {
                    "name": "selectFollowedAccountIdsByCurrentAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectFollowedSpaceIdsEntities,\r\n  selectMyAccountAddress,\r\n  (entities, address) => {\r\n    return entities ? entities[address]?.followingAccountIds || [] : [];\r\n  }\r\n)"
                },
                {
                    "name": "selectFollowedAccountIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<FollowedAccountIdsState>('followedAccountIds')"
                },
                {
                    "name": "selectFollowedSpaceIdsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectFollowedAccountIdsState,\r\n  selectEntities\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "followedAccountIdsAdapter.getSelectors()"
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.selectors.ts": [
                {
                    "name": "selectFollowedSpaceIdsByCurrentAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFollowedSpaceIdsEntities,\n  selectMyAccountAddress,\n  (entities, address) => {\n    return entities ? entities[address]?.followingSpaceIds || [] : [];\n  }\n)"
                },
                {
                    "name": "selectFollowedSpaceIdsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFollowedSpaceIdsState,\n  selectEntities\n)"
                },
                {
                    "name": "selectFollowedSpaceIdsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<FollowedSpaceIdsState>('followedSpaceIds')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "followedSpaceIdsAdapter.getSelectors()"
                }
            ],
            "src/app/state/notification/loader.selectors.ts": [
                {
                    "name": "selectLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/notification/loader.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<LoaderState>('loader')"
                },
                {
                    "name": "selectLoaderStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/notification/loader.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectLoader,\r\n  (loader) => loader.isLoading\r\n)"
                }
            ],
            "src/app/state/my-account/my-account.selectors.ts": [
                {
                    "name": "selectMyAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<MyAccountState>('myAccount')"
                },
                {
                    "name": "selectMyAccountAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyAccount,\r\n  (myAccount) => {\r\n    return myAccount.address;\r\n  }\r\n)"
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.selectors.ts": [
                {
                    "name": "selectMyPostReactions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<MyPostReactionsState>('myPostReactions')"
                },
                {
                    "name": "selectMyPostReactionsByPostId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  address: string,\r\n  postId: string\r\n) =>\r\n  createSelector(\r\n    selectMyPostReactionsEntities,\r\n    (myPostReactionsEntities) => myPostReactionsEntities[address + '-' + postId]\r\n  )"
                },
                {
                    "name": "selectMyPostReactionsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectTotal\r\n)"
                },
                {
                    "name": "selectMyPostReactionsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectEntities\r\n)"
                },
                {
                    "name": "selectMyPostReactionsIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectMyPostReactions,\r\n  selectIds\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "myPostReactionsAdapter.getSelectors()"
                }
            ],
            "src/app/ui-lib/buttons/send-tips-button/send-tips-button.stories.ts": [
                {
                    "name": "SendTipsButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SendTipsButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SendTipsButtonComponent>",
                    "defaultValue": "(\r\n  args: SendTipsButtonComponent\r\n) => ({\r\n  component: SendTipsButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.stories.ts": [
                {
                    "name": "SendTokensButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SendTokensButtonComponent>",
                    "defaultValue": "Template.bind(\r\n  {}\r\n)"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SendTokensButtonComponent>",
                    "defaultValue": "(\r\n  args: SendTokensButtonComponent\r\n) => ({\r\n  component: SendTokensButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/notification/notification.actions.ts": [
                {
                    "name": "setLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/notification/notification.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Loader] Set Loader',\r\n  props<{ isLoading: boolean }>()\r\n)"
                }
            ],
            "src/app/state/my-account/my-account.actions.ts": [
                {
                    "name": "setMyAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/my-account/my-account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[My Account] Set My Account',\r\n  props<{ payload: MyAccountState }>()\r\n)"
                }
            ],
            "src/app/ui-lib/buttons/sign-out-button/sign-out-button.stories.ts": [
                {
                    "name": "SignOutButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SignOutButtonComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SignOutButtonComponent>",
                    "defaultValue": "(\r\n  args: SignOutButtonComponent\r\n) => ({\r\n  component: SignOutButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/state/space/space.reducer.ts": [
                {
                    "name": "spaceReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/space/space.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialSpaceState,\r\n  on(SpaceActions.loadSpacesByIds, (state) => state),\r\n\r\n  on(SpaceActions.upsertSpaces, (state, { payload }) => {\r\n    return payload ? spaceAdapter.upsertMany(payload, state) : state;\r\n  }),\r\n\r\n  on(SpaceActions.upsertSpace, (state, { payload }) => {\r\n    return payload ? spaceAdapter.upsertOne(payload, state) : state;\r\n  }),\r\n  on(SpaceActions.updateSpace, (state, { payload }) => {\r\n    return spaceAdapter.updateOne(payload, state);\r\n  }),\r\n  on(SpaceActions.loadSpaceById, (state) => state)\r\n)"
                }
            ],
            "src/app/ui-lib/buttons/follow-button/follow-button.component.ts": [
                {
                    "name": "STATUS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  FOLLOW: 'follow',\n  FOLLOWING: 'following',\n}"
                },
                {
                    "name": "TYPE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  SPACE: 'space',\n  PROFILE: 'profile',\n}"
                }
            ],
            "src/app/shared/services/storage.service.ts": [
                {
                    "name": "STORAGE_KEYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/storage.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  accountId: 'accountId',\r\n  lang: 'lang',\r\n}"
                }
            ],
            "src/app/ui-lib/input/tag/tag.stories.ts": [
                {
                    "name": "Tag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/tag/tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TagComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/input/tag/tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TagComponent>",
                    "defaultValue": "(args: TagComponent) => ({\r\n  component: TagComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/ui-lib/balance/tokens/tokens.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/balance/tokens/tokens.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TokensComponent>",
                    "defaultValue": "(args: TokensComponent) => ({\r\n  component: TokensComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "Tokens",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/balance/tokens/tokens.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TokensComponent>",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/ui-lib/buttons/write-post-button/write-post-button.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/write-post-button/write-post-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<WritePostButtonComponent>",
                    "defaultValue": "(\r\n  args: WritePostButtonComponent\r\n) => ({\r\n  component: WritePostButtonComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "WritePostButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/buttons/write-post-button/write-post-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<WritePostButtonComponent>",
                    "defaultValue": "Template.bind(\r\n  {}\r\n)"
                }
            ],
            "src/app/ui-lib/text/title/title.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/text/title/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TitleComponent>",
                    "defaultValue": "(args: TitleComponent) => ({\r\n  component: TitleComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "Title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui-lib/text/title/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TitleComponent>",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/core/constants/transfer-keys.ts": [
                {
                    "name": "TRANSFER_KEYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/transfer-keys.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  POST_DATA: 'post_data',\r\n  SPACE_DATA: 'space_data',\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "server.ts": [
                {
                    "name": "app",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "express.Express"
                },
                {
                    "name": "run",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                }
            ],
            "src/app/state/content/content.reducer.ts": [
                {
                    "name": "contentReducer",
                    "file": "src/app/state/content/content.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/constants/storybook.const.ts": [
                {
                    "name": "deviceRegistry",
                    "file": "src/app/core/constants/storybook.const.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "service",
                            "type": "DeviceService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "service",
                            "type": "DeviceService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.reducer.ts": [
                {
                    "name": "followedAccountIdsReducer",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.reducer.ts": [
                {
                    "name": "followedSpaceIdsReducer",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "initApi",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "service",
                            "type": "SubsocialApiService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "service",
                            "type": "SubsocialApiService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registryIcons",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "service",
                            "type": "IconRegistryService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "service",
                            "type": "IconRegistryService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/notification/loader.reducer.ts": [
                {
                    "name": "loaderReducer",
                    "file": "src/app/state/notification/loader.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/my-account/my-account.reducer.ts": [
                {
                    "name": "myAccountReducer",
                    "file": "src/app/state/my-account/my-account.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.reducer.ts": [
                {
                    "name": "myPostReactionsReducer",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/post/post.reducer.ts": [
                {
                    "name": "postReducer",
                    "file": "src/app/state/post/post.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/profile/profile.reducer.ts": [
                {
                    "name": "profileReducer",
                    "file": "src/app/state/profile/profile.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/reply-id/reply-id.reducer.ts": [
                {
                    "name": "replyIdReducer",
                    "file": "src/app/state/reply-id/reply-id.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/state/space/space.reducer.ts": [
                {
                    "name": "spaceReducer",
                    "file": "src/app/state/space/space.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/decorators/ssr-load-data.decorator.tw.ts": [
                {
                    "name": "SSRLoadData",
                    "file": "src/app/core/decorators/ssr-load-data.decorator.tw.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/core/rxjs-custom/operators.ts": [
                {
                    "name": "takeValueOnce",
                    "file": "src/app/core/rxjs-custom/operators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "source$",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "source$",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/services/account.service.ts": [
                {
                    "name": "ACCOUNT_STATUS",
                    "childs": [
                        {
                            "name": "INIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EXTENSION_NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ACCOUNTS_NOT_FOUND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "UNAUTHORIZED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AUTHORIZED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/services/account.service.ts"
                }
            ],
            "src/app/core/enums/common.ts": [
                {
                    "name": "FORM_STATUS",
                    "childs": [
                        {
                            "name": "VALID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VALID"
                        },
                        {
                            "name": "INVALID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "INVALID"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enums/common.ts"
                }
            ],
            "src/app/core/constants/query.const.ts": [
                {
                    "name": "KIND",
                    "childs": [
                        {
                            "name": "UPVOTE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Upvote"
                        },
                        {
                            "name": "DOWNVOTE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Downvote"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/constants/query.const.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/core/types/account.types.ts": [
                {
                    "name": "AccountData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "AccountRawData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "Balance",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "PolkadotAccount",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/account.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/notification/services/notification.service.ts": [
                {
                    "name": "ActivityType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"notifications\" | \"feed\"",
                    "file": "src/app/notification/services/notification.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                },
                {
                    "name": "SignMessageProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/notification/services/notification.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/reply-id/reply-id.actions.ts": [
                {
                    "name": "AddReplyIdProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/reply-id/reply-id.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/address-size.type.ts": [
                {
                    "name": "AddressSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "src/app/core/types/address-size.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/base-component/box.component.ts": [
                {
                    "name": "AlignType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"start\" | \"end\" | \"center\" | \"normal\" | \"space-between\"",
                    "file": "src/app/core/base-component/box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/ui-lib/buttons/tx-button/tx-button.component.ts": [
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"medium\" | \"large\"",
                    "file": "src/app/ui-lib/buttons/tx-button/tx-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                },
                {
                    "name": "ButtonWidth",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"full\" | \"static\"",
                    "file": "src/app/ui-lib/buttons/tx-button/tx-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/ui-lib/modal-dialogs/choose-space-modal-dialog/choose-space-modal-dialog.component.ts": [
                {
                    "name": "ChooseSpaceModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/ui-lib/modal-dialogs/choose-space-modal-dialog/choose-space-modal-dialog.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/comment-data.type.ts": [
                {
                    "name": "CommentItemData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/comment-data.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/post/post/post.component.ts": [
                {
                    "name": "CommentPostData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/post/post/post.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/dialog-modal-data.types.ts": [
                {
                    "name": "ConnectionModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "FollowersModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "ReactionModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "SignInModalData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/dialog-modal-data.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/content.type.ts": [
                {
                    "name": "Content",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/types/content.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/space/edit-space/edit-space.component.ts": [
                {
                    "name": "EditSpaceFormErrors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/space/edit-space/edit-space.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/entity-data.type.ts": [
                {
                    "name": "EntityListData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/entity-data.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/base-component/base-tx.component.ts": [
                {
                    "name": "ExtrinsicProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/base-component/base-tx.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/shared/services/subsocial-api.service.ts": [
                {
                    "name": "FetchSubstrateMultiProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/services/subsocial-api.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "FetchSubstrateProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/services/subsocial-api.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/mapper/flatten.map.ts": [
                {
                    "name": "FlatReaction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/mapper/flatten.map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/ui-lib/buttons/follow-button/follow-button.component.ts": [
                {
                    "name": "FollowButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"medium\" | \"large\"",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                },
                {
                    "name": "FollowButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"space\" | \"profile\"",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                },
                {
                    "name": "FollowButtonWidth",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"full\" | \"static\"",
                    "file": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/state/followed-account-ids/followed-account-ids.state.ts": [
                {
                    "name": "FollowedAccountIdsStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/followed-space-ids/followed-space-ids.state.ts": [
                {
                    "name": "FollowedSpaceIdsStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/models/space/space-list-item.model.ts": [
                {
                    "name": "HasHandle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/space/space-list-item.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "SpaceContentExtend",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/space/space-list-item.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "SpaceListItemData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/space/space-list-item.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/core/types/image.type.ts": [
                {
                    "name": "ImageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"square\" | \"full\" | \"notification\"",
                    "file": "src/app/core/types/image.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/ui-lib/action-panel/action-panel.component.ts": [
                {
                    "name": "InitialVoteStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/ui-lib/action-panel/action-panel.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "OperationType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/ui-lib/action-panel/action-panel.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/shared/services/transaction.service.ts": [
                {
                    "name": "IpfsContentProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/services/transaction.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts": [
                {
                    "name": "LanguageMenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/types.ts": [
                {
                    "name": "LoadEntitiesProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/ui-lib/menu/left-side-menu/left-side-menu.component.ts": [
                {
                    "name": "MenuItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/ui-lib/menu/left-side-menu/left-side-menu.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/my-post-reactions/my-post-reactions.state.ts": [
                {
                    "name": "MyPostReactions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/notification/notification-page/notification-page.component.ts": [
                {
                    "name": "NotificationInfoProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/notification/notification-page/notification-page.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "NotificationItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/notification/notification-page/notification-page.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/option-button.type.ts": [
                {
                    "name": "OptionButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"post\" | \"space\" | \"comment\"",
                    "file": "src/app/core/types/option-button.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/state/own-space-ids/own-space-ids.state.ts": [
                {
                    "name": "OwnSpaceIdsStruct",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/own-space-ids/own-space-ids.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/post/edit-post/edit-post.component.ts": [
                {
                    "name": "PostFormErrors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/post/edit-post/edit-post.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/profile/profile.state.ts": [
                {
                    "name": "Profile",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/profile/profile.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/profile-component-data.type.ts": [
                {
                    "name": "ProfileComponentData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/profile-component-data.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/reply-id.type.ts": [
                {
                    "name": "ReplyIds",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/reply-id.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/scroll-props.type.ts": [
                {
                    "name": "ScrollProps",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/scroll-props.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts": [
                {
                    "name": "SimpleSnackBarOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/state/space/space.state.ts": [
                {
                    "name": "Space",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/state/space/space.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/types/space-info.type.ts": [
                {
                    "name": "SpaceInfoType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"medium\" | \"large\"",
                    "file": "src/app/core/types/space-info.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/tabs.type.ts": [
                {
                    "name": "Tabs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"spaces\" | \"posts\"",
                    "file": "src/app/core/types/tabs.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/tag-size.type.ts": [
                {
                    "name": "TagSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\" | \"huge\"",
                    "file": "src/app/core/types/tag-size.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/title.type.ts": [
                {
                    "name": "TitleSizeType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "src/app/core/types/title.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/transform-dto.types.ts": [
                {
                    "name": "TransformData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/transform-dto.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "TransformDataArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/transform-dto.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                },
                {
                    "name": "TransformPostWithAllDetails",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/types/transform-dto.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/account/edit-profile/edit-profile.component.ts": [
                {
                    "name": "Type",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"edit\" | \"new\"",
                    "file": "src/app/account/edit-profile/edit-profile.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/models/user-info.model.ts": [
                {
                    "name": "UserInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/user-info.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/core/types/user-list.type.ts": [
                {
                    "name": "UserListType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"follow\" | \"sub\"",
                    "file": "src/app/core/types/user-list.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/base-component/base-visible-tx.component.ts": [
                {
                    "name": "VisibleOperationType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"post\" | \"space\"",
                    "file": "src/app/core/base-component/base-visible-tx.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ],
            "src/app/core/types/vote-icon.type.ts": [
                {
                    "name": "VoteIconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"upvote\" | \"downvote\"",
                    "file": "src/app/core/types/vote-icon.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__non_webpack_require__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "domino",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleFilename",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "path",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "win",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/account/account/account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/account/edit-profile/edit-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "src/app/account/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/account/services/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initApi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "registryIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/base-infinity-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseInfinityScrollComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/base-tx.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseTxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/base-value-accessor.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseControlValueAccessorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/base-visible-tx.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseVisibleTxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-component/vote-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-entity/with-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WithId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/classes/scroll-props.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScrollProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/links.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LINKS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/messages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MESSAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/query.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "METHODS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/query.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PALLETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/size.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AVATAR_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/size.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODAL_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "deviceRegistry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BaseRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DISABLE_ARG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRegistryProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imageUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostCommentTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProfileTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SbDeviceRegistry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SbRouterModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SbStoreModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SbTemplateId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SharedPostTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/storybook.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpaceTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/transfer-keys.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRANSFER_KEYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/decorators/ssr-load-data.decorator.tw.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SSRLoadData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/content-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentEntity",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Entity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/post-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostEntity",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/profile-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileEntity",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/space-entity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpaceEntity",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/core/entities/state-entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StateEntity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/errors/error-matcher.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/on-view-reaction.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OnViewReaction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mapper/comment.map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapPostToCommentItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mapper/flatten.map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "flatReaction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mapper/post.map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapPostDTOToPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mapper/profile.map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapProfileDTOToProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mapper/space.map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapSpaceDTOToSpace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/key-value-pair.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValuePair",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/mockup-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MockupData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/post/post-list-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/tab-link-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabLinkData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/rxjs-custom/operators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "takeValueOnce",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/rxjs-custom/operators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isNotEmptyOrNull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dictionaryToArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getPostLink",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEntitiesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/feed/feed.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/notification/notification-item/notification-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/notification/notification-page/notification-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/notification/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/post/edit-post/edit-post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditPostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/51",
                "status": "low"
            },
            {
                "filePath": "src/app/post/post-list/post-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/post/post/post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/post/services/post.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/adblock-detect/adblock-detect.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdblockDetectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header-menu-button/header-menu-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderMenuButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/link-icons/link-icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkIconsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/simple-snack-bar/simple-snack-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleSnackBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/vote-user-list-item/vote-user-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteUserListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/vote-user-list/vote-user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteUserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/if-desktop.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IfDesktopDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/if-mobile.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IfMobileDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/address-hidden.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "AddressHiddenPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/dayjs.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DayjsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/image-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ImageUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/link-to-icon.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LinkToIconPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/numeral.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumeralPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/pluralize.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PluralizePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/comment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/content.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContentService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/convert.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConvertService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/date.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/device.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeviceService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/follower.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FollowerService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/icon-registry.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconRegistryService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/link.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LinkService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/permissions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PermissionsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/reactions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReactionsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/side-nav.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SideNavService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/snack-bar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackBarService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORAGE_KEYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/subsocial-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubsocialApiService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/transaction.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TransactionService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/transfer-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TransferStateService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/visibility.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "VisibilityService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/space/edit-space/edit-space.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditSpaceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/space/services/space.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpaceService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/space/space-list/space-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/space/space-profile/space-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/space/space/space.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "saveContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "saveContents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertContents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ContentEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "contentReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllContents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContentEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectContentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "contentAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/content/content.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialContentState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFollowedAccountIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertFollowedAccountIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FollowedAccountIdsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "followedAccountIdsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "followedAccountIdsReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFollowedAccountIdsByCurrentAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFollowedAccountIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFollowedSpaceIdsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FollowedAccountIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "followedAccountIdsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-account-ids/followed-account-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialFollowedAccountIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFollowedSpaceIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertFollowedSpaceIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FollowedSpaceIdsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FollowedSpaceIdsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "followedSpaceIdsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "followedSpaceIdsReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFollowedSpaceIdsByCurrentAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFollowedSpaceIdsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFollowedSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FollowedSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "followedSpaceIdsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/followed-space-ids/followed-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialFollowedSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setMyAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyAccountFacade",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "myAccountReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myAccountReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyAccountAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MyAccountState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-account/my-account.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialMyAccountState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reaction.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyPostReactionFacade",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGetMyPostReactionsByPostIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertMyPostReactions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyPostReactionsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "myPostReactionsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myPostReactionsReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactionsByPostId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactionsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactionsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyPostReactionsIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MyPostReactionsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialMyPostReactionsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/my-post-reactions/my-post-reactions.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myPostReactionsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/loader.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/loader.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loaderReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/loader.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loaderReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/loader.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/loader.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLoaderStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/loader.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoaderState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/loader.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialLoaderState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/notification/notification.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OwnSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialOwnSpaceIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/own-space-ids/own-space-ids.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ownSpaceIdsAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addNewCommentPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadPostsByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "switchIsChildrenCommentShow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updatePost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostFacade",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "postReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllPosts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNonExistingPostIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPostsWithAllDetailsByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialPostState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/post/post.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "postAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMyProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProfileById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProfilesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "saveMyProfileSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "saveProfilesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "saveProfileSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertProfile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileFacade",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "profileReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profileReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMyAccountProfileData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfileById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfileEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfilesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfilesCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserInfoByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/profile/profile.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profileAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addReplyId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadReplyIdsByParentPostId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateReplyIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertReplyIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReplyIdEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "replyIdReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "replyIdsReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllPReplyIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCommentPostsByPostId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectReplyIdsByPostId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectReplyIdsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectReplyIdsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectReplyIdsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReplyIdState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialReplyIdState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply-id.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "replyIdAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/reply-id/reply.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReplyFacade",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSpaceById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSpacesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSpaceSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateSpace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertSpace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertSpaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpaceEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpaceFacade",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "spaceReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spaceReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllSpaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceEntitiesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpacesByIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpacesCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSpaceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpaceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialSpaceState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/space/space.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spaceAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/state/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/transloco-root.module.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslocoHttpLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/action-panel/action-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/address/address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/address/address.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/address/address.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Image",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/balance/tokens/tokens.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TokensComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/balance/tokens/tokens.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/balance/tokens/tokens.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tokens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/buttons.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/close-button/close-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CloseButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/close-button/close-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CloseButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/close-button/close-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/comment-button/comment-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/comment-button/comment-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/comment-button/comment-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateEntityButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CreateEntityButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subscription",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/create-entity-button/create-entity-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/create-space-button/create-space-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateSpaceButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/create-space-button/create-space.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CreateSpaceButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/create-space-button/create-space.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/downvote-button/downvote-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownvoteButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Active",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/downvote-button/downvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/edit-button/edit-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/edit-button/edit-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EditButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/edit-button/edit-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FollowButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/43",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STATUS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TYPE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FollowButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FollowingButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/follow-button/follow-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/icon-button/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/notification-icon-button/notification-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotificationButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/notification-icon-button/notification-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/notification-icon-button/notification-icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationIconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/profile-button/profile-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProfileButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SignInButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/profile-button/profile-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/qr-button/qr-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QrButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/qr-button/qr-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QrButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/qr-button/qr-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/reply-button/reply-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReplyButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/reply-button/reply-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ReplyButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/reply-button/reply-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-button/send-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendTipsButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SendTipsButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tips-button/send-tips-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SendTokensButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SendTokensButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/send-tokens-button/send-tokens-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/shared-button/shared-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SharedButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/shared-button/shared-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignOutButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SignOutButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/sign-out-button/sign-out-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/tx-button/tx-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TxButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/tx-button/tx-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/upvote-button/upvote-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpvoteButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Active",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/upvote-button/upvote-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/write-post-button/write-post-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritePostButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/write-post-button/write-post-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/buttons/write-post-button/write-post-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WritePostButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-input/comment-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/56",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "commentForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-input/comment-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-item/comment-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-item/comment-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-list/comment-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comment-list/comment-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comments/comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comments/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Comments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/comments/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/comment/show-comments-button/show-comments-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShowCommentsButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/column/column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/column/column.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/column/column.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "control",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/column/column.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/column/column.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/row/row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/row/row.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "control",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/row/row.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/row/row.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Row",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/row/row.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/scroll/scroll-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ScrollContainer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/scroll/scroll-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/containers/scroll/scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScrollComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/embed-video/embed-video.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmbedVideoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HiddenContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HiddenComment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HiddenPost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HiddenSpace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostWithHiddenSpace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/hidden-content/hidden-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/no-content/no-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/no-content/no-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/no-content/no-content.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/post-image/post-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/post-image/post-image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/content/post-image/post-image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Round",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RoundWithImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Square",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SquareWithImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/image-loader/image-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/mde-editor/mde-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MdeEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MarkdownEditor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/mde-editor/mde-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag-input/tag-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tagCtrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TagInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag-input/tag-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag/tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/tag/tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-area/text-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-input/text-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/input/text-input/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextInputError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/comment-menu/comment-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/47",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/left-side-menu/left-side-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LeftSideMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/menu-item/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/post-menu/post-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/profile-menu/profile-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/sidenav-menu/sidenav-menu.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LANG_LABELS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/menu/space-menu/space-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/47",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/account-sidenav/account-sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/adblock-conflict-modal-dialog/adblock-conflict-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdblockConflictModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/choose-space-modal-dialog/choose-space-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChooseSpaceModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/connections-modal-dialog/connections-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectionsModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/followers-modal-dialog/followers-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FollowersModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/qr-modal-dialog/qr-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QrModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/services/sign-in-modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SignInModalService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/share-post-modal-dialog/share-post-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SharePostModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/sign-in-modal-dialog/sign-in-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/modal-dialogs/vote-modal-dialog/vote-modal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteModalDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-info/post-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-info/post-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-info/post-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-item/post-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PostItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/post-item/post-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SharedPostItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HiddenSharedPostItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SharedPostItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/post-ui/shared-post-item/shared-post-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/account-list-item/account-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AccountListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/account-list-item/account-list-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/profile-info/profile-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProfileInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/profile/profile-info/profile-info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-info/space-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpaceInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-info/space.info.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-item/space-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpaceItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-item/space-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-select/space-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpaceSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "params",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "spaces",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpaceSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/space-ui/space-select/space-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/comment-post-title/comment-post-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentPostTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/expand-paragraph/expand-paragraph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpandParagraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/paragraph/paragraph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ParagraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/paragraph/paragraph.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paragraph",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/paragraph/paragraph.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/see-more/see-more.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeeMoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/see-more/see-more.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SeeMore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/see-more/see-more.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/title/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui-lib/text/title/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseNodeAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseNodeUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseNodeAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseNodeUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}